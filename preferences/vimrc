"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" .vimrc (12/05/2018)
"
" => roux g buciu
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"   TABLE OF CONTENTS (SECTIONS)
"
"   -> General
"   -> VIM user interface
"   -> Statusline
"   -> Colors & fonts
"   -> Text, tab & indent
"   -> ViVisual mode related
"   -> Moving around, tabs and buffers
"   -> Editing mappings
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets how many lines of history VIM has to remember
set hidden
set history=200
set undolevels=200

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
" let mapleader = ","
" let g:mapleader = ","

" enable vim to do cool stuff without caring about vi
set nocompatible



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the cursor - when moving vertically using j/k
"set so=7

"Add line numbering
set number

"Add relative line numbering
set relativenumber

"Always show current position
set ruler

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" turn off search highlight
" nnoremap <leader><space> :nohlsearch<CR>

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" Show matching brackets when text indicator is over them
set showmatch

" How many tenths of a second to blink when matching brackets
set mat=2

" Draws a cursorline under the cursor
"set cursorline

" column line
highlight ColorColumn ctermbg=magenta "set to whatever you like
call matchadd('ColorColumn', '\%81v', 100) "set column nr



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Statusline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction

" :h mode() to see all modes
let g:currentmode={
    \ 'n'      : 'NORMAL',
    \ 'no'     : 'NORMAL·Operator Pending ',
    \ 'v'      : 'VISUAL ',
    \ 'V'      : 'VISUAL·LINE ',
    \ '\<C-V>' : 'VISUAL·BLOCK ',
    \ 's'      : 'SELECT ',
    \ 'S'      : 'SELECT·LINE ',
    \ '\<C-S>' : 'S·Block ',
    \ 'i'      : 'INSERT ',
    \ 'R'      : 'REPLACE ',
    \ 'Rv'     : 'VISUAL·REPLACE ',
    \ 'c'      : 'COMMAND ',
    \ 'cv'     : 'VIM EX ',
    \ 'ce'     : 'EX ',
    \ 'r'      : 'PROMPT ',
    \ 'rm'     : 'More ',
    \ 'r?'     : 'Confirm ',
    \ '!'      : 'SHELL ',
    \ 't'      : 'TERMINAL '
    \}

" Automatically change the statusline color depending on mode
function! ChangeStatuslineColor()
  if (mode() =~# '\v(n|no)')
    exe 'hi! StatusLine ctermfg=133'
  elseif (mode() =~# '\v(v|V)' || g:currentmode[mode()] ==# 'V·Block' || get(g:currentmode, mode(), '') ==# 't')
    " Grey here for visual line
    exe 'hi! StatusLine ctermfg=005'
  elseif (mode() ==# 'i')
    " Insert mode colour:
    exe 'hi! StatusLine ctermbg=226 ctermfg=154'
  else
    exe 'hi! StatusLine ctermbg=226 ctermfg=052'
  endif

  return ''
endfunction


" Draw statusline
set laststatus=2
set statusline=
set statusline+=%2*\ %m\ %*
set statusline+=%3*\ \%n\ %*
set statusline+=%{ChangeStatuslineColor()}
set statusline+=\ \ \ %{toupper(g:currentmode[mode()])}\ \ \ 
set statusline+=%5*\ \ %{StatuslineGit()}
set statusline+=\ ››\ %*
set statusline+=\ %F\ 
set statusline+=%=
set statusline+=%4*\‹‹\ L:\ %l
set statusline+=\ \|\ C:\ %c
set statusline+=\ ››
set statusline+=%6*\ %y\ 
set statusline+=%1*\ %{&fileencoding?&fileencoding:&encoding}\ 
set statusline+=%9*\ [%{&fileformat}\]\ 
set statusline+=%8*\ \ %p%%\ \ 


" Red w/ yellow text used for modifier
hi User2 ctermfg=226 ctermbg=160

" Green with black text used for buffer number
hi User3 ctermfg=000 ctermbg=154

" Light-blue/teal used for lines
hi User4 ctermfg=232 ctermbg=123

" Teal used for filetype
hi User6 ctermfg=232 ctermbg=045

" Gold used for encoding
hi User1 ctermfg=051 ctermbg=033

" used for fileformat
hi User9 ctermfg=051 ctermbg=026

" orange used for git
hi User5 ctermfg=232 ctermbg=202

" Purple
hi User7 ctermfg=000 ctermbg=141

" Rose used for file percent
hi User8 ctermfg=051 ctermbg=019



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines



""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 'qj' as ESC
" inoremap qj  <esc>

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()
