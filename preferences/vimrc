"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" .vimrc (12/05/2018)
"
" => roux g buciu
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"   TABLE OF CONTENTS (SECTIONS)
"
"   -> General
"   -> VIM user interface
"   -> Statusline
"   -> Colors & fonts
"   -> Text, tab & indent
"   -> ViVisual mode related
"   -> Moving around, tabs and buffers
"   -> Editing mappings
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use vim settnigs rather than vi settings
"   - this must be first because it changes other options
set nocompatible

" Sets how many lines of history VIM has to remember
set hidden
set history=200
set undolevels=200

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
" let mapleader = ","
" let g:mapleader = ","




"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the cursor - when moving vertically using j/k
"set so=7

" keep 3 lines off the edges of the screen when scrolling
set scrolloff=4

"Add line numbering
set number

"Add relative line numbering
set relativenumber

"Always show current position
set ruler

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" turn off search highlight
" nnoremap <leader><space> :nohlsearch<CR>

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" Show matching brackets when text indicator is over them
set showmatch

" How many tenths of a second to blink when matching brackets
set mat=2

" Draws a cursorline under the cursor
"set cursorline

" normal OS clipboard interaction
set clipboard=unnamed

" column line
highlight ColorColumn ctermbg=magenta "set to whatever you like
call matchadd('ColorColumn', '\%81v', 100) "set column nr

" higight whitespaces and tabs and extensions
set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.

" but ignore them if in an html file or xml file
autocmd filetype html,xml set listchars-=tab:>.

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Statusline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" returns a string of the current branch
function CurrentGitStatus()
    let gitoutput = split(system('git status --porcelain -b '.shellescape(expand('%')).' 2>/dev/null'),'\n')
    if len(gitoutput) > 0
        let b:gitstatus = ' ' . strpart(get(gitoutput,0,''),3) 
    else
        let b:gitstatus = ''
    endif
endfunc
autocmd BufEnter,BufWritePost * call CurrentGitStatus()

" :h mode() to see all modes
let g:currentmode={
    \ 'n'      : 'NORMAL',
    \ 'no'     : 'NORMAL·Operator Pending ',
    \ 'v'      : 'VISUAL ',
    \ 'V'      : 'VISUAL·LINE ',
    \ '\<C-V>' : 'VISUAL·BLOCK ',
    \ 's'      : 'SELECT ',
    \ 'S'      : 'SELECT·LINE ',
    \ '\<C-S>' : 'S·Block ',
    \ 'i'      : 'INSERT ',
    \ 'R'      : 'REPLACE ',
    \ 'Rv'     : 'VISUAL·REPLACE ',
    \ 'c'      : 'COMMAND ',
    \ 'cv'     : 'VIM EX ',
    \ 'ce'     : 'EX ',
    \ 'r'      : 'PROMPT ',
    \ 'rm'     : 'More ',
    \ 'r?'     : 'Confirm ',
    \ '!'      : 'SHELL ',
    \ 't'      : 'TERMINAL '
    \}

" Automatically change the statusline color depending on mode for the NORMAL bar
function! ChangeStatuslineColor()
  if (mode() =~# '\v(n|no)')
    exe 'hi! StatusLine ctermfg=13 ctermbg=7'
  elseif (mode() =~# '\v(v|V)' || g:currentmode[mode()] ==# 'V·Block' || get(g:currentmode, mode(), '') ==# 't')
    " Grey here for visual line
    exe 'hi! StatusLine ctermfg=54 ctermbg=7'
  elseif (mode() ==# 'i')
    " Insert mode colour:
    exe 'hi! StatusLine ctermfg=12 ctermbg=7'
  elseif (mode() ==# 'c')
    " Command mode colour:
    exe 'hi! StatusLine ctermfg=11 ctermbg=0'
  else
    exe 'hi! StatusLine ctermfg=9 ctermbg=7'
  endif

  return ''
endfunction

" Automatically change the statusline color depending on mode for the NORMAL bar
function! ChangeStatuslineLeftColor()
  if (mode() =~# '\v(n|no)')
    exe 'hi! StatusLine ctermfg=15 ctermbg=13'
  elseif (mode() =~# '\v(v|V)' || g:currentmode[mode()] ==# 'V·Block' || get(g:currentmode, mode(), '') ==# 't')
    " Grey here for visual line
    exe 'hi! StatusLine ctermfg=15 ctermbg=54'
  elseif (mode() ==# 'i')
    " Insert mode colour:
    exe 'hi! StatusLine ctermfg=15 ctermbg=12'
  elseif (mode() ==# 'c')
    " Command mode colour:
    exe 'hi! StatusLine ctermfg=15 ctermbg=11'
  else
    exe 'hi! StatusLine ctermfg=15 ctermbg=9'
  endif

  return ''
endfunction


" Draw statusline
set laststatus=2
set statusline=
set statusline+=%1*\ %(%{&buflisted?bufnr('%'):''}:%L\ %)
set statusline+=%< " Truncate line here
set statusline+=%2*%3*\ %(%{b:gitstatus}%)\ 
set statusline+=%4*%5*\ %f\ %r%m\ %*
set statusline+=%{ChangeStatuslineLeftColor()}
set statusline+=
set statusline+=%{ChangeStatuslineColor()}
set statusline+=\ \ \ %{toupper(g:currentmode[mode()])}\ \ \ 
set statusline+=%=
set statusline+=%8*\ \ %7*\ %c\ 
set statusline+=%6*\%5*\ %p%%\ ☰\ \ %* 
set statusline+=%4*%3*\ %y
set statusline+=\ %2*%1*\ %{&fileencoding?&fileencoding:&encoding}\ [%{&fileformat}\]%*


" dark grey with beige text 
hi User1 ctermfg=007 ctermbg=237

" Transition
hi User2 ctermfg=237 ctermbg=14

" Green with yellow background
hi User3 ctermfg=226 ctermbg=14

" Transition
hi User4 ctermfg=14 ctermbg=015

" Beige with dark text
hi User5 ctermfg=0 ctermbg=15

" Transition
hi User6 ctermfg=15 ctermbg=11

" gold with black text
hi User7 ctermfg=0 ctermbg=11

" Transition
hi User8 ctermfg=11 ctermbg=235

" Rose used for file percent
hi User9 ctermfg=9 ctermbg=235

" use a status bar that is 2 rows high
set cmdheight=2


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Use multiple of shift width when indenting with < and >
set shiftround

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines



""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 'qj' as ESC
" inoremap qj  <esc>

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()

" remapping keys to useful things
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" Swap implementations of ` and ' jump to markers
" By default, ' jumps to the marked line, ` jumps to the marked line and
" column, so swap them
nnoremap ' `
nnoremap ` '
