#+TITLE: SYNTHMACS Config
#+AUTHOR: roux g. buciu
#+DESCRIPTION: adudenamedruby's emacs configuration
#+STARTUP: showeverything
#+OPTIONS: auto-id:t
#+OPTIONS: broken-links:t
#+OPTIONS: tags:nil
#+OPTIONS: toc
#+PROPERTY: header-args:emacs-lisp :comments link

* TABLE OF CONTENTS :toc:
- [[#introduction][Introduction]]
  - [[#what-is-a-synthmacs][What is a ~Synthmacs~?]]
  - [[#about-synthmacsorg][About ~synthmacs.org~]]
  - [[#why-vanilla-emacs][Why vanilla Emacs?]]
  - [[#why-a-literate-config][Why a literate config?]]
  - [[#synthmacs-modules][Synthmacs Modules]]
  - [[#structure-of-this-configuration][Structure of this configuration]]
- [[#early-initel-and-initel][early-init.el and init.el]]
  - [[#early-initel][early-init.el]]
  - [[#initel-startup-optimization][init.el: startup optimization]]
  - [[#initel-load-modules][init.el: load modules]]
- [[#core][Core]]
  - [[#package-manager][Package manager]]
  - [[#bootstrap-straight-and-straight-use-package][bootstrap straight and straight-use-package]]
- [[#org-mode][Org Mode]]
  - [[#org-mode-1][org mode]]
  - [[#enabling-the-table-of-contents][Enabling the Table of Contents]]
  - [[#using-org-id-in-links][Using org-id in links]]
  - [[#tangling-this-file][Tangling this file]]
- [[#provide-modules][Provide modules]]
  - [[#synthmacs-org][synthmacs-org]]
  - [[#synthmacs-straight][synthmacs-straight]]

* Introduction
:PROPERTIES:
:CUSTOM_ID: h:49282F28-9E13-48D2-A565-1605B1CC57B8
:END:

** What is a ~Synthmacs~?
~Synthmacs~ is what I've decided to call my Emacs config. It's a portmanteau of Sythesized and Emacs. But it's also inspired by "Synthwave" and "Synthesizers". Anyway, it's not a big deal, and you shouldn't worry about it!

** About ~synthmacs.org~
:PROPERTIES:
:CUSTOM_ID: h:D9ED3ADB-810A-4A1C-A1D3-5397874AFAC7
:END:
This file (~synthmacs.org~) is the literate Synthmacs configuration. Every time I save the file, the code blocks get tangled, asynchronously. By default, they get tangled (in sequence) to ~./init.el~. However, some blocks override this default (e.g. see the section [[*early-init.el][early-init.el]]), meaning that I end up with what are, essentially, modules in which things are organized in some way that makes sense to me

** Why vanilla Emacs?
:PROPERTIES:
:CUSTOM_ID: h:40A8BDAE-F8E3-4DB3-AC8C-7E5067B7EE4D
:END:
My introduction to Emacs was... Vim? I love Vim. But what I really wanted was to use those keybindings throughout many of the things I'm doing, and not just in Vim. So I switched over to Vimium in my browser. I also wanted to be able to customize certain behaviours of my editor. And I knew that Emacs was the place. But I didn't know anything about Emacs, and I didn't know anything about E-Lisp, and I didn't have the time to set everything up myself (knowing how big that entry learning curve is from having learned to use Vim). So, I tried a distribution of Emacs, and ended up using [[https://www.spacemacs.org/][Spacemacs]] for several years. I was mostly happy. Three things changed:
1. I started to learn LISP
2. And that made me want to understand Emacs a little more
3. Spacemacs is really great... but the way it's put together is very different to how a normal config looks like, so often, changing some things was.... challenging

Over the process of the next few weeks, I started experimenting with my own config. I took a ton of inspiration from a ton of people, shamelessly stealing ideas to make my config better. I've tried to credit code sources where possible. However, in my haste from earlier efforts, I don't have credits for everything. For anything that's not original, here's a non-exhaustive list of some of the places I was inspired by:
- 
  
It is a long journey, and I still have a long way to go, but I am glad I started it.

** Why a literate config?
:PROPERTIES:
:CUSTOM_ID: h:B5231F9E-07D2-4738-97FD-78EC648B3F3D
:END:
Having your configuration in ~org-mode~ has some benefits and some drawbacks, and it adds a layer of abstraction between me and my ~init.el~ file. So, is it worth it?

The main, biggest drawback is that it can happen that the ~org-mode~ file has a mistake and tangles an incorrect ~init.el~ file. In that case you can't use your nice bindings but you are thrown in barebones emacs and you have to =C-x C-f= your way to the ~init.el~ and run ~check-parens~.

You can also run ~org-babel-tangle-jump-to-org~ from the tangled file if you add:
#+begin_src org
,#+PROPERTY: header-args:emacs-lisp :comments link
#+end_src

Another drawback is that a big configuration can be slow to tangle and tangling on save can block ~emacs~. The solution for this is to do the tangling asynchronously. See [[#h:16B948EA-5375-44DE-ACD7-3664D4A9CE5F][this section]] for how that's accomplished.

Let's consider some of the benefits:
- People can read this file on Github pretty easily. It's how I learned a lot about Emacs, and I think the trade is worthwhile to give back.
- I can comfortably document my configuration (and not from within comments), include links, ~sh~ code blocks, etc.
- I can organize my configuration blocks in sections, easily disable some headings with ~COMMENT~, and other ~org-mode~ nicieties.

** Synthmacs Modules
:PROPERTIES:
:CUSTOM_ID: h:C522D670-C206-44F7-96CE-17D01E578287
:END:
I tangle this file with the function ~synthmacs/tangle-config~, you can read source code in [[#h:16B948EA-5375-44DE-ACD7-3664D4A9CE5F][this]] section.
Every time I save the ~synthmacs.org~ file, it is tangled to multiple ~.el~ files.

I achieve that by means of this file's "local variables", which I put at the end of the ~synthmacs.org~ file:
#+begin_src org
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(progn (synthmacs/org-add-ids-to-headlines-in-file) (synthmacs/tangle-config))) nil t)
# End:
#+end_src

To design modules, I look at blocks in my config that I might want to toggle on and off.
I assign org properties to each heading. These are what determine which ~.el~ file they will be written to.
For example the header of the section concerning ~lsp-mode~ has the following properties:
#+begin_src org
:PROPERTIES:
:CUSTOM_ID: h:6BC08822-D2B3-4BE9-9EBE-C42F89F0E688
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lsp.el
:END:
#+end_src

All subheadings under it will "inherit" those properties and will be tangled to the same file. We also need to write some ~emacs-lisp~ at the end of the tanged file to "provide" those modules. [[#h:E80DEB4B-6AC9-415D-AF36-0044479D1B5A][Here]] an example of one of these "footer" headers.

I then have a lean ~init.el~ (written in [[#h:7B22A4F3-49A1-4848-A185-B4EEA060EECE][this]] section) which I use to control which modules I want to use. Why turn off modules? Maybe something's acting up? Maybe I'm setting something up brand new and, while I'm still figuring things out, I want it enabled when I'm working on my config, but I don't want it enabled when I'm actually using Emacs for doing actual work.

** Structure of this configuration
:PROPERTIES:
:CUSTOM_ID: h:CEDB99C8-27AD-4118-8C8D-29A5882E47AE
:END:
In general, the config tries to manintain a pretty cohesive idea.
- In the second section some optimization of startup time, mostly stolen from smart people.
- In the third section we bootstrap ~straight~ and  ~use-package~, our package managers
- In the fourth section we configure ~emacs~ with sane defaults and extend some its core features (e.g. ~help-mode~)
- In the fifth section we set up ~general~, which we use to manage our keybindings and lazy loading of packages. Afterwards we configure ~evil~, for modal editing.
- In the sixth section the invaluable ~org-mode~ with several extensions
- The remaining sections declare my personal configuration of UI and core packages, leveraging the great tools described in this list.

* early-init.el and init.el
:PROPERTIES:
:CUSTOM_ID: h:EC68944C-F745-45D8-9905-420E0813DBAF
:END:

** early-init.el
:PROPERTIES:
:CUSTOM_ID: h:7DBC58C1-3944-437C-87F9-95C9202BD34E
:END:
Taken from DOOM's early init
#+BEGIN_SRC emacs-lisp :tangle early-init.el
  ;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*-
  ;; NOTE: early-init.el is now generated from synthmacs.org.  Please edit that file instead

  ;; Defer garbage collection further back in the startup process
  ;; (setq gc-cons-threshold most-positive-fixnum
  ;;       gc-cons-percentage 0.6)

  ;; In Emacs 27+, package initialization occurs before `user-init-file' is
  ;; loaded, but after `early-init-file'. Doom handles package initialization, so
  ;; we must prevent Emacs from doing it early!
  (setq package-enable-at-startup nil)
  ;; Do not allow loading from the package cache (same reason).
  (setq package-quickstart nil)

  ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)

  ;; Resizing the Emacs frame can be a terribly expensive part of changing the
  ;; font. By inhibiting this, we easily halve startup times with fonts that are
  ;; larger than the system default.
  (setq frame-inhibit-implied-resize t)

  ;; Disable GUI elements
  (setq menu-bar-mode -1)
  (setq tool-bar-mode -1)
  (when (fboundp 'set-scroll-bar-mode)
    (set-scroll-bar-mode nil))
  (setq inhibit-splash-screen t)
  (setq use-file-dialog nil)

  ;; Native-Comp
  (setq native-comp-speed 2
        comp-speed 2)
  (setq native-comp-async-report-warnings-errors nil
        comp-async-report-warnings-errors nil)
  (setq native-comp-async-query-on-exit t
        comp-async-query-on-exit t)

  ;;; early-init.el ends here
#+END_SRC

** init.el: startup optimization
:PROPERTIES:
:CUSTOM_ID: h:E6162DC2-7E1C-4843-8448-FF104A444B40
:END:
Taken from DOOM's init
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;;; init.el --- Personal configuration file -*- lexical-binding: t; no-byte-compile: t; -*-
  ;; NOTE: init.el is now generated from synthmacs.org.  Please edit that file instead

  ;; `file-name-handler-alist' is consulted on every `require', `load' and various
  ;; path/io functions. You get a minor speed up by nooping this. However, this
  ;; may cause problems on builds of Emacs where its site lisp files aren't
  ;; byte-compiled and we're forced to load the *.el.gz files (e.g. on Alpine)
  (unless (daemonp)
    (defvar doom--initial-file-name-handler-alist file-name-handler-alist)
    (setq file-name-handler-alist nil)
    ;; Restore `file-name-handler-alist' later, because it is needed for handling
    ;; encrypted or compressed files, among other things.
    (defun doom-reset-file-handler-alist-h ()
      ;; Re-add rather than `setq', because changes to `file-name-handler-alist'
      ;; since startup ought to be preserved.
      (dolist (handler file-name-handler-alist)
	(add-to-list 'doom--initial-file-name-handler-alist handler))
      (setq file-name-handler-alist doom--initial-file-name-handler-alist))
    (add-hook 'emacs-startup-hook #'doom-reset-file-handler-alist-h)
    (add-hook 'after-init-hook '(lambda ()
				   ;; restore after startup
				   (setq gc-cons-threshold 16777216
					 gc-cons-percentage 0.1)))
    )
  ;; Ensure Doom is running out of this file's directory
  (setq user-emacs-directory (file-truename (file-name-directory load-file-name)))
#+END_SRC

** init.el: load modules
:PROPERTIES:
:CUSTOM_ID: h:7B22A4F3-49A1-4848-A185-B4EEA060EECE
:END:
#+begin_src emacs-lisp :tangle init.el
  (message "SynthMacs is powering up, please be patient...")

  ;; (add-to-list 'load-path "~/.emacs.d/synthmacs/")
  (add-to-list 'load-path (expand-file-name "synthmacs" user-emacs-directory))

  (let ((file-name-handler-alist nil)
  	(gc-cons-threshold 100000000))
    (require 'synthmacs-general-settings)
    (require 'synthmacs-variables)
    (require 'synthmacs-functions)
    (require 'synthmacs-straight)

    ;; Load packages
    (require 'synthmacs-general)
    (require 'synthmacs-hydra)
    (require 'synthmacs-evil)
    (require 'synthmacs-general-keybindings)
    (require 'synthmacs-themes)
    (require 'synthmacs-windows)
    (require 'synthmacs-vertico)
    (require 'synthmacs-orderless)
    (require 'synthmacs-consult)
    (require 'synthmacs-marginalia)
    (require 'synthmacs-embark)
    ;; (require 'synthmacs-dirvish)
    (require 'synthmacs-icons)
    (require 'synthmacs-modeline)
    (require 'synthmacs-which-key)
    (require 'synthmacs-rainbow)
    (require 'synthmacs-helpful)
    (require 'synthmacs-rg)
    (require 'synthmacs-projectile)
    (require 'synthmacs-git)
    (require 'synthmacs-dashboard)
    (require 'synthmacs-org)
    (require 'synthmacs-avy)
    ;; (require 'synthmacs-treesitter)
    (require 'synthmacs-lsp)
    (require 'synthmacs-corfu)
    (require 'synthmacs-flycheck)
    (require 'synthmacs-imenu)
    (require 'synthmacs-snippets)

    ;; Load modules
    ;; (require 'synthmacs-swift)
    ;; (require 'synthmacs-lisp)

    ;; (require 'init-core)
    ;; (require 'init-ui-extra)
    ;; (require 'init-org-roam)
    ;; (require 'init-org-export)
    ;; (require 'init-prog-vterm)
    ;; (require 'init-prog-nix)
    ;; (require 'init-prog-lsp)
    ;; (require 'init-prog-python)
    ;; (require 'init-prog-jupyter)
    ;; (require 'init-prog-elisp)
    ;; (require 'init-prog-markdown)
    ;; (require 'init-prog-stan)
    ;; (require 'init-prog-r)
    ;; (require 'init-prog-clojure)
    ;; (require 'init-prog-tree-sitter)
    ;; (require 'init-extra-focus)
    ;; (require 'init-extra-web)
    ;; (require 'init-extra-rss)
    ;; (require 'init-extra)
    )

    ;;; init.el ends here
#+end_src

* Core
** Package manager
:PROPERTIES:
:CUSTOM_ID: h:376622D2-A6B7-4050-97C6-413B0D77B89C
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-straight.el
:END:
** bootstrap straight and straight-use-package
:PROPERTIES:
:CUSTOM_ID: h:686F7A63-013E-48ED-AC56-DF39BD398E20
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-straight.el
:END:
Some rules/conventions:
- Prefer ~:init~ to ~:custom~. Prefer multiple ~setq~ expressions to one.
- Default to ~:defer t~, use ~:demand~ to force loading
- When packages do not require installation e.g. ~dired~, we need ~:straight (:type built-in)~ 
- If you specify ~:commands~, they will be autoloaded and the package will be loaded when the commands are first executed
    + If you use ~:general~ and bind commands to keys it will automatically load the package on first invokation

#+BEGIN_SRC emacs-lisp
  (setq straight-repository-branch "develop")
  (setq straight-use-package-by-default t)
  ;; (setq straight-recipes-gnu-elpa-use-mirror t)
  ;; (setq straight-check-for-modifications '(check-on-save find-when-checking))
  ;;(setq straight-check-for-modifications nil)
  (setq use-package-always-ensure t)
  (setq use-package-always-defer t)

  (setq straight-repository-branch "develop")
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Install use-package
  (straight-use-package 'use-package)

#+END_SRC
* Org Mode
:PROPERTIES:
:CUSTOM_ID: h:B1DBE90D-B6C9-4BD4-B15B-185FE238D236
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-org.el
:END:
** org mode
:PROPERTIES:
:CUSTOM_ID: h:934C85A9-D8DB-455F-A19C-570300047FD5
:END:
Interesting bits:
- If you use + in lists it will show up as below:
  + subitem
- you can cycle to next TODO state with ~org-shiftright~
- You can access custom agenda views with ~org-agenda~, mapped to =SPC o A=
- Yo insert a src block use =, i= and then type initials e.g. ~jp~  for ~jupyter-python~

#+BEGIN_SRC emacs-lisp
  (use-package org
    ;; :straight org-plus-contrib
    ;; :straight (:type built-in)
    :hook ((org-mode . prettify-symbols-mode)
           (org-mode . visual-line-mode))
    ;; :general
    ;; (lc/leader-keys
    ;;   "f t" '(org-babel-tangle :wk "tangle")
    ;;   "o C" '(org-capture :wk "capture")
    ;;   "o l" '(org-todo-list :wk "todo list")
      
    ;;   "o c" '((lambda () (interactive)
    ;;             (persp-switch "main")
    ;;             (find-file (concat user-emacs-directory "readme.org")))
    ;;           :wk "open config")
    ;;   )
    ;; (lc/local-leader-keys
    ;;   :keymaps 'org-mode-map
    ;;   "a" '(org-archive-subtree :wk "archive subtree")
    ;;   "E" '(org-export-dispatch :wk "export")
    ;;   "i" '(org-insert-structure-template :wk "insert src")
    ;;   "l" '(:ignore true :wk "link")
    ;;   "l l" '(org-insert-link :wk "insert link")
    ;;   "l s" '(org-store-link :wk "store link")
    ;;   "L" '((lambda () (interactive) (org-latex-preview)) :wk "latex preview")
    ;;   ;; "L" '((lambda () (interactive) (org--latex-preview-region (point-min) (point-max))) :wk "latex")
    ;;   "r" '(org-refile :wk "refile")
    ;;   "n" '(org-toggle-narrow-to-subtree :wk "narrow subtree")
    ;;   "p" '(org-priority :wk "priority")
    ;;   "q" '(org-set-tags-command :wk "tag")
    ;;   "s" '(org-sort :wk "sort")
    ;;   "t" '(:ignore true :wk "todo")
    ;;   "t t" '(org-todo :wk "heading todo")
    ;;   "t s" '(org-schedule :wk "schedule")
    ;;   "t d" '(org-deadline :wk "deadline")
    ;;   "x" '(org-toggle-checkbox :wk "toggle checkbox")
    ;;   )
    ;; (org-mode-map
    ;;  :states 'insert
    ;;  "TAB" 'lc/org-indent-or-complete
    ;;  "S-TAB" nil)
    ;; (org-mode-map
    ;;  :states 'normal
    ;;  "z i" '(org-toggle-inline-images :wk "inline images"))
    :init
    ;; general settings
    (when (file-directory-p "~/Developer/ExoCortex/org")
      (setq org-directory "~/Developer/ExoCortex/org"
            +org-export-directory "~/Developer/ExoCortex/org/export"
            org-default-notes-file "~/Developer/ExoCortex/org/notes.org"
            org-id-locations-file "~/Developer/ExoCortex/org/.orgids"
            ))	
    ;; (setq org-export-in-background t)
    (setq org-src-preserve-indentation t) ;; do not put two spaces on the left
    (setq org-startup-indented t)
     ;;(setq org-startup-with-inline-images t)
    (setq org-hide-emphasis-markers nil)
    (setq org-catch-invisible-edits 'smart)
    (setq org-image-actual-width nil)
    (setq org-indent-indentation-per-level 1)
    (setq org-list-demote-modify-bullet '(("-" . "+") ("+" . "*")))
    ;; disable modules for faster startup
    ;; (setq org-modules
    ;;       '(ol-docview
    ;;         org-habit))
    ;; (setq org-todo-keywords
    ;;       '((sequence "TODO(t)" "NEXT(n)" "PROG(p)" "|" "HOLD(h)" "DONE(d)")))
    (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "»")
                                           ("#+END_SRC" . "«")
                                           ("#+begin_src" . "»")
                                           ("#+end_src" . "«")
                                           ("lambda"  . "λ")
                                           ("->" . "→")
                                           ("->>" . "↠")))
    ;; (setq prettify-symbols-unprettify-at-point 'right-edge)
  ;;   (defun lc/org-indent-or-complete ()
  ;;     "Complete 
  ;; if point is at end of a word, otherwise indent line."
  ;;     (interactive)
  ;;     (if (looking-at "\\>")
  ;;         (dabbrev-expand nil)
  ;;       (org-cycle)
  ;;       ))
    ;; (setq warning-
    ;; 	suppress-types (append warning-suppress-types '((org-element-cache))))
    ;; :config
    ;; ;; (efs/org-font-setup)
    ;; (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    ;; (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    ;; (add-to-list 'org-structure-template-alist '("py" . "src python"))
    ;; (add-to-list 'org-structure-template-alist '("clj" . "src clojure"))
    ;; (add-to-list 'org-structure-template-alist '("jp" . "src jupyter-python"))
    ;; (add-to-list 'org-structure-template-alist '("jr" . "src jupyter-R"))
    ;; ;; fontification
    ;; (add-to-list 'org-src-lang-modes '("jupyter-python" . python))
    ;; (add-to-list 'org-src-lang-modes '("jupyter-R" . R))
    ;; ;; latex
    ;; ;; (setq org-latex-compiler "xelatex")
    ;; ;; see https://www.reddit.com/r/emacs/comments/l45528/questions_about_mving_from_standard_latex_to_org/gkp4f96/?utm_source=reddit&utm_medium=web2x&context=3
    ;; ;; (setq org-latex-pdf-process '("TEXINPUTS=:$HOME/git/AltaCV//: tectonic %f"))
    ;; (setq org-latex-pdf-process '("tectonic %f"))
    ;; (setq org-export-backends '(html))
    ;; ;; (add-to-list 'org-export-backends 'beamer)
    ;; (plist-put org-format-latex-options :scale 1.2)
    )
#+END_SRC

** Enabling the Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
      :commands toc-org-enable
      :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Using org-id in links
:PROPERTIES:
:CUSTOM_ID: h:AC175A47-E576-4AA6-A9C7-709129F4C56F
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-org.el
:END:
Taken from https://writequit.org/articles/emacs-org-mode-generate-ids.html

Problem: when exporting org files to HTML, the header anchors are volatile. Once I publish a new HTML version of this file, the previous version's links are no longer valid.

This function adds ~CUSTOM_ID~ property to all headings in a file (one-time).
We can then use this to link to that heading forever.

Adding it as a ~after-save-hook~  automatically adds a ~CUSTOM_ID~ to newly created headers.

#+begin_src emacs-lisp
(use-package org
  :init
  (defun synthmacs/org-custom-id-get (&optional pom create prefix)
    "Get the CUSTOM_ID property of the entry at point-or-marker POM.
   If POM is nil, refer to the entry at point. If the entry does
   not have an CUSTOM_ID, the function returns nil. However, when
   CREATE is non nil, create a CUSTOM_ID if none is present
   already. PREFIX will be passed through to `org-id-new'. In any
   case, the CUSTOM_ID of the entry is returned."
    (interactive)
    (org-with-point-at pom
      (let ((id (org-entry-get nil "CUSTOM_ID")))
        (cond
         ((and id (stringp id) (string-match "\\S-" id))
          id)
         (create
          (setq id (org-id-new (concat prefix "h")))
          (org-entry-put pom "CUSTOM_ID" id)
          (org-id-add-location id (buffer-file-name (buffer-base-buffer)))
          id)))))

(defun synthmacs/test-function ()
"Uh, does this show up?"
(interactive)
(+ 2 3))

  (defun synthmacs/org-add-ids-to-headlines-in-file ()
    "Add CUSTOM_ID properties to all headlines in the current file.
   Only do so for those which do not already have one. Only adds ids
   if the `auto-id' option is set to `t' in the file somewhere. ie,
   ,#+OPTIONS: auto-id:t"
    (interactive)
    (save-excursion
      (widen)
      (goto-char (point-min))
      (when (re-search-forward "^#\\+OPTIONS:.*auto-id:t" (point-max) t)
        (org-map-entries (lambda () (synthmacs/org-custom-id-get (point) 'create))))))
  :config
  (require 'org-id)
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
  )
#+end_src

** Tangling this file
:PROPERTIES:
:CUSTOM_ID: h:16B948EA-5375-44DE-ACD7-3664D4A9CE5F
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-org.el
:END:
Taken from https://github.com/KaratasFurkan/.emacs.d

#+begin_src emacs-lisp
  (use-package org
    :config
    (require 's)
    (defun synthmacs/async-process (command &optional name filter)
      "Start an async process by running the COMMAND string with bash. Return the
  process object for it.

  NAME is name for the process. Default is \"async-process\".

  FILTER is function that runs after the process is finished, its args should be
  \"(process output)\". Default is just messages the output."
      (make-process
       :command `("bash" "-c" ,command)
       :name (if name name
	       "async-process")
       :filter (if filter filter
		 (lambda (process output) (message (s-trim output))))))


    (defun synthmacs/tangle-config ()
      "Export code blocks from the literate config file
  asynchronously."
      (interactive)
      (let ((command (if (file-directory-p "/opt/homebrew/opt/emacs-plus@29/Emacs.app")
			 "/opt/homebrew/opt/emacs-plus@29/Emacs.app/Contents/MacOS/Emacs %s --batch --eval '(org-babel-tangle nil \"%s\")'"
		       )))
	;; prevent emacs from killing until tangle-process finished
	;; (add-to-list 'kill-emacs-query-functions
	;;              (lambda ()
	;;                (or (not (process-live-p (get-process "tangle-process")))
	;;                    (y-or-n-p "\"fk/tangle-config\" is running; kill it? "))))
	;; tangle config asynchronously
	(synthmacs/async-process
	 (format command
		 (expand-file-name "synthmacs.org" user-emacs-directory)
		 (expand-file-name "init.el" user-emacs-directory))
	 "tangle-process")
	)

      )
    )
#+end_src

* Provide modules
:PROPERTIES:
:CUSTOM_ID: h:754DFB20-B2AB-4750-9BDA-D24E8014C504
:END:

** synthmacs-org
:PROPERTIES:
:CUSTOM_ID: h:24A7FE78-E6B9-4C81-A2BE-6A049A8209AD
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-org.el
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-org)
;;; synthmacs-org.el ends here
#+end_src

** synthmacs-straight
:PROPERTIES:
:CUSTOM_ID: h:24A7FE78-E6B9-4C81-A2BE-6A049A8209AD
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-straight.el
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-straight)
;;; synthmacs-straight.el ends here
#+end_src

* COMMENT Local variables
:PROPERTIES:
:CUSTOM_ID: h:8CE072CD-CA85-4E53-B672-E0AC74E4E4EC
:END:
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(progn (synthmacs/org-add-ids-to-headlines-in-file) (synthmacs/tangle-config))) nil t)
# End:
