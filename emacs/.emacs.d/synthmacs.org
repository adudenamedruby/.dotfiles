#+TITLE: SYNTHMACS Config
#+AUTHOR: roux g. buciu
#+DESCRIPTION: adudenamedruby's emacs configuration
#+STARTUP: showeverything
#+OPTIONS: auto-id:t
#+OPTIONS: broken-links:t
#+OPTIONS: tags:nil
#+OPTIONS: toc:4
#+PROPERTY: header-args:emacs-lisp :comments link

* TABLE OF CONTENTS :toc:
:PROPERTIES:
:CUSTOM_ID: h:D9FC65D1-4FFB-4344-B8A7-9FAA9D1AC040
:END:

- [[#introduction][Introduction]]
  - [[#what-is-a-synthmacs][What is a ~Synthmacs~?]]
  - [[#about-synthmacsorg][About ~synthmacs.org~]]
  - [[#why-vanilla-emacs][Why vanilla Emacs?]]
  - [[#why-a-literate-config][Why a literate config?]]
  - [[#synthmacs-modules][Synthmacs "modules"]]
  - [[#structure-of-this-configuration][Structure of this configuration]]
- [[#startup-optimization][Startup Optimization]]
  - [[#early-initel][early-init.el]]
  - [[#initel][init.el]]
  - [[#initel-load-modules][init.el load modules]]
- [[#package-management][Package Management]]
  - [[#bootstrap-straight-and-straight-use-package][Bootstrap Straight and straight-use-package]]
- [[#core-emacs-setup][Core Emacs Setup]]
  - [[#emacs-setup][Emacs Setup]]
  - [[#custom-variables][Custom variables]]
  - [[#fonts][Fonts]]
  - [[#free-functions][Free Functions]]
  - [[#garbage-collector-magic-hack][Garbage collector magic hack]]
  - [[#no-littering][no-littering]]
  - [[#auto-pair-paranthesis][Auto-pair paranthesis]]
  - [[#xref][xref]]
- [[#keybindings-general--evil-mode][Keybindings: General & EVIL mode]]
  - [[#general][General]]
  - [[#general-keybindings][General keybindings]]
  - [[#hydra][Hydra]]
  - [[#evil-mode][EVIL mode]]
- [[#org-mode][Org Mode]]
  - [[#org-mode-1][org mode]]
  - [[#enabling-the-table-of-contents][Enabling the Table of Contents]]
  - [[#org-reverse-datetree][org reverse datetree]]
  - [[#org-superstar][org-superstar]]
  - [[#cycle-only-one-heading][Cycle only one heading]]
  - [[#using-org-id-in-links][Using org-id in links]]
  - [[#org-babel][org-babel]]
  - [[#tangling-this-file][Tangling this file]]
  - [[#org-tree-slide][org-tree-slide]]
  - [[#evil-org-mode][evil-org-mode]]
  - [[#org-appear][org-appear]]
  - [[#org-roam][org-roam]]
  - [[#obsidian][Obsidian]]
- [[#ui][UI]]
  - [[#icons][Icons]]
  - [[#themes][Themes]]
  - [[#navigation][Navigation]]
  - [[#modeline][Modeline]]
  - [[#dashboard][Dashboard]]
  - [[#which-key][which-key]]
  - [[#rainbow-delimiters][rainbow-delimiters]]
  - [[#popup-management][Popup management]]
  - [[#centered-cursor-mode][centered-cursor-mode]]
  - [[#highlight-indent-guides][highlight-indent-guides]]
  - [[#line-numbers][Line numbers]]
  - [[#fill-column--modeline-column-info][Fill column & modeline column info]]
- [[#completion-framework][Completion framework]]
  - [[#vertico][Vertico]]
  - [[#consult][Consult]]
  - [[#marginalia][Marginalia]]
  - [[#embark][Embark]]
  - [[#embark-consult][embark-consult]]
  - [[#wgrep][wgrep]]
  - [[#corfu][Corfu]]
- [[#useful-tools][Useful Tools]]
  - [[#dirvish][Dirvish]]
  - [[#gitvcs-integration][Git/VCS Integration]]
  - [[#helpful][Helpful]]
  - [[#projectile][Projectile]]
  - [[#rg][Rg]]
  - [[#undo-fu][undo-fu]]
  - [[#ws-butler][WS-Butler]]
  - [[#olivetti-mode][Olivetti Mode]]
  - [[#vterm][Vterm]]
  - [[#transient][Transient]]
- [[#programming-environment][Programming Environment]]
  - [[#lsp][LSP]]
  - [[#dap][DAP]]
  - [[#flycheck][Flycheck]]
  - [[#imenu][iMenu]]
  - [[#snippets][Snippets]]
  - [[#treesitter][Treesitter]]
- [[#programming-languages][Programming Languages]]
  - [[#haskell][Haskell]]
  - [[#html][HTML]]
  - [[#lisps][LISPs]]
  - [[#markdown][Markdown]]
  - [[#rust][Rust]]
  - [[#swift][Swift]]
  - [[#yaml][YAML]]
- [[#provide-modules][Provide modules]]
  - [[#early-initel-1][early-init.el]]
  - [[#initel-1][init.el]]
  - [[#synthmacs-core][synthmacs-core]]
  - [[#synthmacs-package-management][synthmacs-package-management]]
  - [[#synthmacs-general-evil][synthmacs-general-evil]]
  - [[#synthmacs-org][synthmacs-org]]
  - [[#synthmacs-ui][synthmacs-ui]]
  - [[#synthmacs-completion-framework][synthmacs-completion-framework]]
  - [[#synthmacs-tools][synthmacs-tools]]
  - [[#synthmacs-programming][synthmacs-programming]]
  - [[#programming-languages-1][Programming Languages]]

* Introduction
:PROPERTIES:
:CUSTOM_ID: h:49282F28-9E13-48D2-A565-1605B1CC57B8
:END:

** What is a ~Synthmacs~?
:PROPERTIES:
:CUSTOM_ID: h:945224F8-D3DC-44B3-BC29-FB815F13E971
:END:
~Synthmacs~ is what I've decided to call my Emacs config. It's a portmanteau of Sythesized and Emacs. But it's also inspired by "Synthwave" and "Synthesizers". Anyway, it's not a big deal, and you shouldn't worry about it!!

** About ~synthmacs.org~
:PROPERTIES:
:CUSTOM_ID: h:D9ED3ADB-810A-4A1C-A1D3-5397874AFAC7
:END:
This file (~synthmacs.org~) is the literate Synthmacs configuration. Every time I save the file, the code blocks get tangled, asynchronously. By default, they get tangled (in sequence) to ~./init.el~. However, some blocks override this default (e.g. see the section [[*early-init.el][early-init.el]]), meaning that I end up with what are, essentially, modules in which things are organized in some way that makes sense to me. More on that [[#h:C522D670-C206-44F7-96CE-17D01E578287][here]].

** Why vanilla Emacs?
:PROPERTIES:
:CUSTOM_ID: h:40A8BDAE-F8E3-4DB3-AC8C-7E5067B7EE4D
:END:
My introduction to Emacs was... Vim? I love Vim. Or rather, I love language for text manipulation that comprise Vim's composable motions and commands. But what I really wanted was to use those keybindings throughout many of the things I'm doing, and not just in Vim. So I switched over to Vimium in my browser. I started using Xvim in Xcode. Basically wherever I could have Vim keybindings, I did. But I also wanted to be able to customize certain behaviours of my editor to the extent that just wasn't possible with Vim, and I knew that Emacs was the thing that would let me do that. Minor problem: I didn't know anything about Emacs, and I didn't know anything about E-Lisp, and I didn't have the time to set everything up myself (knowing how big that entry learning curve is from having learned to use Vim). So, I tried a distribution of Emacs, and ended up using [[https://www.spacemacs.org/][Spacemacs]] for several years.

I was mostly happy.

Three things changed:
1. I started to learn LISP
2. That made me want to understand Emacs a little more
3. Spacemacs is really great... but the one thing that always bothered me was that the way it's put together makes it very different to how a normal config looks. So often, changing some things by looking at other's people's configs was.... challenging

Over the next few weeks, I started the process of experimenting with my own config. I took a lot of inspiration from a ton of people, shamelessly stealing ideas to make my config better... or just make Emacs have the behaviour I wanted. I've tried to credit code sources where possible. However, in my haste from earlier efforts, I don't have credits for everything. For anything that's not original, here's a non-exhaustive list of some of the main places I was inspired by:
- [[https://github.com/abougouffa/minemacs/blob/ab9084efe27191fd0ab5f94eee5502766fce16c1/modules/me-lisp.el#L43][abougouffa]]
- [[https://github.com/daedreth/UncleDavesEmacs/blob/master/config.org][daedreth]]
- [[https://writequit.org/org/#2daddf2c-228b-40ae-90b1-cd0b8c39f061][dakrone]]
- [[https://gitlab.com/dwt1/dotfiles/-/blob/2a687641af1fa4e31e080960e0b6a5f3d21d759d/.emacs.d.gnu/config.org][DistroTube Config]] & [[https://gitlab.com/dwt1/dotfiles/-/blob/1e82fff55a15bbff605789cbb412ea43efb924f0/.config/doom/config.org][Distro Tube Doom Config]]
- [[https://github.com/howardabrams/dot-files][HowardAbrams]]
- [[https://github.com/jimeh/.emacs.d/tree/master/core][jimeh]]
- [[https://github.com/jinnovation/.emacs.d][jinnovation]]
- [[https://www.lucacambiaghi.com/vanilla-emacs/readme.html#h:4C37CFFC-D045-47B4-BFDC-801977247199][Luca Cambiaghi]]
- [[https://github.com/meatcar/emacs.d/blob/377c5abc4d45927d5badbf5f32debc9162a465fa/config.org#L1320][meatcar]]
- [[https://protesilaos.com/emacs/dotemacs][Prot]]
- [[https://github.com/renzmann/.emacs.d/blob/main/README.org][renzmann]]
- [[https://github.com/r0man/.emacs.d/blob/b344a9bed55421e2288a1c135ccb9cf9b7591de4/init.el.org#L2019][r0man]]
- [[https://robbmann.io/emacsd/][robbmann]]
- [[https://config.daviwil.com/emacs][System Crafters]]
- [[https://github.com/vale981/dotfiles/blob/7d7971b91356b271dd08afbaf9979fba33d471ed/dots/emacs/emacs.org#L1020][vale981]]
  
It is a long journey, and I still have a long way to go, but I am glad I started it.

** Why a literate config?
:PROPERTIES:
:CUSTOM_ID: h:B5231F9E-07D2-4738-97FD-78EC648B3F3D
:END:
Having your configuration in ~org-mode~ has some benefits and some drawbacks. Further, it adds a layer of abstraction between me and my ~init.el~ file. So, is it worth it?

The main, and biggest, drawback is that it can happen that the ~org-mode~ file has a mistake and tangles an incorrect ~*.el~ file. In that case you can't use your nice bindings but you are thrown in barebones Emacs and you have to =C-x C-f= your way to the ~init.el~ and run ~M-x check-parens~.

You can also run ~org-babel-tangle-jump-to-org~ from the tangled file if you add:
#+begin_src org
,#+PROPERTY: header-args:emacs-lisp :comments link
#+end_src

Another drawback is that a big configuration can be slow to tangle and tangling on save can block ~emacs~. The solution for this is to do the tangling asynchronously. See [[#h:16B948EA-5375-44DE-ACD7-3664D4A9CE5F][this section]] for how that's accomplished.

Let's consider some of the benefits:
- People can read this file on Github pretty easily. It's how I learned a lot about Emacs, and I think the trade is worthwhile to give back.
- I can comfortably document my configuration (and not from within comments), include links, ~sh~ code blocks, etc.
- I can organize my configuration blocks in sections, easily disable some headings with ~COMMENT~ if I so need, as well as prevent some block from tangling if I have ~:tangle no~ added to the source block

** Synthmacs "modules"
:PROPERTIES:
:CUSTOM_ID: h:C522D670-C206-44F7-96CE-17D01E578287
:END:
I tangle this file with the function ~synthmacs/tangle-config~, you can read source code in [[#h:16B948EA-5375-44DE-ACD7-3664D4A9CE5F][this]] section. Every time I save the ~synthmacs.org~ file, it is tangled to multiple ~.el~ files.

I achieve that by means of this file's "local variables", which I put at the end of the ~synthmacs.org~ file:
#+begin_src org
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(progn (synthmacs/org-add-ids-to-headlines-in-file) (synthmacs/tangle-config))) nil t)
# End:
#+end_src

To design modules, I look at blocks in my config that I might want to toggle on and off. I assign org properties to each heading. These are what determine which ~.el~ file they will be written to.

For example the header of the section concerning ~lsp-mode~ might have the following properties:
#+begin_src org
:PROPERTIES:
:CUSTOM_ID: h:6BC08822-D2B3-4BE9-9EBE-C42F89F0E688
:header-args: :emacs-lisp :tangle ./synthmacs/synthmacs-lsp.el
:END:
#+end_src

All subheadings under it will "inherit" those properties and will be tangled to the same file. We also need to write some ~emacs-lisp~ at the end of the tanged file to "provide" those modules. [[#h:24A7FE78-E6B9-4C81-A2BE-6A049A8209AD][Here]] an example of one of these "footer" headers.

I then have a lean ~init.el~ (written in [[#h:7B22A4F3-49A1-4848-A185-B4EEA060EECE][this]] section) which I use to control which modules I want to use. Why turn off modules? Maybe something's acting up? Maybe I'm setting something up brand new and, while I'm still figuring things out, I want it enabled when I'm working on my config, but I don't want it enabled when I'm actually using Emacs for doing actual work.

** Structure of this configuration
:PROPERTIES:
:CUSTOM_ID: h:0FFBBB41-3AD1-4C09-A15D-FA9A03B6C2CB
:END:
In general, the config tries to manintain a pretty cohesive modularization while observing a few guidelines. In no particular order, these are:
- Things should be loosely organized according to function where possible
- Keybindings should try to stay, as closely as possible, to the various modules they belong to. Thus, if I disable a module, its keys aren't still listed in which-key
- As much as possible, functions should not be free-floating, but should be part of the init or general module of whatever thing they're most related to 

With that out of the way, the general outline of this file aims to be:
- The [[#h:49282F28-9E13-48D2-A565-1605B1CC57B8][first section]] is some information about ~synthmacs.org~ and other comments for my future self or anyone else who happens to be reading this. Hello!
- In the [[#h:EC68944C-F745-45D8-9905-420E0813DBAF][second section]], we have some optimization to startup time. Most of these things are from other people, because I am not as wise in the Emacs ways.
- In the [[#h:F8B6E0EE-7BBD-4F7F-B31E-44DE7B43AA39][third section]], we setup our package managers, ~straight~ and  ~use-package~
- In the [[#h:3D38D8F0-1B85-4265-9941-77A3A2FA235B][fourth section]], we configure ~emacs~ with some better defaults and extend some some of its core features (e.g. ~help-mode~)
- In the [[#h:D7FB11B6-67B4-4275-B0CC-E218C65C411E][fifth section]], we set up ~general~, which we use to manage our keybindings and lazy loading of packages. Afterwards we configure ~evil~, for modal editing.
- In the [[#h:B1DBE90D-B6C9-4BD4-B15B-185FE238D236][sixth section]], we define some standards for the invaluable ~org-mode~ with several extensions
- In the [[#h:EA84335B-2A51-4B4A-9392-F116289EDB10][seventh section]], we configure UI related things: themes, icons, window management, navigation, etc
- In the [[#h:FB3661CB-A573-40B6-B331-449D77DBD199][eighth section]], we configure useful our completion frameworks.
- In the [[#h:B57C03F6-2111-489A-9303-B1A06C95EFF5][ninth section]], we configure useful Emacs tools that aren't big enough to fit in their own header, but don't necessarily fit elsewhere either: git integration with ~magit~, terminal setup, projectile, etc.
- In the [[#h:2E967F87-8304-4262-B5BF-3286ACA7211B][tenth section]], we set up the tools for programming
- In the [[#h:732BA080-834D-49E0-967E-0D37CE1C6BA0][eleventh section]], we then configure different languages I use for programming to use those tools
- The [[#h:754DFB20-B2AB-4750-9BDA-D24E8014C504][twelfth, and final, section]] will be providing the ~provide~ statement for each module without which things would fall apart.

* Startup Optimization
:PROPERTIES:
:CUSTOM_ID: h:EC68944C-F745-45D8-9905-420E0813DBAF
:END:

** early-init.el
:PROPERTIES:
:CUSTOM_ID: h:7DBC58C1-3944-437C-87F9-95C9202BD34E
:header-args: :emacs-lisp :tangle early-init.el
:END:

*** Header
:PROPERTIES:
:CUSTOM_ID: h:CDE376DB-BA7E-459F-B1BD-F423C530C414
:END:
#+begin_src emacs-lisp
;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*-
;; NOTE: early-init.el is now generated from synthmacs.org.  Please edit that file instead
#+end_src

*** Disable package/UI at first
:PROPERTIES:
:CUSTOM_ID: h:54977927-B3A4-4502-992F-F7BA85FD5AB1
:END:

#+BEGIN_SRC emacs-lisp
;; In Emacs 27+, package initialization occurs before `user-init-file' is
;; loaded, but after `early-init-file'. Doom handles package initialization, so
;; we must prevent Emacs from doing it early!
(setq package-enable-at-startup nil)

;; Do not allow loading from the package cache (same reason).
(setq package-quickstart nil)

;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; Resizing the Emacs frame can be a terribly expensive part of changing the
;; font. By inhibiting this, we easily halve startup times with fonts that are
;; larger than the system default.
(setq frame-inhibit-implied-resize t)

;; Disable GUI elements
(setq menu-bar-mode -1)
(setq tool-bar-mode -1)
(when (fboundp 'set-scroll-bar-mode)
  (set-scroll-bar-mode nil))
(setq inhibit-splash-screen t)
(setq use-file-dialog nil)


;; Native-Comp
(setq native-comp-speed 2
      comp-speed 2)
(setq native-comp-async-report-warnings-errors nil
      comp-async-report-warnings-errors nil)
(setq native-comp-async-query-on-exit t
      comp-async-query-on-exit t)
#+END_SRC

*** Reduce garbage collection
:PROPERTIES:
:CUSTOM_ID: h:7A7EE86D-D60B-49F0-8738-05D88690060D
:END:
Following DOOM, we max the garbage collection threshold on startup, and reset it to the original value after.

#+BEGIN_SRC emacs-lisp
;; max memory available for gc on startup
(defvar me/gc-cons-threshold 16777216)
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold me/gc-cons-threshold
                  gc-cons-percentage 0.1)))

;; max memory available for gc when opening minibuffer
(defun synthmacs/defer-garbage-collection-h ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun synthmacs/restore-garbage-collection-h ()
  ;; Defer it so that commands launched immediately after will enjoy the
  ;; benefits.
  (run-at-time
   1 nil (lambda () (setq gc-cons-threshold synthmacs/gc-cons-threshold))))

(add-hook 'minibuffer-setup-hook #'synthmacs/defer-garbage-collection-h)
(add-hook 'minibuffer-exit-hook #'synthmacs/restore-garbage-collection-h)
(setq garbage-collection-messages t)
#+END_SRC

*** Temporarily avoid special handling of files
:PROPERTIES:
:CUSTOM_ID: h:7DCD97B2-96A6-436B-AC41-F507CB842530
:END:
`file-name-handler-alist' is consulted on every `require', `load' and various path/io functions. You get a minor speed up by nooping this. However, this may cause problems on builds of Emacs where its site lisp files aren't byte-compiled and we're forced to load the *.el.gz files (e.g. on Alpine)

#+BEGIN_SRC emacs-lisp
(unless (daemonp)
  (defvar doom--initial-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
  ;; Restore `file-name-handler-alist' later, because it is needed for handling
  ;; encrypted or compressed files, among other things.
  (defun doom-reset-file-handler-alist-h ()
    ;; Re-add rather than `setq', because changes to `file-name-handler-alist'
    ;; since startup ought to be preserved.
    (dolist (handler file-name-handler-alist)
      (add-to-list 'doom--initial-file-name-handler-alist handler))
    (setq file-name-handler-alist doom--initial-file-name-handler-alist))
  (add-hook 'emacs-startup-hook #'doom-reset-file-handler-alist-h)
  )

#+END_SRC

** init.el
:PROPERTIES:
:CUSTOM_ID: h:E6162DC2-7E1C-4843-8448-FF104A444B40
:header-args: :emacs-lisp :tangle init.el
:END:

*** Header
:PROPERTIES:
:CUSTOM_ID: h:470961E9-E775-4F50-861D-CC1A2616B4A1
:END:
#+BEGIN_SRC emacs-lisp
  ;;; init.el --- Personal configuration file -*- lexical-binding: t; no-byte-compile: t; -*-
;; NOTE: init.el is now generated from synthmacs.org.  Please edit that file instead
#+END_SRC

*** Improve I/O
:PROPERTIES:
:CUSTOM_ID: h:3AAFD5BF-28E5-4AA0-9911-E4430F4B4506
:END:
Optimizations for improving I/O performance. Increase max bytes read from a sub-process in a single op (Emacs 27+)

#+BEGIN_SRC emacs-lisp
(setq read-process-output-max (* 1024 1024)) ;; 1mb

;; Ensure Synthmacs is running out of this file's directory
(setq user-emacs-directory (file-truename (file-name-directory load-file-name)))

#+END_SRC

** init.el load modules
:PROPERTIES:
:CUSTOM_ID: h:7B22A4F3-49A1-4848-A185-B4EEA060EECE
:header-args: :emacs-lisp :tangle init.el
:END:
#+begin_src emacs-lisp
(message "SynthMacs is powering up, please be patient...")

;; (add-to-list 'load-path "~/.emacs.d/synthmacs/")
(add-to-list 'load-path (expand-file-name "synthmacs" user-emacs-directory))

(let ((file-name-handler-alist nil)
      (gc-cons-threshold 100000000))

  (require 'synthmacs-core)
  (require 'synthmacs-package-management)
  (require 'synthmacs-general-evil)
  (require 'synthmacs-ui)
  (require 'synthmacs-org)
  (require 'synthmacs-completion-framework)
  (require 'synthmacs-tools)
  (require 'synthmacs-programming)
  (require 'synthmacs-lang-clojure)
  (require 'synthmacs-lang-haskell)
  (require 'synthmacs-lang-html)
  (require 'synthmacs-lang-lisp)
  (require 'synthmacs-lang-clisp)
  (require 'synthmacs-lang-elisp)
  (require 'synthmacs-lang-markdown)
  (require 'synthmacs-lang-rust)
  (require 'synthmacs-lang-swift)
  (require 'synthmacs-lang-yaml)
  )
#+end_src

* Package Management
:PROPERTIES:
:CUSTOM_ID: h:F8B6E0EE-7BBD-4F7F-B31E-44DE7B43AA39
:END:

** Bootstrap Straight and straight-use-package
:PROPERTIES:
:CUSTOM_ID: h:686F7A63-013E-48ED-AC56-DF39BD398E20
:header-args: :emacs-lisp :tangle ./synthmacs/synthmacs-package-management.el :mkdirp yes
:END:

[[https://github.com/raxod502/straight.el][straight.el]] is used to download packages for us from all over the web. It stores them all in their respective git folders in ~.emacs.d/straight~, which makes debugging, and contributing fixes back upstream as easy as possible.

First, we configure some settings for ~staight.el~ to better integrate with ~use-package~. [[https://github.com/jwiegley/use-package][use-package]] is a nice and consistent way to declare packages and their respective configs.

Some rules/conventions:

- Prefer ~:init~ to ~:custom~. Prefer multiple ~setq~ expressions to one.
- Default to ~:defer t~, use ~:demand~ to force loading
- When packages do not require installation e.g. ~dired~, we need ~:straight (:type built-in)~ 
- If you specify ~:commands~, they will be autoloaded and the package will be loaded when the commands are first executed
  + If you use ~:general~ and bind commands to keys it will automatically load the package on first invokation

*** Initial setup
:PROPERTIES:
:CUSTOM_ID: h:DC526D93-55D3-4D6E-88A1-2696A7753D3E
:END:
First, setting some defaults for Straight
#+BEGIN_SRC emacs-lisp
(setq straight-repository-branch "develop")
(setq straight-use-package-by-default t)
;; (setq straight-recipes-gnu-elpa-use-mirror t)
;; (setq straight-check-for-modifications '(check-on-save find-when-checking))
;;(setq straight-check-for-modifications nil)
(setq use-package-always-ensure t)
(setq use-package-always-defer t)
#+END_SRC

*** Debug
:PROPERTIES:
:CUSTOM_ID: h:3F452C31-8C7C-4F5C-AE0C-66923780EE16
:END:
We want to enable debugging whenever we encounter an error.
#+begin_src emacs-lisp
(setq debug-on-error t)
#+end_src

*** Fetching ~straight.el~
:PROPERTIES:
:CUSTOM_ID: h:5F148603-9BBF-4A65-A09A-6A616B8DAAFC
:END:
#+BEGIN_SRC emacs-lisp
(setq straight-repository-branch "develop")
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

*** Package cleanup
:PROPERTIES:
:CUSTOM_ID: h:B5393607-D2E9-448C-9A72-3027EE6D1101
:END:
Let’s load an optional package which gives us some convenience functions, like ~straight-x-clean-unused-repo~ to remove any packages we don’t have configured anymore.

#+begin_src emacs-lisp
(require 'straight-x)
#+end_src

*** Install ~use-package~
:PROPERTIES:
:CUSTOM_ID: h:B461CF7F-5DD9-48E7-8DC7-EECDCBEF418D
:END:
#+BEGIN_SRC emacs-lisp
;; Install use-package
(straight-use-package 'use-package)
#+END_SRC

* Core Emacs Setup
:PROPERTIES:
:CUSTOM_ID: h:3D38D8F0-1B85-4265-9941-77A3A2FA235B
:header-args: :emacs-lisp :tangle ./synthmacs/synthmacs-core.el :mkdirp yes
:END:

** Emacs Setup
:PROPERTIES:
:CUSTOM_ID: h:51921EE3-AFC6-44A1-A700-316815CBFF49
:END:
Some general things to set up:

#+begin_src emacs-lisp
(use-package emacs
  :init
  (setq inhibit-startup-message t
	inhibit-startup-screen t
        initial-scratch-message nil
        sentence-end-double-space nil
        ring-bell-function 'ignore
        frame-resize-pixelwise t)

  ;; less noise when compiling elisp
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
  (setq native-comp-async-report-warnings-errors nil)
  (setq load-prefer-newer t)

  ;; write over selected text on input... like all modern editors do
  ;;(delete-selection-mode t)
  )
#+end_src

*** User setup
:PROPERTIES:
:CUSTOM_ID: h:C6B442E5-589B-43CA-B3F5-FE0A53CDBA66
:END:
Who is using Synthmacs?
#+begin_src emacs-lisp
(use-package emacs
  :init
  (setq user-full-name "roux g. buciu"
        user-mail-address "roux@fringe.foundation"))
#+end_src

*** "Yes or no" prompts
:PROPERTIES:
:CUSTOM_ID: h:1FFE6051-E84B-438A-9FA9-BB6A6EFBE77F
:END:
They are annoying and it's much more idiomatic to type y or n for these types of things anyway. So let's make sure Synthmacs confornms to this.

#+begin_src emacs-lisp
(use-package emacs
  :init
  (defalias 'yes-or-no-p 'y-or-n-p))
#+end_src

*** UTF-8 file encoding
:PROPERTIES:
:CUSTOM_ID: h:6E819D29-764F-4F26-B5CB-20766CE6579D
:END:
Sometimes file encoding is really messed up, so we make sure to default to UTF-8 for everything!

#+begin_src emacs-lisp
(use-package emacs
  :init
  (set-charset-priority 'unicode)
  (setq locale-coding-system 'utf-8
        coding-system-for-read 'utf-8
        coding-system-for-write 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix)))
#+end_src

*** Recent files
:PROPERTIES:
:CUSTOM_ID: h:9E1EAAC3-9A7D-48C6-95D3-B98A8D8C1861
:END:
Recent files. Enable them for nice navigation from the dashboard, ~consult-recent-files~, and so on.
#+begin_src emacs-lisp
(use-package emacs
  :init
  (recentf-mode t)
  (setq recentf-exclude `(,(expand-file-name "straight/build/" user-emacs-directory)
                          ,(expand-file-name "eln-cache/" user-emacs-directory)
                          ,(expand-file-name "etc/" user-emacs-directory)
                          ,(expand-file-name "var/" user-emacs-directory)))
  (setq recentf-max-menu-items 10)
  (setq recentf-max-saved-items 10)
  )
#+end_src

*** ESC key!
:PROPERTIES:
:CUSTOM_ID: h:2A391835-2D45-4E8E-87C1-823E3B5402A8
:END:
The ESC key should not be a modifier, but should behave as per its namesake.
#+begin_src emacs-lisp
(use-package emacs
  :init
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit))
#+end_src

*** Custom file
:PROPERTIES:
:CUSTOM_ID: h:7569FED9-DB11-4C0A-972A-9AD1AC3E1667
:END:
Don't persist a custom file, this bites me more than it helps, honestly.

#+begin_src emacs-lisp
(use-package emacs
  :init
  (setq custom-file (make-temp-file "")) ; use a temp file as a placeholder
  (setq custom-safe-themes t)            ; mark all themes as safe, since we can't persist now
  (setq enable-local-variables :all)     ; fix =defvar= warnings
  )
#+end_src

*** Autosaves
:PROPERTIES:
:CUSTOM_ID: h:DD2D8AFF-4FB3-4157-8A5E-F8A71509C869
:END:
Autosaving is great, but stop littering the file system with backup files all over the place. Maybe I'll really want this in the future. For now, it's a hard no.
#+begin_src emacs-lisp
(use-package emacs
  :init
  (setq make-backup-files nil
        auto-save-default t
        create-lockfiles nil))
#+end_src

*** Symlinks
:PROPERTIES:
:CUSTOM_ID: h:D92031FF-2EE5-4894-B10E-7E3B36E5876D
:END:
I work with symlinks a fair bit of the time. Let's make sure that when I am working with them, I'm going to the actual file, because, really, that's what I want to edit.

#+begin_src emacs-lisp
(use-package emacs
  :init
  ;; follow symlinks 
  (setq vc-follow-symlinks t))
#+end_src

*** Window chrome
:PROPERTIES:
:CUSTOM_ID: h:B186EAC9-0310-4C0D-93A4-3F3B9D9C96A8
:END:
Hide it if we're in a window. I go back and forth on hiding the menu. I like it being there, but I've never used it, so why is it there?

#+begin_src emacs-lisp
(use-package emacs
  :init
  (when (window-system)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (toggle-scroll-bar -1)
    (set-fringe-mode 10)
    ;; (menu-bar-mode -1)
    )
  )
#+end_src

*** Scrolling behaviours
:PROPERTIES:
:CUSTOM_ID: h:7B6C9DD0-B689-471C-904B-299C56F20AC7
:END:
#+begin_src emacs-lisp
(use-package emacs
  :init
  ;; Set scroll margin, but emulate vim scroll behaviour
  (setq scroll-conservatively 101
	scroll-margin 5
	scroll-preserve-screen-position 't)

  ;; Enables having the line the cursor is on be highlighted
  (global-hl-line-mode 1)

  ;; enable winner mode globally for undo/redo window layout changes
  (winner-mode t)

  (show-paren-mode t)
  )

#+end_src

*** Other
:PROPERTIES:
:CUSTOM_ID: h:5C66A615-DF0F-43EC-8446-28ADEBF553F8
:END:
#+begin_src emacs-lisp
(use-package emacs
  :init
  ;; use common convention for indentation by default
  ;;(setq-default indent-tabs-mode t)
  ;;(setq-default tab-width 2)

  ;; Enable indentation+completion using the TAB key.
  ;; Completion is often bound to M-TAB.
  (setq tab-always-indent 'complete)

  (global-prettify-symbols-mode 1)

  ;; ------------------ Indent Behaviours ---------------------
  ;; Electric indent mode messes up with a bunch of languages indenting.
  ;; So disable it.
  (setq electric-indent-inhibit t)

  (global-visual-line-mode t)

  )
#+end_src

** Custom variables
:PROPERTIES:
:CUSTOM_ID: h:6BB5DBD1-2222-429E-8227-7F420E786E77
:END:
#+begin_src emacs-lisp
;; reopening the last killed buffer
(use-package emacs
  :init
  (defcustom synthmacs/default-font-family "FiraCode Nerd Font" 
    "Default font family"
    :type 'string
    :group 'synthmacs)

  (defcustom synthmacs/variable-pitch-font-family "Sans Serif"
    "Variable pitch font family"
    :type 'string
    :group 'synthmacs)
  
  (defcustom synthmacs--killed-buffer-list nil
    "List of recently killed buffers.")
  )
#+end_src

** Fonts
:PROPERTIES:
:CUSTOM_ID: h:07E35458-939C-4B52-B065-778D5F4D9F52
:END:
#+begin_src emacs-lisp
(use-package emacs
  :init
  ;; Main typeface
  (set-face-attribute 'default nil :font synthmacs/default-font-family :height 140)
  ;; Set the fixed pitch face (monospace)
  (set-face-attribute 'fixed-pitch nil :font synthmacs/default-font-family)
  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font synthmacs/variable-pitch-font-family)
  )
#+end_src

** Free Functions
:PROPERTIES:
:CUSTOM_ID: h:7C608EDA-7A99-49BB-BBCD-65E4CFCA0ED0
:END:

*** Buffers
:PROPERTIES:
:CUSTOM_ID: h:12AFFF8B-9081-4088-BA95-996206DA01AA
:END:
#+begin_src emacs-lisp
(defun synthmacs/add-buffer-to-killed-list ()
  "Add killed buffer to list for undo functionality.
If buffer is associated with a file name, add that file
to the `killed-buffer-list` when killing the buffer."
  (when buffer-file-name
    (push buffer-file-name synthmacs--killed-buffer-list)))

(add-hook 'kill-buffer-hook #'synthmacs/add-buffer-to-killed-list)

(defun synthmacs/alternate-buffer (&optional window)
  (interactive)
  (cl-destructuring-bind (buf start pos)
      (if (bound-and-true-p nil)
	  (let ((buffer-list (persp-buffer-list))
		(my-buffer (window-buffer window)))
	    (seq-find (lambda (it)
			(and (not (eq (car it) my-buffer))
			     (member (car it) buffer-list)))
		      (window-prev-buffers)
		      (list nil nil nil)))
	(or (cl-find (window-buffer window) (window-prev-buffers)
		     :key #'car :test-not #'eq)
	    (list (other-buffer) nil nil)))
    (if (not buf)
	(message "Last buffer not found.")
      (set-window-buffer-start-and-point window buf start pos))))

(defun synthmacs/reopen-killed-buffer ()
  "Reopen the most recently killed file buffer, if one exists."
  (interactive)
  (when synthmacs--killed-buffer-list
    (find-file (pop synthmacs--killed-buffer-list))))

;; (defun synthmacs/delete-current-buffer-file ()
;;   "Removes the file connected to the current buffer, and kills the buffer."
;;   (interactive)
;;   (let ((filename (buffer-file-name))
;; 	(buffer (current-buffer))
;; 	(name (buffer-name)))
;;     (if (not (and filename (file-exists-p filename)))
;; 	(ido-kill-buffer)
;;       (if (yes-or-no-p (format "Are you sure you want to delet this file: '%s'?" name))
;; 	  (progn
;; 	    (delete-file filename t)
;; 	    (kill-buffer buffer)
;; 	    (when (and (synthmacs/packaged-used-p 'projectile)
;; 		       (projectile-project-p))
;; 	      (call-interactively #'projectile-invalidate-cache))
;; 	    (message "File deleted: '%s'" filename))
;; 	(message "Cancelled file deletion")))))
#+end_src

*** Copying file paths
:PROPERTIES:
:CUSTOM_ID: h:B0981CAF-B4C2-499E-A218-788F1491D0A3
:END:

#+begin_src emacs-lisp
(defun synthmacs//directory-path ()
  "Retrieve the directory path of the current buffer.

If the buffer is not visiting a file, use the `list-buffers-directory' variable
as a fallback to display the directory, useful in buffers like the ones created
by `magit' and `dired'.

Returns:
  - A string containing the directory path in case of success.
  - `nil' in case the current buffer does not have a directory."
  (when-let (directory-name (if-let (file-name (buffer-file-name))
                                (file-name-directory file-name)
                              list-buffers-directory))
    (file-truename directory-name)))

(defun synthmacs//file-path ()
  "Retrieve the file path of the current buffer.

Returns:
  - A string containing the file path in case of success.
  - `nil' in case the current buffer does not have a directory."
  (when-let (file-path (buffer-file-name))
    (file-truename file-path)))

(defun synthmacs//file-path-with-line ()
  "Retrieve the file path of the current buffer, including line number.

Returns:
  - A string containing the file path in case of success.
  - `nil' in case the current buffer does not have a directory."
  (when-let (file-path (synthmacs//file-path))
    (concat file-path ":" (number-to-string (line-number-at-pos)))))

(defun synthmacs//copy-directory-path ()
  "Copy and show the directory path of the current buffer.

If the buffer is not visiting a file, use the `list-buffers-directory'
variable as a fallback to display the directory, useful in buffers like the
ones created by `magit' and `dired'."
  (interactive)
  (if-let (directory-path (synthmacs//directory-path))
      (progn
        (kill-new directory-path)
        (message "%s" directory-path))
    (message "WARNING: Current buffer does not have a directory!")))

(defun synthmacs//copy-file-path ()
  "Copy and show the file path of the current buffer."
  (interactive)
  (if-let (file-path (synthmacs//file-path))
      (progn
        (kill-new file-path)
        (message "%s" file-path))
    (message "WARNING: Current buffer is not attached to a file!")))

(defun synthmacs//copy-file-name ()
  "Copy and show the file name of the current buffer."
  (interactive)
  (if-let* ((file-path (synthmacs//file-path))
            (file-name (file-name-nondirectory file-path)))
      (progn
        (kill-new file-name)
        (message "%s" file-name))
    (message "WARNING: Current buffer is not attached to a file!")))

(defun synthmacs//copy-buffer-name ()
  "Copy and show the name of the current buffer."
  (interactive)
  (kill-new (buffer-name))
  (message "%s" (buffer-name)))

(defun synthmacs//copy-file-name-base ()
  "Copy and show the file name without its final extension of the current
buffer."
  (interactive)
  (if-let (file-name (file-name-base (synthmacs//file-path)))
      (progn
        (kill-new file-name)
        (message "%s" file-name))
    (message "WARNING: Current buffer is not attached to a file!")))

(defun synthmacs//copy-file-path-with-line ()
  "Copy and show the file path of the current buffer, including line number."
  (interactive)
  (if-let (file-path (synthmacs//file-path-with-line))
      (progn
        (kill-new file-path)
        (message "%s" file-path))
    (message "WARNING: Current buffer is not attached to a file!")))
#+end_src

*** Enlarge window
:PROPERTIES:
:CUSTOM_ID: h:B40ACBE6-248E-401A-98F1-B719695D1FE2
:END:
Taken from DOOM

#+begin_src emacs-lisp
(use-package emacs
  :init
  (defun synthmacs/window-enlargen (&optional arg)
    "Enlargen the current window to focus on this one. Does not close other
windows (unlike `doom/window-maximize-buffer'). Activate again to undo."
    (interactive "P")
    (let ((param 'doom--enlargen-last-wconf))
      (cl-destructuring-bind (window . wconf)
          (or (frame-parameter nil param)
              (cons nil nil))
        (set-frame-parameter
         nil param
         (if (and (equal window (selected-window))
                  (not arg)
                  wconf)
             (ignore
              (let ((source-window (selected-window)))
                (set-window-configuration wconf)
                (when (window-live-p source-window)
                  (select-window source-window))))
           (prog1 (cons (selected-window) (or wconf (current-window-configuration)))
             (let* ((window (selected-window))
                    (dedicated-p (window-dedicated-p window))
                    (preserved-p (window-parameter window 'window-preserved-size))
                    (ignore-window-parameters t)
                    (window-resize-pixelwise nil)
                    (frame-resize-pixelwise nil))
               (unwind-protect
                   (progn
                     (when dedicated-p
                       (set-window-dedicated-p window nil))
                     (when preserved-p
                       (set-window-parameter window 'window-preserved-size nil))
                     (maximize-window window))
                 (set-window-dedicated-p window dedicated-p)
                 (when preserved-p
                   (set-window-parameter window 'window-preserved-size preserved-p))
                 (add-hook 'doom-switch-window-hook #'doom--enlargened-forget-last-wconf-h)))))))))
  )
#+end_src
*** Renaming files & buffers
:PROPERTIES:
:CUSTOM_ID: h:394285B9-12FD-4DB8-B82F-3FDAE36AECDC
:END:
From Spacemacs.
#+begin_src emacs-lisp
(defun synthmacs/rename-current-buffer-file (&optional arg)
  "Rename the current buffer and the file it is visiting.
If the buffer isn't visiting a file, ask if it should
be saved to a file, or just renamed.

If called without a prefix argument, the prompt is
initialized with the current directory instead of filename."
  (interactive "P")
  (let ((file (buffer-file-name)))
    (if (and file (file-exists-p file))
	(synthmacs/rename-buffer-visiting-a-file arg)
      (synthmacs/rename-buffer-or-save-new-file))))

(defun synthmacs/rename-buffer-visiting-a-file (&optional arg)
  (let* ((old-filename (buffer-file-name))
         (old-short-name (file-name-nondirectory (buffer-file-name)))
         (old-dir (file-name-directory old-filename))
         (new-name (let ((path (read-file-name "New name: " (if arg old-dir old-filename))))
                     (if (string= (file-name-nondirectory path) "")
                         (concat path old-short-name)
                       path)))
         (new-dir (file-name-directory new-name))
         (new-short-name (file-name-nondirectory new-name))
         (file-moved-p (not (string-equal new-dir old-dir)))
         (file-renamed-p (not (string-equal new-short-name old-short-name))))
    (cond ((get-buffer new-name)
           (error "A buffer named '%s' already exists!" new-name))
          ((string-equal new-name old-filename)
           (message "Rename failed! Same new and old name" 1.5)
           (synthmacs/rename-current-buffer-file))
          (t
           (let ((old-directory (file-name-directory new-name)))
             (when (and (not (file-exists-p old-directory))
                        (yes-or-no-p
                         (format "Create directory '%s'?" old-directory)))
               (make-directory old-directory t)))
           (rename-file old-filename new-name 1)
           (rename-buffer new-name)
           (set-visited-file-name new-name)
           (set-buffer-modified-p nil)
           (when (fboundp 'recentf-add-file)
             (recentf-add-file new-name)
             (recentf-remove-if-non-kept old-filename))
           (when (and (require 'projectile nil 'noerror)
                      (projectile-project-p))
             (funcall #'projectile-invalidate-cache nil))
           (message (cond ((and file-moved-p file-renamed-p)
                           (concat "File Moved & Renamed\n"
                                   "From: " old-filename "\n"
                                   "To:   " new-name))
                          (file-moved-p
                           (concat "File Moved\n"
                                   "From: " old-filename "\n"
                                   "To:   " new-name))
                          (file-renamed-p
                           (concat "File Renamed\n"
                                   "From: " old-short-name "\n"
                                   "To:   " new-short-name))))))))


(defun synthmacs/rename-buffer-or-save-new-file ()
  (let ((old-short-name (buffer-name))
	key)
    (while (not (memq key '(?s ?r)))
      (setq key (read-key (propertize
			   (format
			    (concat "Buffer '%s' is not visiting a file: "
				    "[s]ave to file or [r]ename buffer?")
			    old-short-name)
			   'face 'minibuffer-prompt)))
      (cond ((eq key ?s)    ; save to file
	     (unless (buffer-modified-p) (set-buffer-modified-p t))
	     (save-buffer))
	    ((eq key ?r)    ; rename buffer
	     (let ((new-buffer-name (read-string ("New buffer namme: ")))
		   ;; ask to rename again, if the new buffer name exists
		   (if (yes-or-no-p
			(format
			 (concat "A buffer named '%s' already exists: "
				 "Rename again?")
			 new-buffer-name))
		       (setq new-buffer-name (read-string "New buffer name: "))
		     (keyboard-quit)))
	       (rename-buffer new-buffer-name)
	       (message (concat "Buffer Renamed\n"
				"From: " old-short-name "\n"
				"To:   " new-buffer-name ))))
	    ;; ?\a = C-g, ?\e = Esc and C-[
	    ((memq key '(?\a ?\e)) (keyboard-quit))))))

#+end_src

*** <C-h> in the minibuffer while completing a file name
:PROPERTIES:
:CUSTOM_ID: h:14B4AD1F-CC7B-42BF-8C28-33019F387080
:END:
From SystemCrafters

#+begin_src emacs-lisp
(defun synthmacs/minibuffer-backwards-kill (arg)
  "When minibuffer is completing a file name, delete up to parent
folder; otherwise, delete a character backwards."
  (interactive "p")
  (if minibuffer-completing-file-name
      (if (string-match-p "/." (minibuffer-contents))
	  (zap-up-to-char (- arg) ?/)
	(delete-minibuffer-contents))
    (delete-backwards-char arg)))
#+end_src

*** Symbols
:PROPERTIES:
:CUSTOM_ID: h:86C4D8A2-9E75-46C9-AE4B-F4DBBDC9AA61
:END:
#+begin_src emacs-lisp
(defun synthmacs/my-add-pretty-symbol ()
  (setq prettify-symbols-alist
        '(
          ("lambda" . 955) ; λ
          ;; ("->" . 8594)    ; →
          ;; ("=>" . 8658)    ; ⇒
          ;; ("map" . 8614)   ; ↦
          )))
#+end_src

*** Quit (but save before doing so!)
:PROPERTIES:
:CUSTOM_ID: h:12B3E275-99FC-4184-9314-44B02CD78861
:END:
#+begin_src emacs-lisp
(defun synthmacs/prompt-kill-emacs ()
  "Prompt to save changed buffers and exit Synthmacs"
  (interactive)
  (save-some-buffers nil t)
  (kill-emacs))

#+end_src

** Garbage collector magic hack
:PROPERTIES:
:CUSTOM_ID: h:42E8D107-2954-49CB-8E38-33CF300BABDE
:END:
Inspired by DOOMs use of this to manage garbage collection

#+begin_src emacs-lisp
(use-package gcmh
  :demand t
  :config
  (gcmh-mode 1))
#+end_src

** no-littering
:PROPERTIES:
:CUSTOM_ID: h:23600A76-1CDE-48FE-9024-163E861F2F0C
:END:
Basically tries to clean up the ~emacs.d~ directory by creating consistent placement for files.

#+begin_src emacs-lisp :tangle no
(use-package no-littering
  :demand
  :config
  (with-eval-after-load 'recentf
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory))
  )
#+end_src

** Auto-pair paranthesis
:PROPERTIES:
:CUSTOM_ID: h:7B34AC43-8F07-4754-9360-0592CBDBAF9F
:END:
In programming, missing parens and the like are a pain to track down. Let's automate some of that to decrease the likely hood of this actually happening.

#+begin_src emacs-lisp :tangle no
(use-package emacs
  :hook
  ((org-mode . (lambda () (synthmacs/add-local-electric-pairs '(;(?= . ?=)
								(?~ . ?~))))))
  :init
  (electric-pair-mode +1)
  (setq electric-pair-preserve-balance nil)

  ;; mode-specific local-electric pairs
  (defconst synthmacs/default-electric-pairs electric-pair-pairs)
  (defun synthmacs/add-local-electric-pairs (pairs)
    "Example usage: 
    (add-hook 'jupyter-org-interaction-mode '(lambda () (set-local-electric-pairs '())))
    "
    (setq-local electric-pair-pairs (append synthmacs/default-electric-pairs pairs))
    (setq-local electric-pair-text-pairs electric-pair-pairs))

  ;; disable auto pairing for <  >
  (add-function :before-until electric-pair-inhibit-predicate
                (lambda (c) (eq c ?<   ;; >
                                )))
  )  
#+end_src

** xref
:PROPERTIES:
:CUSTOM_ID: h:088A31CF-3AEF-4AF4-B60D-B2793FCDDB94
:END:
#+begin_src emacs-lisp
(use-package xref
  :init
  (setq xref-prompt-for-identifier nil) ;; always find references of symbol at point
  ;; configured in consult
  ;; (setq xref-show-definitions-function #'xref-show-definitions-completing-read)
  ;; (setq xref-show-xrefs-function #'xref-show-definitions-buffer) ; for grep and the like
  ;; (setq xref-file-name-display 'project-relative)
  ;; (setq xref-search-program 'grep)
  )
#+end_src

* Keybindings: General & EVIL mode
:PROPERTIES:
:CUSTOM_ID: h:D7FB11B6-67B4-4275-B0CC-E218C65C411E
:header-args: :emacs-lisp :tangle ./synthmacs/synthmacs-general-evil.el :mkdirp yes
:END:

** General
:PROPERTIES:
:CUSTOM_ID: h:871AF14C-473E-4227-B4BF-13E984BE1E7D
:END:
Here, we load ~general~ and define bindings for generic commands (~find-file~ for example). The commands provided by packages should be binded in the ~use-package~ block, thanks to the ~:general~ keyword.

NOTE: We need to load ~general~ before ~evil~, otherwise the ~:general~ keyword in the use-package blocks won't work.

#+begin_src emacs-lisp
(use-package general
  :demand t
  :config
  (general-evil-setup)

  ;; set up 'SPC' as the global leader key
  (general-create-definer synthmacs/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (general-create-definer synthmacs/local-leader-keys
    :states '(normal visual)
    :keymaps 'override
    :prefix ","
    :global-prefix "SPC m")
  (general-nmap
    :states 'nermal
    "gD" '(xref-find-references :wk "xref-references"))
  )
#+end_src

** General keybindings
:PROPERTIES:
:CUSTOM_ID: h:F8198789-D8ED-49CF-88F5-C6619539211E
:END:

*** Application bindings
:PROPERTIES:
:CUSTOM_ID: h:919D720B-1ACC-441F-9822-8FAB69EB625F
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "a" '(:ignore t :wk "applications"))
#+end_src

*** Buffer bindings
:PROPERTIES:
:CUSTOM_ID: h:9624A127-D219-4FAA-A4B6-582996655F01
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "b" '(:ignore t :wk "buffer")
  "bd" 'kill-current-buffer
  "bh" 'dashboard-refresh-buffer
  "bm" '((lambda ()
	   (interactive)
	   (switch-to-buffer " *Message-Log*"))
	 :wk "Messages buffer")
  "bn" 'next-buffer
  "bp" 'previous-buffer
  "br" 'revert-buffer
  "bs" 'scratch-buffer
  "bu" '(synthmacs/reopen-killed-buffer :wk "Reopen last killed buffer")
  )
#+end_src

*** Compilation bindings
:PROPERTIES:
:CUSTOM_ID: h:BC80000B-14BD-435B-AF41-69ECCE16AC08
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "c" '(:ignore t :wk "code/compile")
  )
#+end_src

*** Debug bindings
:PROPERTIES:
:CUSTOM_ID: h:FF739FE8-70DB-4DBB-B009-1ABE294AB393
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "d" '(:ignore t :wk "debug")
  "df" '(find-file :wk "Find file"))
#+end_src

*** Error bindings
:PROPERTIES:
:CUSTOM_ID: h:AC006610-1BD5-4962-8319-FE8B08D0DFC5
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "e" '(:ignore t :wk "errors")
  "ef" '(find-file :wk "Find file"))
#+end_src

*** Files bindings
:PROPERTIES:
:CUSTOM_ID: h:AD60DD6B-FDFB-4D31-BE5B-B984E2944598
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "f" '(:ignore t :wk "files")
  "f." '(find-file-at-point :wk "find-file-at-point")
  "ff" '(find-file :wk "find-file")
  "fl" '(find-file-literally :wk "find-file-literally")
  "fR" '(synthmacs/rename-current-buffer-file :wk "Rename file")
  "fs" '(save-buffer :wk "save file"))

(synthmacs/leader-keys
  "fy" '(:ignore t :wk "yank")
  "fyb" '(synthmacs//copy-buffer-name :wk "buffer name")
  "fyd" '(synthmacs//copy-directory-path :wk "directory path")
  "fyf" '(synthmacs//copy-file-path :wk "file path")
  "fyl" '(synthmacs//copy-file-path-with-line :wk "file path with line number")
  "fyn" '(synthmacs//copy-file-name :wk "file name")
  "fyN" '(synthmacs//copy-file-name-base :wk "file name without extension"))

(synthmacs/leader-keys
  "fe" '(:ignore t :wk "Emacs Files")
  "fed" '((lambda ()
	    (interactive)
	    (find-file "~/.emacs.d/synthmacs.org"))
	  :wk "synthmacs.org"))
#+end_src

*** Frame bindings
:PROPERTIES:
:CUSTOM_ID: h:4C073FB0-DDD2-4648-98CF-A108B7733096
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "F" '(:ignore t :wk "Frames")
  "Fd" '(delete-frame :wk "delete-frame")
  "FD" '(delete-other-frames :wk "delete-other-frames")
  "Fn" '(make-frame :wk "make-frame"))
#+end_src

*** Git/VCS bindings
:PROPERTIES:
:CUSTOM_ID: h:DA032070-22DA-4C6D-815E-147617662953
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "g" '(:ignore t :wk "git"))
#+end_src

*** Help bindings
:PROPERTIES:
:CUSTOM_ID: h:7D9257A5-58D9-4B53-93EC-D1962282E1AA
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "h" '(:ignore t :wk "help")
  "hp" 'describe-package
  "hM" '(describe-mode :wk "describe-mode (Major)")
  "hm" 'describe-minor-mode
  "he" 'view-echo-area-messages
  "hF" 'describe-face
  "hl" 'view-lossage
  "hL" 'find-library
  "hK" 'describe-keymap

  "hE" '(:ignore t :wk "Emacs")
  "hEf" 'view-emacs-FAQ
  "hEm" 'info-emacs-manual
  "hEn" 'view-emacs-news
  "hEp" 'view-emacs-problems
  "hEt" 'view-emacs-todo
  )
#+end_src

*** Jump bindings
:PROPERTIES:
:CUSTOM_ID: h:8EE273DF-ECFF-4C88-9F43-D5CDA596BE74
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "j" '(:ignore t :wk "jump/join/split"))
#+end_src

*** M-x bindings
:PROPERTIES:
:CUSTOM_ID: h:B2BB706A-87A6-48AD-8B8D-5D514A3722AB
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "SPC" '(:ignore t :wk "M-x")
  "SPC" '(execute-extended-command :wk "M-x")
  "TAB" '(synthmacs/alternate-buffer :wk "last buffer")
  "<escape>" 'keyboard-escape-quit
  )
;; "'" '(execute-extended-command :wk "open shell")
#+end_src

*** Major-mode bindings
:PROPERTIES:
:CUSTOM_ID: h:6004A24A-C951-41FB-A2D3-42AAD6DC2143
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "m" '(:ignore t :wk "major mode"))
#+end_src

*** Org bindings
:PROPERTIES:
:CUSTOM_ID: h:FF0E16D7-1239-4A2D-A81D-CB45A1019ED0
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "o" '(:ignore t :wk "org")
  )
#+end_src

*** Project bindings
:PROPERTIES:
:CUSTOM_ID: h:492B2741-254E-4FFC-BB18-C79AEF74D7A1
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "p" '(:ignore t :wk "project"))
#+end_src

*** Quit bindings
:PROPERTIES:
:CUSTOM_ID: h:01C7280C-69EF-47D6-B50B-6362A9D82BDF
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "q" '(:ignore t :wk "quit")
  "qq" '(synthmacs/prompt-kill-emacs :wk "prompt-kill-emacs")
  "qs" '(save-buffers-kill-emacs :wk "save-buffers-kill-emacs")
  "qQ" '(kill-emacs :wk "kill-emacs")
  "qR" '(restart-emacs :wk "restart-emacs"))
#+end_src

*** Registers bindings
:PROPERTIES:
:CUSTOM_ID: h:4603106A-5ABD-4FD3-8EA0-F67A598CCB02
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "r" '(:ignore t :wk "registers")
  "re" '(evil-show-registers :wk "evil-show-registers")
  "rk" '(consult-yank-from-kill-ring :wk "consult-yank-from-kill-ring"))
#+end_src

*** Search bindings
:PROPERTIES:
:CUSTOM_ID: h:1EB3AA9F-8F66-427D-A2B8-FE65730DF6A5
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "s" '(:ignore t :wk "search")
  "sc" '(evil-ex-nohighlight :wk "clear-search-highlights"))
#+end_src

*** Toggles bindings
:PROPERTIES:
:CUSTOM_ID: h:5A330DCC-5B77-4C92-ACF1-5195ECBBDC32
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "t" '(:ignore t :wk "toggles")
  "tc" '(global-display-fill-column-indicator-mode :wk "fill-column")
  "tp" 'smartparens-global-mode
  "tl" '(toggle-truncate-lines :wk "truncate-lines")
  "tv" 'visual-line-mode
  "tw" 'global-whitespace-mode
  "tz" 'zone
  )
#+end_src

*** User bindings
:PROPERTIES:
:CUSTOM_ID: h:0F5F8697-278F-4363-B3DD-72E80F010402
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "u" '(:ignore t :wk "user bindings"))
#+end_src

*** Window bindings
:PROPERTIES:
:CUSTOM_ID: h:7D0252BE-EDAD-42EE-837B-D216E21197BE
:END:

#+begin_src emacs-lisp
(synthmacs/leader-keys
  "w" '(:ignore t :wk "window")

  "wo" '(synthmacs/window-enlargen :wk "enlargen")
  "wm" 'maximize-window

  "w{" 'shrink-window
  "w[" 'shrink-window-horizontally
  "w}" 'expand-window
  "w]" 'expand-window-horizontally
  )
#+end_src

** Hydra
:PROPERTIES:
:CUSTOM_ID: h:E25DB824-33FC-457C-9547-B457A4019A0F
:END:
#+begin_src emacs-lisp
(use-package hydra
  :general
  (synthmacs/leader-keys
    "tf" '(hydra/text-scale/body :wk "font size")))

(defhydra hydra/text-scale (:timeout 7)
  "
^Zoom Menu
^^^^^^^^----------------------
_+_: text-scale-increase
_-_: text-scale-decrease
_q_: quit
"
  ("+" text-scale-increase)
  ("-" text-scale-decrease)
  ("q" nil :exit t))


;; Buffer menu
;; (defhydra hydra/buffer-menu (:color pink
;;                              :hint nil)
;;   "
;; ^Mark^             ^Unmark^           ^Actions^          ^Search
;; ^^^^^^^^-----------------------------------------------------------------
;; _m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch
;; _s_: save          _U_: unmark up     _b_: bury          _I_: isearch
;; _d_: delete        ^ ^                _g_: refresh       _O_: multi-occur
;; _D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only
;; _~_: modified
;; "
;;   ("m" Buffer-menu-mark)
;;   ("u" Buffer-menu-unmark)
;;   ("U" Buffer-menu-backup-unmark)
;;   ("d" Buffer-menu-delete)
;;   ("D" Buffer-menu-delete-backwards)
;;   ("s" Buffer-menu-save)
;;   ("~" Buffer-menu-not-modified)
;;   ("x" Buffer-menu-execute)
;;   ("b" Buffer-menu-bury)
;;   ("g" revert-buffer)
;;   ("T" Buffer-menu-toggle-files-only)
;;   ("O" Buffer-menu-multi-occur :color blue)
;;   ("I" Buffer-menu-isearch-buffers :color blue)
;;   ("R" Buffer-menu-isearch-buffers-regexp :color blue)
;;   ("c" nil "cancel")
;;   ("v" Buffer-menu-select "select" :color blue)
;;   ("o" Buffer-menu-other-window "other-window" :color blue)
;;   ("q" quit-window "quit" :color blue))

;; (synthmacs/leader-keys
;;   "bl" '(buffer-menu :wk "buffer list"))

;; ;; More keymaps
;; (general-define-key
;;  :keymaps 'Buffer-menu-mode-map
;;  "C-?" 'hydra/buffer-menu/body)
#+end_src

** EVIL mode
:PROPERTIES:
:CUSTOM_ID: h:D64CA666-A9A1-4DE2-900D-32E3726F6792
:END:
I'm a Vim motion devotee. Thus, we'll make Synthmacs behave like Vim, when it comes to text editing.

*** evil
:PROPERTIES:
:CUSTOM_ID: h:E03B3DCB-697A-4FD2-8C32-51BF96A5DF8B
:END:
#+begin_src emacs-lisp
(use-package evil
  :demand
  :general
  (synthmacs/leader-keys
    "wd" '(evil-window-delete :wk "delete-window")
    "ws" 'evil-window-split
    "wv" 'evil-window-vsplit
    "wh" 'evil-window-left 
    "wj" 'evil-window-down
    "wk" 'evil-window-up
    "wl" 'evil-window-right
    "wn" 'evil-window-next 
    "wp" 'evil-window-prev)
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump t)
  (setq evil-undo-system 'undo-fu)
  (setq evil-search-module 'evil-search)
  (setq evil-ex-search-persistent-highlight t)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-normal-state-map "`" 'evil-goto-mark-line)
  (define-key evil-normal-state-map "'" 'evil-goto-mark)
  (define-key evil-visual-state-map "'" 'evil-goto-mark)
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal)
  )
#+end_src

*** evil-anzu
:PROPERTIES:
:CUSTOM_ID: h:D9672083-EF2E-4DB5-B911-6A6CD2D2C2BE
:END:
#+begin_src emacs-lisp
(use-package evil-anzu
  :init (global-anzu-mode t)
  :config
  (setq anzu-search-threshold 1000
	anzu-cons-mode-line-p nil))
#+end_src

*** evil-args
:PROPERTIES:
:CUSTOM_ID: h:75BED2EC-1802-4E57-9B56-1B3FBA9460D7
:END:
#+begin_src emacs-lisp
(use-package evil-args
  :demand
  :config
  (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
  (define-key evil-outer-text-objects-map "a" 'evil-outer-arg))

#+end_src

*** evil-cleverparens
:PROPERTIES:
:CUSTOM_ID: h:12253229-6F1D-4CB5-B009-CD228B194727
:END:
#+begin_src emacs-lisp
(use-package evil-cleverparens
  :init
  (setq evil-cleverparens-use-regular-insert t)
  :config
  ;; `evil-cp-change` should move to point
  (evil-set-command-properties 'evil-cp-change :move-point t))

#+end_src

*** evil-collection
:PROPERTIES:
:CUSTOM_ID: h:32288E4F-A859-4285-94CF-6774A18BFDC4
:END:
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :demand
  :init
  (setq evil-collection-magit-use-z-for-folds nil)
  :config
  (evil-collection-init))
#+end_src

*** evil-commentary
:PROPERTIES:
:CUSTOM_ID: h:9C0CCF5B-61A2-47FD-85FF-EF9C512551DC
:END:
~gcc~ to comment to your heart's content!
#+begin_src emacs-lisp
(use-package evil-commentary
  :demand
  :config
  (evil-commentary-mode))
#+end_src

*** evil-exchange
:PROPERTIES:
:CUSTOM_ID: h:D90743DD-05E8-4B00-919D-2031B4D16E09
:END:
Cool little package that allows you to exchange/swap text objects using ~gx~ in this case. Niche, but handy.

#+begin_src emacs-lisp
(use-package evil-exchange
  :config
  (setq evil-exchange-key (kbd "gx"))
  (setq evil-exchange-cancel-key (kbd "gX"))
  (define-key evil-normal-state-map evil-exchange-key 'evil-exchange)
  (define-key evil-visual-state-map evil-exchange-key 'evil-exchange)
  (define-key evil-normal-state-map evil-exchange-cancel-key
              'evil-exchange-cancel)
  (define-key evil-visual-state-map evil-exchange-cancel-key
              'evil-exchange-cancel))
#+end_src

*** evil-goggles
:PROPERTIES:
:CUSTOM_ID: h:A12684FB-4CCE-49E2-BDA6-AE5D864DCC3A
:END:
Fun visual tweak. When yanking, joining, deleting, changing, etc, it will briefly highlight what you're actually operating on.

#+begin_src emacs-lisp
(use-package evil-goggles
  :after evil
  :demand
  :init
  ;; disable pulses as it is more distracting than useful and
  ;; less readable.
  (setq evil-goggles-pulse nil
	evil-goggles-async-duration 0.1
	evil-goggles-blocking-duration 0.05)
  :config
  (push '(evil-operator-eval
	  :face evil-goggles-yank-face
	  :switch evil-goggles-enable-yank
	  :advice evil-goggles--generic-async-advice)
	evil-goggles--commands)
  (evil-goggles-mode)
  (evil-goggles-use-diff-faces))

#+end_src

*** evil-iedit-state
:PROPERTIES:
:CUSTOM_ID: h:EFDDB64A-5F12-4643-B5EF-9A069B3BCCEE
:END:
Handly refactoring! Key bindings:

~TAB~     : toggle occurance
~n~ / ~N~ : next / previous occurance
~F~       : restrict scope to function
~J~ / ~K~ : extend scope of match down/up
~V~       : toggle visibility of matches

#+begin_src emacs-lisp
(use-package evil-iedit-state
  :commands (evil-iedit-state evil-iedit-state/iedit-mode)
  :init
  (setq iedit-current-symbol-default t
        iedit-only-at-symbol-boundaries t
        iedit-toggle-key-default nil)
  :general
  (synthmacs/leader-keys
    "se" '(evil-iedit-state/iedit-mode :wk "iedit-mode")
    "sq" '(evil-iedit-state/quit-iedit-mode :wk "quit-iedit-mode"))
  )
#+end_src

*** evil-lion
:PROPERTIES:
:CUSTOM_ID: h:63845AD9-32AF-4F75-B467-DCFC9D05EEC0
:END:
~gl~ and ~gL~ alignment operators for ~gl MOTION CHAR~ and right-align ~gL MOTION CHAR~

Example: ~glip=~ will left align inner paragraph on the ~=~ separator

#+begin_src emacs-lisp
(use-package evil-lion
  :init
  (evil-define-key '(normal visual) 'global
    "gl" #'evil-lion-left
    "gL" #'evil-lion-right)
  :config
  (evil-lion-mode))
#+end_src

*** evil-lisp-state
:PROPERTIES:
:CUSTOM_ID: h:60EB5AD8-2664-4548-80F8-6FCF9A68BFDE
:END:
#+begin_src emacs-lisp
;; https://github.com/syl20bnr/evil-lisp-state
;; (use-package evil-lisp-state
;; :defer t
;; :init
;; (add-hook 'prog-mode-hook 'synthmacs/load-evil-lisp-state)
;; (setq evil-lisp-state-global t))

;; (synthmacs/leader-keys
;;   "l" '(evil-lisp-state-map :wk "lisp-state"))
;; (spacemacs/declare-prefix
;;   "l" "lisp"
;;   "ld" "delete"
;;   "lD" "delete-backward"
;;   "l`" "hybrid")))

;; (defun synthmacs/load-evil-lisp-state ()
;;     "Loads evil-lisp-state lazily"
;;   (remove-hook 'prog-mode-hook #'synthmacs/load-evil-lisp-state))

#+end_src

*** evil-matchit
:PROPERTIES:
:CUSTOM_ID: h:321F3473-01E4-404B-A27C-25C8810FFA78
:END:
#+begin_src emacs-lisp
(use-package evil-matchit
  :init
  (global-evil-matchit-mode 1))

#+end_src

*** evil-numbers
:PROPERTIES:
:CUSTOM_ID: h:5BE63DE6-2538-4A7E-977E-376310B9ED58
:END:
#+begin_src emacs-lisp
(use-package evil-numbers
  :defer t
  :general
  (synthmacs/leader-keys
    "n" '(synthmacs/hydra/numbers-state/body :wk "numbers")))

(defhydra synthmacs/hydra/numbers-state (:timeout 7)
  "
^Numbers Menu
^^^^^^^^----------------------
_+_: increment-at-point
_-_: decrement-at-point
_q_: quit
"
  ("+" evil-numbers/inc-at-pt)
  ("-" evil-numbers/dec-at-pt)
  ("q" nil :exit t))

#+end_src

*** evil-surround
:PROPERTIES:
:CUSTOM_ID: h:EC06A735-21C9-4237-B842-B9E2C4D609D8
:END:
Port of T.Pope's vim-surround. ~s~ for surround and ~S~ becomes substitute.
Why? [[https://github.com/syl20bnr/spacemacs/blob/develop/doc/DOCUMENTATION.org#the-vim-surround-case][Find out here!]]

#+begin_src emacs-lisp
(use-package evil-surround
  :init
  (evil-define-key 'visual evil-surround-mode-map "s" 'evil-surround-region)
  (evil-define-key 'visual evil-surround-mode-map "S" 'evil-substitute)
  :config
  (global-evil-surround-mode 1))
#+end_src

*** evil-textobj-line
:PROPERTIES:
:CUSTOM_ID: h:FDCDA4B0-65C1-40B2-AA6E-28CF92A10919
:END:
#+begin_src emacs-lisp
(use-package evil-textobj-line)
#+end_src

*** evil-visual-mark-mode
:PROPERTIES:
:CUSTOM_ID: h:8D2E96E1-BEAC-4E27-A518-477E331D63C6
:END:
#+begin_src emacs-lisp
(use-package evil-visual-mark-mode
  :defer t
  :general
  (synthmacs/leader-keys
    "t`" '(evil-visual-mark-mode :wk "visual-mark-mode")))
#+end_src

*** evil-visualstar
:PROPERTIES:
:CUSTOM_ID: h:EFCF2F7F-D9C1-41DD-A8E7-8839868C12A7
:END:
#+begin_src emacs-lisp
(use-package evil-visualstar
  :commands (evil-visualstar/begin-search-forward
             evil-visualstar/begin-search-backward)
  :init
  (define-key evil-visual-state-map (kbd "*") 'evil-visualstar/begin-search-forward)
  (define-key evil-visual-state-map (kbd "#") 'evil-visualstar/begin-search-backward))
#+end_src

*** evil-vimish-fold
:PROPERTIES:
:CUSTOM_ID: h:C015C98C-E459-4D55-93E8-9954EF450144
:END:
#+begin_src emacs-lisp
;; Evil-Vimish-Fold - https://github.com/alexmurray/evil-vimish-fold
;;(use-package evil-vimish-fold
;;  :after vimish-fold
;;  :hook ((prog-mode conf-mode text-mode) . evil-vimish-fold-mode))
#+end_src

* Org Mode
:PROPERTIES:
:CUSTOM_ID: h:B1DBE90D-B6C9-4BD4-B15B-185FE238D236
:header-args: :emacs-lisp :tangle ./synthmacs/synthmacs-org.el :mkdirp yes
:END:
** org mode
:PROPERTIES:
:CUSTOM_ID: h:934C85A9-D8DB-455F-A19C-570300047FD5
:END:
Interesting bits:
- If you use + in lists it will show up as below:
  + subitem
- you can cycle to next TODO state with ~org-shiftright~

#+BEGIN_SRC emacs-lisp
(use-package org
  ;; :straight org-plus-contrib
  ;; :straight (:type built-in)
  :hook ((org-mode . prettify-symbols-mode)
         (org-mode . visual-line-mode))
  :general
  (synthmacs/leader-keys
    "oc" 'org-capture
    ;;"ol" '(org-todo-list :wk "todo list")

    "ft" 'org-babel-tangle
    )

  (synthmacs/local-leader-keys
    :keymaps 'org-mode-map
    "a" '(org-archive-subtree :wk "archive subtree")
    "E" '(org-export-dispatch :wk "org-export")
    "i" 'org-indent-region
    "s" '(org-insert-structure-template :wk "insert src")
    "S" 'org-sort
    "x" 'org-toggle-checkbox

    "t" '(:ignore true :wk "todo")
    "tt" 'org-todo
    "ts" 'org-schedule
    "td" 'org-deadline

    "l" '(:ignore true :wk "link")
    "li" 'org-insert-link
    "ls" 'org-store-link

    ;;   "L" '((lambda () (interactive) (org-latex-preview)) :wk "latex preview")
    ;;   ;; "L" '((lambda () (interactive) (org--latex-preview-region (point-min) (point-max))) :wk "latex")
    ;;   "r" '(org-refile :wk "refile")
    ;;   "n" '(org-toggle-narrow-to-subtree :wk "narrow subtree")
    ;;   "p" '(org-priority :wk "priority")
    ;;   "q" '(org-set-tags-command :wk "tag")
    )

  (org-mode-map
   :states 'insert
   "TAB" 'synthmacs/org-indent-or-complete
   "S-TAB" nil)

  (org-mode-map
   :states 'normal
   "z i" '(org-toggle-inline-images :wk "inline images"))

  :init
  ;; general settings
  (when (file-directory-p "~/Developer/ExoCortex/org")
    (setq org-directory "~/Developer/ExoCortex/org"
          +org-export-directory "~/Developer/ExoCortex/org/export"
          org-default-notes-file "~/Developer/ExoCortex/org/notes.org"
          org-id-locations-file "~/Developer/ExoCortex/org/.orgids"
          ))	
  ;; (setq org-export-in-background t)
  (setq org-src-preserve-indentation t) ;; do not put two spaces on the left
  (setq org-startup-indented t)
  ;;(setq org-startup-with-inline-images t)
  (setq org-hide-emphasis-markers t)
  (setq org-catch-invisible-edits 'smart)
  (setq org-image-actual-width nil)
  (setq org-indent-indentation-per-level 1)
  (setq org-list-demote-modify-bullet '(("-" . "+") ("+" . "*")))
  ;; disable modules for faster startup
  ;; (setq org-modules
  ;;       '(ol-docview
  ;;         org-habit))
  ;; (setq org-todo-keywords
  ;;       '((sequence "TODO(t)" "NEXT(n)" "PROG(p)" "|" "HOLD(h)" "DONE(d)")))
  (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "»")
                                         ("#+END_SRC" . "«")
                                         ("#+begin_src" . "»")
                                         ("#+end_src" . "«")
                                         ("lambda"  . "λ")
                                         ("->" . "→")
                                         ("->>" . "↠")))
  (setq prettify-symbols-unprettify-at-point 'right-edge)

  :config
  ;; ;; (efs/org-font-setup)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("clj" . "src clojure"))
  ;; (setq org-latex-pdf-process '("tectonic %f"))
  ;; (setq org-export-backends '(html))
  ;; ;; (add-to-list 'org-export-backends 'beamer)
  ;; (plist-put org-format-latex-options :scale 1.2)
  )
#+END_SRC

** Enabling the Table of Contents
:PROPERTIES:
:CUSTOM_ID: h:5415BD51-CBCC-46BD-85C2-7355CB5F88CE
:END:
#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init
  (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** org reverse datetree
:PROPERTIES:
:CUSTOM_ID: h:AE408842-22B1-490C-885C-118A0496DBC3
:END:
#+begin_src emacs-lisp
(use-package org-reverse-datetree
  :after org
  :demand)
#+end_src

** org-superstar
:PROPERTIES:
:CUSTOM_ID: h:9163EA6E-E99A-422D-A140-CB01DF84E160
:END:
Make stars for headings into fun symbols!

#+begin_src emacs-lisp
(use-package org-superstar
  :hook (org-mode . org-superstar-mode)
  :init
  (setq org-superstar-headline-bullets-list '("✖" "✚" "◉" "○" "▶")
        ;; org-superstar-special-todo-items t
        org-ellipsis " ↴ ")
  )
#+end_src

** Cycle only one heading
:PROPERTIES:
:CUSTOM_ID: h:681606B7-B88E-48E9-911E-D5D398D89049
:END:

#+begin_src emacs-lisp :tangle no
(use-package org
  :init
  (defun +org-cycle-only-current-subtree-h (&optional arg)
    "Toggle the local fold at the point, and no deeper.
`org-cycle's standard behavior is to cycle between three levels: collapsed,
subtree and whole document. This is slow, especially in larger org buffer. Most
of the time I just want to peek into the current subtree -- at most, expand
,*only* the current subtree.

All my (performant) foldings needs are met between this and `org-show-subtree'
(on zO for evil users), and `org-cycle' on shift-TAB if I need it."
    (interactive "P")
    (unless (eq this-command 'org-shifttab)
      (save-excursion
        (org-beginning-of-line)
        (let (invisible-p)
          (when (and (org-at-heading-p)
                     (or org-cycle-open-archived-trees
                         (not (member org-archive-tag (org-get-tags))))
                     (or (not arg)
                         (setq invisible-p (outline-invisible-p (line-end-position)))))
            (unless invisible-p
              (setq org-cycle-subtree-status 'subtree))
            (org-cycle-internal-local)
            t)))))
  :config
  ;; Only fold the current tree, rather than recursively
  (add-hook 'org-tab-first-hook #'+org-cycle-only-current-subtree-h)
  )
#+end_src

** Using org-id in links
:PROPERTIES:
:CUSTOM_ID: h:AC175A47-E576-4AA6-A9C7-709129F4C56F
:header-args: :emacs-lisp :tangle ./synthmacs/synthmacs-org.el :mkdirp yes
:END:
Taken from https://writequit.org/articles/emacs-org-mode-generate-ids.html

Problem: when exporting org files to HTML, the header anchors are volatile. Once I publish a new HTML version of this file, the previous version's links are no longer valid.

This function adds ~CUSTOM_ID~ property to all headings in a file (one-time).
We can then use this to link to that heading forever.

Adding it as a ~after-save-hook~  automatically adds a ~CUSTOM_ID~ to newly created headers.

#+begin_src emacs-lisp
(use-package org
  :init
  (defun synthmacs/org-custom-id-get (&optional pom create prefix)
    "Get the CUSTOM_ID property of the entry at point-or-marker POM.
   If POM is nil, refer to the entry at point. If the entry does
   not have an CUSTOM_ID, the function returns nil. However, when
   CREATE is non nil, create a CUSTOM_ID if none is present
   already. PREFIX will be passed through to `org-id-new'. In any
   case, the CUSTOM_ID of the entry is returned."
    (interactive)
    (org-with-point-at pom
      (let ((id (org-entry-get nil "CUSTOM_ID")))
        (cond
         ((and id (stringp id) (string-match "\\S-" id))
          id)
         (create
          (setq id (org-id-new (concat prefix "h")))
          (org-entry-put pom "CUSTOM_ID" id)
          (org-id-add-location id (buffer-file-name (buffer-base-buffer)))
          id)))))

  (defun synthmacs/org-add-ids-to-headlines-in-file ()
    "Add CUSTOM_ID properties to all headlines in the current file.
   Only do so for those which do not already have one. Only adds ids
   if the `auto-id' option is set to `t' in the file somewhere. ie,
   ,#+OPTIONS: auto-id:t"
    (interactive)
    (save-excursion
      (widen)
      (goto-char (point-min))
      (when (re-search-forward "^#\\+OPTIONS:.*auto-id:t" (point-max) t)
        (org-map-entries (lambda () (synthmacs/org-custom-id-get (point) 'create))))))
  :config
  (require 'org-id)
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
  )
#+end_src

** org-babel
:PROPERTIES:
:CUSTOM_ID: h:B3A91A63-71C7-4EEA-86E9-D3F3DF035213
:END:
#+begin_src emacs-lisp
(use-package org
  :general
  (synthmacs/local-leader-keys
    :keymaps 'org-mode-map
    "e" '(org-edit-special :wk "edit")
    "-" '(org-babel-demarcate-block :wk "split block")
    "z" '(org-babel-hide-result-toggle :wk "fold result"))

  (synthmacs/local-leader-keys
    :keymaps 'org-src-mode-map
    "'" '(org-edit-src-exit :wk "exit")) ;;FIXME

  :init
  (setq org-confirm-babel-evaluate nil)

  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     ;; (ledger . t)
     (shell . t)))
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
  )
#+end_src

** Tangling this file
:PROPERTIES:
:CUSTOM_ID: h:16B948EA-5375-44DE-ACD7-3664D4A9CE5F
:header-args: :emacs-lisp :tangle ./synthmacs/synthmacs-org.el
:END:
Taken from https://github.com/KaratasFurkan/.emacs.d

#+begin_src emacs-lisp
(use-package org
  :config
  (require 's)
  (defun synthmacs/async-process (command &optional name filter)
    "Start an async process by running the COMMAND string with bash. Return the
  process object for it.

  NAME is name for the process. Default is \"async-process\".

  FILTER is function that runs after the process is finished, its args should be
  \"(process output)\". Default is just messages the output."
    (make-process
     :command `("bash" "-c" ,command)
     :name (if name name
	     "async-process")
     :filter (if filter filter
	       (lambda (process output) (message (s-trim output))))))


  (defun synthmacs/tangle-config ()
    "Export code blocks from the literate config file
  asynchronously."
    (interactive)
    (let ((command (if (file-directory-p "/opt/homebrew/opt/emacs-plus@29/Emacs.app")
		       "/opt/homebrew/opt/emacs-plus@29/Emacs.app/Contents/MacOS/Emacs %s --batch --eval '(org-babel-tangle nil \"%s\")'"
		     )))
      ;; prevent emacs from killing until tangle-process finished
      ;; (add-to-list 'kill-emacs-query-functions
      ;;              (lambda ()
      ;;                (or (not (process-live-p (get-process "tangle-process")))
      ;;                    (y-or-n-p "\"fk/tangle-config\" is running; kill it? "))))
      ;; tangle config asynchronously
      (synthmacs/async-process
       (format command
	       (expand-file-name "synthmacs.org" user-emacs-directory)
	       (expand-file-name "init.el" user-emacs-directory))
       "tangle-process")
      )
    )
  )
#+end_src

** org-tree-slide
:PROPERTIES:
:CUSTOM_ID: h:A404F880-F610-43AB-BD53-7E5C7A026B43
:END:
A presentation mode for org-mode

#+begin_src emacs-lisp :tangle no
(use-package org-tree-slide
  :after org
  :hook ((org-tree-slide-play . (lambda () (+remap-faces-at-start-present)))
         (org-tree-slide-stop . (lambda () (+remap-faces-at-stop-present))))
  :general
  (synthmacs/leader-keys
   "t p" '(org-tree-slide-mode :wk "present"))
  (general-nmap
    :keymaps '(org-tree-slide-mode-map org-mode-map)
    "C-j" 'org-tree-slide-move-next-tree
    "C-k" 'org-tree-slide-move-previous-tree)
  :init
  (setq org-tree-slide-activate-message "Presentation mode ON")
  (setq org-tree-slide-deactivate-message "Presentation mode OFF")
  (setq org-tree-slide-indicator nil)
  (setq org-tree-slide-breadcrumbs "    >    ")
  (setq org-tree-slide-heading-emphasis t)
  (setq org-tree-slide-slide-in-waiting 0.025)
  (setq org-tree-slide-content-margin-top 4)
  (defun +remap-faces-at-start-present ()
    (setq-local face-remapping-alist '((default (:height 1.50) variable-pitch)
                                       (fixed-pitch (:height 1.2) fixed-pitch)
                                       ;; (org-verbatim (:height 1.2) org-verbatim)
                                       ;; (org-block (:height 1.2) org-block)
                                       ))
    ;; (setq-local olivetti-body-width 95)
    (olivetti-mode 1)
    (display-fill-column-indicator-mode 0)
    (hide-mode-line-mode 1)
    (diff-hl-mode 0)
    (centaur-tabs-mode 0))
  (defun +remap-faces-at-stop-present ()
    (setq-local face-remapping-alist '((default variable-pitch default)))
    ;; (setq-local olivetti-body-width 120)
    (olivetti-mode 0)
    (display-fill-column-indicator-mode 1)
    (hide-mode-line-mode 0)
    (doom-modeline-mode 1)
    (diff-hl-mode 1)
    (centaur-tabs-mode 1))
  (setq org-tree-slide-breadcrumbs nil)
  (setq org-tree-slide-header nil)
  (setq org-tree-slide-slide-in-effect nil)
  (setq org-tree-slide-heading-emphasis nil)
  (setq org-tree-slide-cursor-init t)
  (setq org-tree-slide-modeline-display nil)
  (setq org-tree-slide-skip-done nil)
  (setq org-tree-slide-skip-comments t)
  (setq org-tree-slide-fold-subtrees-skipped t)
  (setq org-tree-slide-skip-outline-level 8) ;; or 0?
  (setq org-tree-slide-never-touch-face t)
  ;; :config
  ;; (org-tree-slide-presentation-profile)
  ;; :custom-face
  ;; (org-tree-slide-heading-level-1 ((t (:height 1.8 :weight bold))))
  ;; (org-tree-slide-heading-level-2 ((t (:height 1.5 :weight bold))))
  ;; (org-tree-slide-heading-level-3 ((t (:height 1.5 :weight bold))))
  ;; (org-tree-slide-heading-level-4 ((t (:height 1.5 :weight bold))))
  )
#+end_src

** evil-org-mode
:PROPERTIES:
:CUSTOM_ID: h:C9161126-81DB-480B-B4A5-49E7651368A1
:END:
Taken from DOOM:

- nice ~+org/insert-item-below~ function
- evil bindings for ~org-agenda~
- text objects:
  - use ~vie~ to select everything inside a src block
  - use ~vir~ to select everything inside a heading
  - use ~=ie~ to format a code block

#+begin_src emacs-lisp
(use-package evil-org-mode
  :straight (evil-org-mode
	     :type git
	     :host github
	     :repo "hlissner/evil-org-mode")
  :hook ((org-mode . evil-org-mode)
         (org-mode . (lambda () 
                       (require 'evil-org)
                       (evil-normalize-keymaps)
                       (evil-org-set-key-theme '(textobjects))
                       (require 'evil-org-agenda)
                       (evil-org-agenda-set-keys))))
  :bind
  ([remap evil-org-org-insert-heading-respect-content-below] . +org/insert-item-below) ;; "<C-return>" 
  ([remap evil-org-org-insert-todo-heading-respect-content-below] . +org/insert-item-above) ;; "<C-S-return>" 

  :general
  (general-nmap
    :keymaps 'org-mode-map
    :states 'normal
    "RET"   #'org-open-at-point
    ;; "RET"   #'+org/dwim-at-point
    )

  :init
  (defun +org--insert-item (direction)
    (let ((context (org-element-lineage
                    (org-element-context)
                    '(table table-row headline inlinetask item plain-list)
                    t)))
      (pcase (org-element-type context)
        ;; Add a new list item (carrying over checkboxes if necessary)
        ((or `item `plain-list)
         ;; Position determines where org-insert-todo-heading and org-insert-item
         ;; insert the new list item.
         (if (eq direction 'above)
             (org-beginning-of-item)
           (org-end-of-item)
           (backward-char))
         (org-insert-item (org-element-property :checkbox context))
         ;; Handle edge case where current item is empty and bottom of list is
         ;; flush against a new heading.
         (when (and (eq direction 'below)
                    (eq (org-element-property :contents-begin context)
                        (org-element-property :contents-end context)))
           (org-end-of-item)
           (org-end-of-line)))

        ;; Add a new table row
        ((or `table `table-row)
         (pcase direction
           ('below (save-excursion (org-table-insert-row t))
                   (org-table-next-row))
           ('above (save-excursion (org-shiftmetadown))
                   (+org/table-previous-row))))

        ;; Otherwise, add a new heading, carrying over any todo state, if
        ;; necessary.
        (_
         (let ((level (or (org-current-level) 1)))
           ;; I intentionally avoid `org-insert-heading' and the like because they
           ;; impose unpredictable whitespace rules depending on the cursor
           ;; position. It's simpler to express this command's responsibility at a
           ;; lower level than work around all the quirks in org's API.
           (pcase direction
             (`below
              (let (org-insert-heading-respect-content)
                (goto-char (line-end-position))
                (org-end-of-subtree)
                (insert "\n" (make-string level ?*) " ")))
             (`above
              (org-back-to-heading)
              (insert (make-string level ?*) " ")
              (save-excursion (insert "\n"))))
           (when-let* ((todo-keyword (org-element-property :todo-keyword context))
                       (todo-type    (org-element-property :todo-type context)))
             (org-todo
              (cond ((eq todo-type 'done)
                     ;; Doesn't make sense to create more "DONE" headings
                     (car (+org-get-todo-keywords-for todo-keyword)))
                    (todo-keyword)
                    ('todo)))))))

      (when (org-invisible-p)
        (org-show-hidden-entry))
      (when (and (bound-and-true-p evil-local-mode)
                 (not (evil-emacs-state-p)))
        (evil-insert 1))))

  (defun +org/insert-item-below (count)
    "Inserts a new heading, table cell or item below the current one."
    (interactive "p")
    (dotimes (_ count) (+org--insert-item 'below)))

  (defun +org/insert-item-above (count)
    "Inserts a new heading, table cell or item above the current one."
    (interactive "p")
    (dotimes (_ count) (+org--insert-item 'above)))
  )
#+end_src

** org-appear
:PROPERTIES:
:CUSTOM_ID: h:6E97D1D8-3E9B-455B-B126-413A707E7539
:END:
Automatically displays emphasis markers and links when the cursor is on them.

~things~ 
#+begin_src emacs-lisp
(use-package org-appear
  :straight (org-appear :type git :host github :repo "awth13/org-appear")
  :hook (org-mode . org-appear-mode)
  :init
  (setq org-appear-autoemphasis  t)
  (setq org-appear-autolinks t)
  (setq org-appear-autosubmarkers t)
  )
#+end_src

** org-roam
:PROPERTIES:
:CUSTOM_ID: h:37777EDB-7144-42DF-907B-506383270BA0
:END:
Instead of Obsidian, let's use org roam?

#+begin_src emacs-lisp :tangle no
(use-package org-roam
  :after org
  :init
  (setq org-roam-directory (file-truename "~/roam"))
  (setq org-roam-v2-ack t)
  (setq org-roam-capture-templates
        '(("d" "default" plain "%?" :target
           (file+head "personal/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n") :unnarrowed t)
          ("w" "work" plain "%?" :target
           (file+head "work/%<%Y%m%d%H%M%S>-${slug}.org"  "#+title: ${title}\n") :unnarrowed t)))
  :general
  (synthmacs/leader-keys
    "or" '(:ignore t :wk "org-roam")
    "orb" 'org-roam-buffer-toggle
    "orf" 'org-roam-node-find
    "org" 'org-roam-graph
    "ori" 'org-roam-node-insert
    "orc" 'org-roam-capture
    "ort" 'org-roam-tag-add
    "orr" 'org-roam-ref-add
    "ora" 'org-roam-alias-add
    ;; Dailies
    "orj" 'org-roam-dailies-capture-today
    "orJ" 'org-roam-dailies-goto-today
    )
  :config
  (org-roam-setup)
  ;; If using org-roam-protocol
  ;; (require 'org-roam-protocol)
  (add-to-list 'display-buffer-alist
               '(("*org-roam*"
                  (display-buffer-in-direction)
                  (direction . right)
                  (window-width . 0.33)
                  (window-height . fit-window-to-buffer))))
  
  )
#+end_src

** Obsidian
:PROPERTIES:
:CUSTOM_ID: h:490BB449-AB50-45E5-BB09-1DD9341D0C52
:END:
But we could also use obsidian style in emacs, and then have it appear in the actual vault. Neato?!

#+begin_src emacs-lisp :tangle no
(use-package obsidian
  :ensure t
  :demand t
  :config
  (obsidian-specify-path "~/MY_OBSIDIAN_FOLDER")
  (global-obsidian-mode t)
  :custom
  ;; This directory will be used for `obsidian-capture' if set.
  (obsidian-inbox-directory "Inbox")
  :bind (:map obsidian-mode-map
	      ;; Replace C-c C-o with Obsidian.el's implementation. It's ok to use another key binding.
	      ("C-c C-o" . obsidian-follow-link-at-point)
	      ;; Jump to backlinks
	      ("C-c C-b" . obsidian-backlink-jump)
	      ;; If you prefer you can use `obsidian-insert-link'
	      ("C-c C-l" . obsidian-insert-wikilink)))
#+end_src

* UI
:PROPERTIES:
:CUSTOM_ID: h:EA84335B-2A51-4B4A-9392-F116289EDB10
:header-args: :emacs-lisp :tangle ./synthmacs/synthmacs-ui.el
:END:
Here I'll be setting up my UI stuff. These are UI nicities, really, and not "needed". The basic setup of UI stuff took place in the [[#h:3D38D8F0-1B85-4265-9941-77A3A2FA235B][Core Emacs Setup]] section.

** Icons
:PROPERTIES:
:CUSTOM_ID: h:F4A9DF01-4EDA-4775-AAFD-C10B5C66CBED
:END:

*** nerd-icons
:PROPERTIES:
:CUSTOM_ID: h:1D9C5C8C-C62C-4932-A78B-64872690FA64
:END:

#+begin_src emacs-lisp
(use-package nerd-icons
  :init
  (setq nerd-icons-scale-factor 1.2)
  :custom
  ;; The Nerd Font you want to use in GUI
  ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;; but you can use any other Nerd Font if you want
  (nerd-icons-font-family "FiraCode Nerd Font"))
#+end_src

*** all-the-icons
:PROPERTIES:
:CUSTOM_ID: h:3A8C1F48-071A-41FF-A4D6-E8B860D1AD6E
:END:

#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p)
  :demand
  )
#+end_src

*** all-the-icons-completion
:PROPERTIES:
:CUSTOM_ID: h:6C8030B7-C36D-44E7-9267-6CF6B11639A6
:END:

#+begin_src emacs-lisp
(use-package all-the-icons-completion
  :after (marginalia all-the-icons)
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :init
  (all-the-icons-completion-mode))
#+end_src

** Themes
:PROPERTIES:
:CUSTOM_ID: h:07174251-A9E9-47E8-8AF3-AD5013CAC793
:END:

*** A variety of themes
:PROPERTIES:
:CUSTOM_ID: h:E8C6687E-0721-4F9C-AB46-D091401C3312
:END:
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)

  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

(use-package afternoon-theme)
(use-package alect-themes)
(use-package ample-theme)
(use-package ample-zen-theme)
(use-package badwolf-theme)
(use-package catppuccin-theme)
(use-package clues-theme)
(use-package color-theme-sanityinc-solarized)
(use-package color-theme-sanityinc-tomorrow)
(use-package cyberpunk-theme)
(use-package darktooth-theme)
(use-package flatland-theme)
(use-package gruvbox-theme)
(use-package jazz-theme)
(use-package kaolin-themes)
(use-package material-theme)
(use-package modus-themes)
(use-package monokai-theme)
(use-package seti-theme)
(use-package soothe-theme)
(use-package subatomic-theme)
(use-package sublime-themes)
#+end_src

*** solaire-mode
:PROPERTIES:
:CUSTOM_ID: h:49441D6C-6408-484B-91C9-8516B9A33B0B
:END:

#+begin_src emacs-lisp
(use-package solaire-mode
  :init
  (solaire-global-mode +1))
#+end_src

*** Theme functions
:PROPERTIES:
:CUSTOM_ID: h:BD6AA932-6150-4DD5-B27D-B35286DD7230
:END:
#+begin_src emacs-lisp
(defvar synthmacs--fallback-theme 'kaolin-bubblegum
  "Fallback theme if user theme cannot be applied.")

(defvar synthmacs--cur-theme nil
  "Internal variable storing currently loaded theme.")

(defvar synthmacs--user-themes '(kaolin-bubblegum
				 doom-challenger-deep
				 cyberpunk
				 jazz
				 afternoon
				 ample-zen
				 doom-1337
				 catppuccin
				 manoj-dark
				 doom-snazzy
				 kaolin-dark
				 doom-gruvbox
				 doom-old-hope
				 kaolin-aurora
				 doom-acario-dark
				 gruvbox-dark-hard
				 modus-vivendi
				 alect-black
				 modus-operandi
				 gruvbox-light-hard))

(defun synthmacs/load-theme (&optional theme)
  "Apply user theme."
  (if theme
      (progn
	(load-theme theme t)
	(setq-default synthmacs--cur-theme theme))
    (progn
      (load-theme synthmacs--fallback-theme t)
      (setq-default spacemacs--cur-theme synthmacs--fallback-theme))))

(defun synthmacs/load-random-theme ()
  (interactive)
  (let* ((size (length synthmacs--user-themes))
         (index (random size))
         (randomTheme (nth index synthmacs--user-themes)))
    (synthmacs/load-theme randomTheme)))

(defun synthmacs/cycle-synthmacs-theme (&optional backward)
  "Cycle through themes defined in `synthmacs-themes'.
When BACKWARD is non-nil, or with universal-argument, cycle backwards."
  (interactive "P")
  (let* (
	 ;; (theme-names (mapcar 'synthmacs--user-themes)
         (themes (if backward
		     (reverse synthmacs--user-themes)
		   synthmacs--user-themes))
         (next-theme
	  (car (or (cdr (memq synthmacs--cur-theme themes))
		   ;; if current theme isn't in cycleable themes, start
		   ;; over
		   themes))))
    (when synthmacs--cur-theme
      (disable-theme synthmacs--cur-theme))
    (let ((progress-reporter
           (make-progress-reporter
            (format "Loading theme %s..." next-theme))))
      (synthmacs/load-theme next-theme)
      (progress-reporter-done progress-reporter))))

(defun synthmacs/cycle-synthmacs-theme-backward ()
  "Cycle through themes defined in `dotsynthmacs-themes' backward."
  (interactive)
  (synthmacs/cycle-synthmacs-theme t))

(synthmacs/leader-keys
  "tt" '(:ignore t :wk "themes")
  "ttn" '(synthmacs/hydra-theme-cycle :wk "cycle-themes")
  "ttN" '(synthmacs/hydra-theme-cycle-backward :wk "cycle-themes-backwards")
  "ttr" '(synthmacs/hydra-theme-random :wk "random-theme"))

(defun synthmacs/hydra-theme-cycle ()
  (interactive)
  (synthmacs/cycle-synthmacs-theme)
  (synthmacs/hydra/cycle-themes/body))

(defun synthmacs/hydra-theme-cycle-backward ()
  (interactive)
  (synthmacs/cycle-synthmacs-theme t)
  (synthmacs/hydra/cycle-themes/body))

(defun synthmacs/hydra-theme-random ()
  (interactive)
  (synthmacs/load-random-theme)
  (synthmacs/hydra/cycle-themes/body))

(defhydra synthmacs/hydra/cycle-themes (:timeout 20)
  "
^Themes Menu
^^^^^^^^------------------------
[_n_]     cycle-theme
[_p_/_N_]   cycle-theme-backward
[_r_]     random-theme
[_q_] quit
"
  ("n" synthmacs/cycle-synthmacs-theme)
  ("p" synthmacs/cycle-synthmacs-theme-backward)
  ("N" synthmacs/cycle-synthmacs-theme-backward)
  ("r" synthmacs/load-random-theme)
  ("q" nil :exit t))

(synthmacs/load-random-theme)
#+end_src

** Navigation
:PROPERTIES:
:CUSTOM_ID: h:F723A922-5198-47CE-859C-F0643B7F3F85
:END:
#+begin_src emacs-lisp
(use-package winum
  :general
  (synthmacs/leader-keys
    "1" '(winum-select-window-1 :wk "winum-select-window-1")
    "2" '(winum-select-window-2 :wk "winum-select-window-2")
    "3" '(winum-select-window-3 :wk "winum-select-window-3")
    "4" '(winum-select-window-4 :wk "winum-select-window-4")
    "5" '(winum-select-window-5 :wk "winum-select-window-5")
    "6" '(winum-select-window-6 :wk "winum-select-window-6")
    "7" '(winum-select-window-7 :wk "winum-select-window-7")
    "8" '(winum-select-window-8 :wk "winum-select-window-8")
    "9" '(winum-select-window-9 :wk "winum-select-window-9"))
  :init
  (setq winum-auto-setup-mode-line nil
	winum-ignored-buffers '(" *which-key*"))
  (winum-mode))
#+end_src

*** ace-window
:PROPERTIES:
:CUSTOM_ID: h:C0A767D2-F7EE-4877-8D86-B83D3D3AE37E
:END:
#+begin_src emacs-lisp
(use-package ace-window
  :general
  (synthmacs/leader-keys
    "wD" '(ace-delete-window :wk "ace-delete-window")
    "wS" '(ace-swap-window :wk "ace-swap-window")
    ))
#+end_src

*** Avy
:PROPERTIES:
:CUSTOM_ID: h:935137F1-A96B-4580-9DC9-6B0BE5474F4D
:END:
#+begin_src emacs-lisp
(use-package avy
  :general
  (synthmacs/leader-keys
    "jj" '(avy-goto-char-timer :wk "avy-goto-char-timer")
    "jc" '(avy-goto-char :wk "avy-goto-char")
    "jl" '(avy-goto-line :wk "avy-goto-line")
    ))
#+end_src

** Modeline
:PROPERTIES:
:CUSTOM_ID: h:F2FD58B7-0A8E-423A-896D-7FDBFF2554F3
:END:
#+begin_src emacs-lisp
(use-package minions
  :hook (doom-modeline-mode . minions-mode))

(use-package doom-modeline
  :demand
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 45)
  (setq doom-modeline-project-detection 'projectile)
  (setq doom-modeline-icon t)
  (setq doom-modeline-major-mode-icon t)
  (setq doom-modeline-major-mode-color-icon t)
  (setq doom-modeline-buffer-state-icon t)
  (setq doom-modeline-buffer-modification-icon t)
  (setq doom-modeline-time-icon nil)
  (setq doom-modeline-buffer-encoding t)
  (setq doom-modeline-vcs-max-length 15)
  (setq doom-modeline-lsp t)
  (setq doom-modeline-modal-icon t)
  )
#+end_src

** Dashboard
:PROPERTIES:
:CUSTOM_ID: h:108BED42-7912-45EE-B0BD-364D4479319A
:END:
A nicer startup experience than just an empty buffer. Includes a nice useful list of files/projects.

#+begin_src emacs-lisp
(use-package dashboard
  :demand
  :init
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
  (setq dashboard-center-content t)
  (setq dashboard-startup-banner "~/.dotfiles/emacs/.emacs.d/synthmacs/assets/logo.txt")
  (setq dashboard-banner-logo-title "adudenamedruby's Emacs")
  ;; (setq dashboard-icon-type 'all-the-icons)
  (setq dashboard-projects-backend 'projectile)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-init-info t)
  (setq dashboard-items '((recents  . 5)
			  (projects . 5)))
  (setq dashboard-set-navigator t)
  :config
  (dashboard-setup-startup-hook)
  )
#+end_src

** which-key
:PROPERTIES:
:CUSTOM_ID: h:40130D60-680F-44CF-B7CD-FF38E97CB2EF
:END:
#+begin_src emacs-lisp
(setq which-key-idle-delay 0.4)
(use-package which-key
  :demand
  :general
  (synthmacs/leader-keys
    "?" 'which-key-show-top-level)
  :init
  (setq which-key-side-window-location 'bottom)
  (setq which-key-sort-order #'which-key-key-order-alpha)
  ;;(setq which-key-sort-order #'which-key-prefix-then-key-order)
  (setq which-key-sort-uppercase-first nil)
  (setq which-key-add-column-padding 1)
  (setq which-key-max-display-columns nil)
  (setq which-key-min-display-lines 6)
  (setq which-key-side-window-slot -10)
  (setq which-key-side-window-max-height 0.25)
  (setq which-key-max-description-length 25)
  (setq which-key-allow-imprecise-window-fit t)
  (setq which-key-separator " → ")
  (setq which-key-prefix-prefix "+")
  :config
  (which-key-mode 1)
  ;; Rename the entry for M-1 in the SPC h k Top-level bindings,
  ;; and for 1 in the SPC- Spacemacs root, to 1..9
  (push '(("\\(.*\\)1" . "winum-select-window-1") .
	  ("\\11..9" . "select window 1..9"))
	which-key-replacement-alist)

  ;; Hide the entries for M-[2-9] in the SPC h k Top-level bindings,
  ;; and for [2-9] in the SPC- Spacemacs root
  (push '((nil . "winum-select-window-[2-9]") . t)
	which-key-replacement-alist))
#+end_src

** rainbow-delimiters
:PROPERTIES:
:CUSTOM_ID: h:67838E6E-FA0F-4C8A-A56B-1939A6940C6E
:END:

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Popup management
:PROPERTIES:
:CUSTOM_ID: h:EA42A190-FB24-4B06-9E3E-C6EBDD23BD5B
:END:
Taken from [[https://emacs.stackexchange.com/questions/46210/reuse-help-window][this stackexchange answer]].

#+begin_src emacs-lisp
(use-package emacs
  :init
  (setq display-buffer-alist
        `((,(rx bos (or "*Apropos*" "*Help*" "*helpful" "*info*" "*Summary*") (0+ not-newline))
           (display-buffer-reuse-mode-window display-buffer-below-selected)
           (window-height . 0.33)
           (mode apropos-mode help-mode helpful-mode Info-mode Man-mode))))
  )
#+end_src

** centered-cursor-mode
:PROPERTIES:
:CUSTOM_ID: h:097E7F3B-CCB0-4B8F-887F-01A6101AB77E
:END:
Sometimes, I want my cursor to be stuck in the center!
#+begin_src emacs-lisp
(use-package centered-cursor-mode
  :general
  (synthmacs/leader-keys
    "t=" '((lambda () (interactive) (centered-cursor-mode 'toggle)) :wk "center cursor")
    )
  )
#+end_src

** highlight-indent-guides
:PROPERTIES:
:CUSTOM_ID: h:35269B3F-EFD1-4DB9-83F3-85E82AD1435F
:END:
It's useful to know indents, and I like seeing it, so let's do it!

#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  :init
  ;; (setq highlight-indent-guides-method 'column)
  ;; (setq highlight-indent-guides-method 'bitmap)
  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-character ?‖)
  (setq highlight-indent-guides-responsive 'top)
  ;; (setq highlight-indent-guides-responsive 'stack)
  ;; (setq highlight-indent-guides-auto-enabled nil)
  ;; (set-face-background 'highlight-indent-guides-odd-face "darkgray")
  ;; (set-face-background 'highlight-indent-guides-even-face "dimgray")
  ;; (set-face-foreground 'highlight-indent-guides-character-face "dimgray")
  )
#+end_src


** Line numbers
:PROPERTIES:
:CUSTOM_ID: h:AEE6BF5E-C716-41A4-80E6-45512D31F9B5
:END:
#+begin_src emacs-lisp
(use-package emacs
  :init
  ;; ------------------ Line Numbering ---------------------
  ;; set type of line numbering (global variable)
  (setq display-line-numbers-type 'relative)
  ;; activate line numbering in all buffers/modes
  (global-display-line-numbers-mode 1)

  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; Activate line numbering in programming modes
  ;; (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  )
#+end_src

** Fill column & modeline column info
:PROPERTIES:
:CUSTOM_ID: h:9F8FCA21-383E-42FA-BA7D-59DD3ECEB950
:END:
#+begin_src emacs-lisp
(use-package emacs
  ;; :hook (prog-mode . display-fill-column-indicator-mode)
  :init
  (setq-default fill-column 85)
  (global-display-fill-column-indicator-mode)

  ;; Columns number in the modeline
  (setq column-number-mode t)
  )
#+end_src

* Completion framework
:PROPERTIES:
:CUSTOM_ID: h:FB3661CB-A573-40B6-B331-449D77DBD199
:header-args: :emacs-lisp :tangle ./synthmacs/synthmacs-completion-framework.el
:END:

** Vertico
:PROPERTIES:
:CUSTOM_ID: h:5D5A0CE5-8CC2-4134-8CCB-52074A0B8654
:END:

*** vertico
:PROPERTIES:
:CUSTOM_ID: h:305A854E-184C-49CC-A5D5-7BD424A36F82
:END:
#+begin_src emacs-lisp
(use-package vertico
  :straight (vertico :files (:defaults "extensions/*")
                     :includes (vertico-indexed
                                vertico-flat
                                vertico-grid
                                vertico-mouse
                                ;; vertico-quick
                                vertico-buffer
                                vertico-repeat
                                vertico-reverse
                                vertico-directory
                                vertico-multiform
                                vertico-unobtrusive
                                ))
  :demand
  :general
  ;; (:keymaps 'minibuffer-local-map
  (:keymaps 'vertico-map
	    "C-~" #'synthmacs/minibuffer-backwards-kill
	    "C-h" #'vertico-directory-delete-word
	    )
  
  ;; :hook
  ;; ((minibuffer-setup . vertico-repeat-save) ; Make sure vertico state is saved for `vertico-repeat'
  ;;  (rfn-eshadow-update-overlay . vertico-directory-tidy) ; Clean up file path when typing
  ;;  ) 
  :init
  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t)

  :config
  (vertico-mode)

  ;; Prefix the current candidate with “» ”. From
  ;; https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow
  (advice-add #'vertico--format-candidate :around
              (lambda (orig cand prefix suffix index _start)
                (setq cand (funcall orig cand prefix suffix index _start))
                (concat
                 (if (= vertico--index index)
                     (propertize "» " 'face 'vertico-current)
                   "  ")
                 cand)))
  )
#+end_src

*** savehist
:PROPERTIES:
:CUSTOM_ID: h:C124D838-E80B-45F5-B2E7-EBAF277BFDF0
:END:
Persist history over Emacs restarts. Vertico sorts by history position.

#+begin_src emacs-lisp
(use-package savehist
  :init
  (savehist-mode))
#+end_src

*** Emacs & Vertico
:PROPERTIES:
:CUSTOM_ID: h:3997A77C-E1E4-4B26-88DA-ECAE5794367B
:END:
A few more useful Emacs configs for Vectico

#+begin_src emacs-lisp
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)

  ;; Focus the help window when bringing it up, so that I can quit it easily
  (setq help-window-select t)
  )
#+end_src

*** Orderless
:PROPERTIES:
:CUSTOM_ID: h:CF8C8DA3-23A3-4CF0-80A9-3DB977BB0182
:END:
#+begin_src emacs-lisp
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Consult
:PROPERTIES:
:CUSTOM_ID: h:AFC23C2A-A17F-4151-A2E7-66D57A2590C2
:END:
#+begin_src emacs-lisp
(use-package consult
  :commands (consult-ripgrep)
  :general
  (synthmacs/leader-keys
    "/" '(synthmacs/consult-ripgrep :wk "search project")

    "bb" 'consult-buffer

    "fr" 'consult-recent-file

    "so" 'consult-outline
    "sp" '(synthmacs/consult-ripgrep :wk "ripgrep project")
    "ss" '(consult-line :wk "swoop")

    "ttt" '(consult-theme :wk "consult-themes")
    )
  ;; Replace bindings. Lazily loaded due by `use-package'.
  ;; :bind (;; C-c bindings in `mode-specific-map'
  ;; ("C-c M-x" . consult-mode-command)
  ;; ("C-c h" . consult-history)
  ;; ("C-c k" . consult-kmacro)
  ;; ("C-c m" . consult-man)
  ;; ("C-c i" . consult-info)
  ;; ([remap Info-search] . consult-info)
  ;; C-x bindings in `ctl-x-map'
  ;; ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
  ;; ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
  ;; ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
  ;; ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
  ;; ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
  ;; ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
  ;; Custom M-# bindings for fast register access
  ;; ("M-#" . consult-register-load)
  ;; ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
  ;; ("C-M-#" . consult-register)
  ;; ;; Other custom bindings
  ;; ("M-y" . consult-yank-pop)                ;; orig. yank-pop
  ;; M-g bindings in `goto-map'
  ;; ("M-g e" . consult-compile-error)
  ;; ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
  ;; ("M-g g" . consult-goto-line)             ;; orig. goto-line
  ;; ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
  ;; ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
  ;; ("M-g m" . consult-mark)
  ;; ("M-g k" . consult-global-mark)
  ;; ("M-g i" . consult-imenu)
  ;; ("M-g I" . consult-imenu-multi)
  ;; M-s bindings in `search-map'
  ;; ("M-s d" . consult-find)
  ;; ("M-s D" . consult-locate)
  ;; ("M-s g" . consult-grep)
  ;; ("M-s G" . consult-git-grep)
  ;; ("M-s r" . consult-ripgrep)
  ;; ("M-s l" . consult-line)
  ;; ("M-s L" . consult-line-multi)
  ;; ("M-s k" . consult-keep-lines)
  ;; ("M-s u" . consult-focus-lines)
  ;; Isearch integration
  ;; ("M-s e" . consult-isearch-history)
  ;; :map isearch-mode-map
  ;; ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
  ;; ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
  ;; ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
  ;; ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
  ;; Minibuffer history
  ;; :map minibuffer-local-map
  ;; ("M-s" . consult-history)                 ;; orig. next-matching-history-element
  ;; ("M-r" . consult-history)                 ;; orig. previous-matching-history-element
  ;; )

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init
  (defun synthmacs/consult-ripgrep ()
    "Search org-roam directory using consult-ripgrep. With live-preview."
    (interactive)
    (let ((consult-ripgrep-command "rg --no-ignore --hidden --ignore-case --line-number"))
      (consult-ripgrep
       (if (projectile-project-p)
	   (projectile-project-root)
	 ""))))


  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"
  (setq consult-ripgrep-args "rg --null --line-buffered --no-ignore --hidden --color=never --max-columns=1000 --path-separator / --smart-case --no-heading --with-filename --line-number --search-zip")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)

  )
#+end_src

** Marginalia
:PROPERTIES:
:CUSTOM_ID: h:FBAFE981-A3D6-4CE7-B9EE-E4BC74F56B1F
:END:
#+begin_src emacs-lisp
(use-package marginalia
  :after vertico
  :general
  (:keymaps 'minibuffer-local-map
	    "M-A" 'marginalia-cycle)
  :init
  ;; Marginalia must be actived in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode)
  (with-eval-after-load 'projectile
    (add-to-list 'marginalia-command-categories '(projectile-find-file . file)))
  )
#+end_src

** Embark
:PROPERTIES:
:CUSTOM_ID: h:0CEA8416-E61B-4CF2-9DD3-51F79BE7EE4F
:END:

test

#+begin_src emacs-lisp
(use-package embark
  :after vertico
  :general
  (general-define-key
   :states 'normal
   "C-." nil)
  (general-nmap "C-." 'embark-act)
  (vertico-map "C-." #'embark-act)
  (:keymaps 'embark-general-map
	    "G" #'synthmacs/embark-google-search)
  (synthmacs/leader-keys
    "hb" '(embark-bindings :wk "embark-bindings"))

  :init
  (defun synthmacs/embark-google-search (term)
    "An action to search for anything at point in Google."
    (interactive "sSearch Term: ")
    (browse-url
     (format "http://google.com/search?q=%s" term)))


  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
  ;; strategy, if you want to see the documentation from multiple providers.
  (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config
  ;; (setq embark-prompter 'embark-completing-read-prompter)
  ;; (setq embark-indicators '(embark-minimal-indicator))
  ;; Sets the buffer at the bottom. But then it must be scrolled with C-M-v or C-M-S-v
  ;; (setq embark-verbose-indicator-display-action '(display-buffer-at-bottom))

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))
  )


;; --------------- Use Embark in WhichKey -------------
(defun embark-which-key-indicator ()
  "An embark indicator that displays keymaps using which-key.
The which-key help message will show the type and value of the
current target followed by an ellipsis if there are further
targets."
  (lambda (&optional keymap targets prefix)
    (if (null keymap)
        (which-key--hide-popup-ignore-command)
      (which-key--show-keymap
       (if (eq (plist-get (car targets) :type) 'embark-become)
           "Become"
         (format "Act on %s '%s'%s"
                 (plist-get (car targets) :type)
                 (embark--truncate-target (plist-get (car targets) :target))
                 (if (cdr targets) "…" "")))
       (if prefix
           (pcase (lookup-key keymap prefix 'accept-default)
             ((and (pred keymapp) km) km)
             (_ (key-binding prefix 'accept-default)))
         keymap)
       nil nil t (lambda (binding)
                   (not (string-suffix-p "-argument" (cdr binding))))))))

;; (setq embark-indicators
;;   '(embark-which-key-indicator
;;     embark-highlight-indicator
;;     embark-isearch-highlight-indicator))

(defun embark-hide-which-key-indicator (fn &rest args)
  "Hide the which-key indicator immediately when using the completing-read prompter."
  (which-key--hide-popup-ignore-command)
  (let ((embark-indicators
         (remq #'embark-which-key-indicator embark-indicators)))
    (apply fn args)))

;; (advice-add #'embark-completing-read-prompter
;;             :around #'embark-hide-which-key-indicator)

;; -------- Package actions using Straight -------------
;; (defvar-keymap embark-straight-map
;;   :parent embark-general-map
;;   "u" #'straight-visit-package-website
;;   "r" #'straight-get-recipe
;;   "i" #'straight-use-package
;;   "c" #'straight-check-package
;;   "F" #'straight-pull-package
;;   "f" #'straight-fetch-package
;;   "p" #'straight-push-package
;;   "n" #'straight-normalize-package
;;   "m" #'straight-merge-package)

;; (add-to-list 'embark-keymap-alist '(straight . embark-straight-map))

(add-to-list 'marginalia-prompt-categories '("recipe\\|package" . straight))
#+end_src

** embark-consult
:PROPERTIES:
:CUSTOM_ID: h:AC513132-664A-4477-A954-B61B4CCAF219
:END:

#+begin_src emacs-lisp
(use-package embark-consult
  :after (embark consult)
					; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** wgrep
:PROPERTIES:
:CUSTOM_ID: h:B61A56F5-8DE2-4317-99A2-400E08DCFB87
:END:
After running ~embark-export~, we can edit the results with ~wgrep~ and commit the edits. This is extremely powerful for refactorings such as changing the name of a class or a function across files in the project. For more, check out [[https://lambdaland.org/posts/2023-05-31_warp_factor_refactor/][Warp Refactoring in Emacs]]

#+begin_src emacs-lisp
(use-package wgrep
  ;; :general
  ;; (grep-mode-may "W" 'wgrep-change-to-wgrep-mode)
  :init
  (setq wgrep-auto-save-buffer t)
  (setq wgrep-change-readonly-file t)
  )
#+end_src

** Corfu
:PROPERTIES:
:CUSTOM_ID: h:4B6D88C2-0393-4462-9C06-37BD9160B415
:END:

*** corfu
:PROPERTIES:
:CUSTOM_ID: h:D4533EA4-E94F-4A6D-98D9-4B02123AC78B
:END:
Corfu is the completion framework while writing code.
#+begin_src emacs-lisp
(use-package corfu
  :straight (corfu :files (:defaults "extensions/*")
		   :includes (corfu-popupinfo))
  :hook ((prog-mode . corfu-mode)
	 (org-mode . corfu-mode)
	 (corfu-mode . corfu-popupinfo-mode))
  :bind
  (:map corfu-map
	("C-d" . corfu-popupinfo-scroll-down)
	("C-u" . corfu-popupinfo-scroll-up)
	("C-i" . corfu-popupinfo-toggle))
  :general
  (synthmacs/leader-keys
    "ta" '(global-corfu-mode :wk "auto-completion"))
  :init
  (setq corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (setq corfu-auto t)                 ;; Enable auto completion
  (setq corfu-min-width 80)
  (setq corfu-max-width corfu-min-width)
  
  :custom
  ;; (corfu-auto-delay 0.0)
  ;; (corfu-auto-prefix 0)
  (corfu-separator ?\s)          ;; Orderless field separator
  (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin
  (corfu-popupinfo-delay 1)
  (corfu-popupinfo-max-height 15)
  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since Dabbrev can be used globally (M-/).
  ;; See also `corfu-exclude-modes'.
  )
#+end_src

*** Emacs & Corfu
:PROPERTIES:
:CUSTOM_ID: h:5B941926-1EC3-46AC-BBF9-B50C51D7950F
:END:
#+begin_src emacs-lisp
;; A few more useful configurations...
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))

#+end_src

*** kind-icon
:PROPERTIES:
:CUSTOM_ID: h:EC56AC02-E4A3-4EC1-9CA2-8FD69A2DC6B7
:END:
Icons in corfu? Yes please.
#+begin_src emacs-lisp
(use-package kind-icon
  :after corfu
  :demand
  :init
  (setq kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  (setq kind-icon-blend-background nil)
  (setq kind-icon-blend-frac 0.08)
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src


* Useful Tools
:PROPERTIES:
:CUSTOM_ID: h:B57C03F6-2111-489A-9303-B1A06C95EFF5
:header-args: :emacs-lisp :tangle ./synthmacs/synthmacs-tools.el
:END:

** Dirvish
:PROPERTIES:
:CUSTOM_ID: h:895ADECA-8F1A-4FBB-A930-871EE0B6D4D8
:END:

#+begin_src emacs-lisp :tangle no
(use-package dirvish
  :init
  (dirvish-override-dired-mode)
  :config
  (setq delete-by-moving-to-trash t
	dirvish-attributes
	'(all-the-icons file-size collapse subtree-state vc-state)
	dirvish-side-width 45
	dirvish-side-follow-mode t
	))

(synthmacs/leader-keys
  "fm" '(dirvish :wk "file manager")
  "ft" '(dirvish-side :wk "file tree"))

;; Addtional syntax highlighting for dired
(use-package diredfl
  :hook
  ((dired-mode . diredfl-mode)
   ;; highlight parent and directory preview as well
   (dirvish-directory-view-mode . diredfl-mode))
  :config
  (set-face-attribute 'diredfl-dir-name nil :bold t))
#+end_src

** Git/VCS Integration
:PROPERTIES:
:CUSTOM_ID: h:38F6723F-CA92-401B-BE94-8130078BAD7E
:END:

*** Magit
:PROPERTIES:
:CUSTOM_ID: h:A8A112D1-5F39-4624-993C-FCB9945BFA3E
:END:
*The* killer feature for Emacs?
#+begin_src emacs-lisp
(use-package magit
  ;; :custom
  ;; (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
  :general
  (synthmacs/leader-keys
    "gb" 'magit-blame-addition
    "gc" 'magit-clone
    "gd" 'magit-dispatch
    "gf" 'magit-file-dispatch
    "gh" 'magit-info
    "gi" 'magit-init
    "gl" 'magit-log
    "gs" 'magit-status)
  (general-nmap
    :keymaps '(magit-status-mode-map
	       magit-stash-mode-map
               magit-revision-mode-map
               magit-process-mode-map
               magit-diff-mode-map)
    "TAB" #'magit-section-toggle
    "<escape>" #'transient-quit-one)
  :init
  (setq magit-log-arguments '("--graph" "--decorate" "--color"))
  (setq git-commit-fill-column 72)
  :config
  (evil-define-key* '(normal visual) magit-mode-map
    "zz" #'evil-scroll-line-to-center)
  )
#+end_src

*** Forge
:PROPERTIES:
:CUSTOM_ID: h:1F20D642-C0E7-4390-A881-9E9EE153D2E8
:END:
#+begin_src emacs-lisp

;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
;; (use-package forge)
#+end_src

*** git-gutter
:PROPERTIES:
:CUSTOM_ID: h:38246314-1E80-406F-A981-53092B7DF6FC
:END:
#+begin_src emacs-lisp
(use-package git-gutter
  :init
  (global-git-gutter-mode +1)
  :config
  (setq git-gutter:update-interval 0.02))
#+end_src

*** git-gutter-fringe
:PROPERTIES:
:CUSTOM_ID: h:82BEAA64-6A3D-4416-8886-F4C4137722E4
:END:
#+begin_src emacs-lisp
(use-package git-gutter-fringe
  :config
  (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))

#+end_src

** Helpful
:PROPERTIES:
:CUSTOM_ID: h:949B41C1-C4A4-484B-9A6A-76A07DBBFCB1
:END:
#+begin_src emacs-lisp
(use-package helpful
  :after evil
  :general
  (synthmacs/leader-keys
    "h." '(helpful-at-point :wk "helpful-at-point")
    "hc" '(helpful-command :wk "describe-command")
    "hf" '(helpful-callable :wk "describe-function")
    "hk" '(helpful-key :wk "describe-key")
    "hv" '(helpful-variable :wk "describe-variable"))
  :init
  (setq evil-lookup-func #'helpfus-at-point)
  :bind
  ([remap describe-function] . helpful-callable)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key] . helpful-key)
  )
#+end_src

** Projectile
:PROPERTIES:
:CUSTOM_ID: h:1653A50A-82D1-416F-830C-00B886B5A241
:END:
#+begin_src emacs-lisp
(use-package projectile
  :demand
  :diminish
  :general
  (synthmacs/leader-keys
    "pf" '(projectile-find-file :wk "projectile-find-file")
    "pk" '(projectile-kill-buffers :wk "projectile-kill-buffers")
    "pp" '(projectile-switch-project :wk "projectile-switch-project")
    "pr" '(projectile-recentf :wk "projectile-recentf")
    "pm" '(projectile-command-map :wk "projectile menu"))
  :init
  (setq projectile-completion-system 'auto)
  (setq projectile-project-root-files '(".envrc" ".projectile" "project.clj" "deps.edn"))
  (setq projectile-switch-project-action 'projectile-commander)
  ;; Do not include straight repos (emacs packages) to project list
  (setq projectile-ignored-project-function
        (lambda (project-root)
          (string-prefix-p (expand-file-name "straight/" user-emacs-directory) project-root)))
  :config
  (projectile-mode +1)
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/Developer")
    (setq projectile-project-search-path '("~/Developer")))
  (setq projectile-switch-project-action #'projectile-dired)
  ;; projectile commander methods
  (setq projectile-commander-methods nil)
  (def-projectile-commander-method ?? "Commander help buffer."
				   (ignore-errors (kill-buffer projectile-commander-help-buffer))
				   (with-current-buffer (get-buffer-create projectile-commander-help-buffer)
				     (insert "Projectile Commander Methods:\n\n")
				     (dolist (met projectile-commander-methods)
				       (insert (format "%c:\t%s\n" (car met) (cadr met))))
				     (goto-char (point-min))
				     (help-mode)
				     (display-buffer (current-buffer) t))
				   (projectile-commander))
  (def-projectile-commander-method ?t
				   "Open a *shell* buffer for the project."
				   (projectile-run-vterm))
  (def-projectile-commander-method ?\C-? ;; backspace
				   "Go back to project selection."
				   (projectile-switch-project))
  (def-projectile-commander-method ?d
				   "Open project root in dired."
				   (projectile-dired))
  (def-projectile-commander-method ?f
				   "Find file in project."
				   (projectile-find-file))
  (def-projectile-commander-method ?s
				   "Ripgrep in project."
				   (consult-ripgrep))
  (def-projectile-commander-method ?g
				   "Git status in project."
				   (projectile-vc))
  )

(use-package consult-projectile)
#+end_src

** Rg
:PROPERTIES:
:CUSTOM_ID: h:BFB3F21C-B7E7-4057-AF46-5B9C1A6DEF0C
:END:
#+begin_src emacs-lisp
(use-package rg
  :ensure-system-package rg)
#+end_src

** undo-fu
:PROPERTIES:
:CUSTOM_ID: h:89E5605D-6D37-4912-850A-3B10C21F6F0A
:END:
#+begin_src emacs-lisp
(use-package undo-fu
  :demand
  :general
  (:states 'normal
           "u" 'undo-fu-only-undo
           "s-z" 'undo-fu-only-undo
           "\C-r" 'undo-fu-only-redo))
#+end_src

** WS-Butler
:PROPERTIES:
:CUSTOM_ID: h:C8E39F4E-D75F-4031-8205-F1A7F865B91A
:END:

#+begin_src emacs-lisp
(use-package ws-butler
  :init
  ;; (ws-butler-global-mode 1)
  (add-hook 'prog-mode-hook #'ws-butler-mode))
#+end_src

** Olivetti Mode
:PROPERTIES:
:CUSTOM_ID: h:4B55AE32-102E-419B-844F-559FF8C3A165
:END:
Olivetti mode is a nice alignment of emacs for prose writing.

#+begin_src emacs-lisp
  (use-package olivetti
    :general
    (synthmacs/leader-keys
      "to" 'olivetti-mode)
    :init
    (setq olivetti-body-width 100)
    (setq olivetti-recall-visual-line-mode-entry-state t))
#+end_src

** Vterm
:PROPERTIES:
:CUSTOM_ID: h:AAAB0E92-4955-4DC6-840A-9A10B727248F
:END:

*** vterm
:PROPERTIES:
:CUSTOM_ID: h:D95937AD-2693-4819-8CB5-DCE2BA47F1E0
:END:
#+begin_src emacs-lisp
(use-package vterm
  :general
  (general-imap
    :keymaps 'vterm-mode-map
    "M-l" 'vterm-send-right
    "M-h" 'vterm-send-left)
  :config
  (setq vterm-shell (executable-find "zsh")
        vterm-max-scrollback 10000))
#+end_src

*** vterm-toggle
:PROPERTIES:
:CUSTOM_ID: h:9F540D5F-5081-4D3A-BC30-F63498CB63DF
:END:
#+begin_src emacs-lisp
(use-package vterm-toggle
  :general
  (synthmacs/leader-keys
    "'" 'vterm-toggle)
  )
#+end_src

** Transient
:PROPERTIES:
:CUSTOM_ID: h:99427354-9962-497A-B0F7-0BB54EC5D10F
:END:
#+begin_src emacs-lisp
(use-package transient
  :general
  (synthmacs/leader-keys
    "h h" 'synthmacs/help-transient)
  :config
  (transient-define-prefix synthmacs/help-transient ()
    ["Help Commands"
     ["Mode & Bindings"
      ("m" "Mode" describe-mode)
      ("b" "Major Bindings" which-key-show-full-major-mode)
      ("B" "Minor Bindings" which-key-show-full-minor-mode-keymap)
      ("d" "Descbinds" describe-bindings)
      ]
     ["Describe"
      ("c" "Command" helpful-command)
      ("f" "Function" helpful-callable)
      ("v" "Variable" helpful-variable)
      ("k" "Key" helpful-key)
      ]
     ["Info on"
      ("C-c" "Emacs Command" Info-goto-emacs-command-node)
      ("C-f" "Function" info-lookup-symbol) 
      ("C-v" "Variable" info-lookup-symbol)
      ("C-k" "Emacs Key" Info-goto-emacs-key-command-node)
      ]
     ["Goto Source"
      ("L" "Library" find-library)
      ("F" "Function" find-function)
      ("V" "Variable" find-variable)
      ("K" "Key" find-function-on-key)
      ]
     ]
    [
     ["Internals"
      ("e" "Echo Messages" view-echo-area-messages)
      ("l" "Lossage" view-lossage)
      ]
     ["Describe"
      ("s" "Symbol" helpful-symbol)
      ("." "At Point" helpful-at-point)
      ;; ("C-f" "Face" counsel-describe-face)
      ("w" "Where Is" where-is)
      ("=" "Position" what-cursor-position)
      ]
     ["Info Manuals"
      ("C-i" "Info" info)
      ("C-4" "Other Window" info-other-window)
      ("C-e" "Emacs" info-emacs-manual)
      ;; ("C-l" "Elisp" info-elisp-manual)
      ]
     ["Exit"
      ("q" "Quit" transient-quit-one)
      ("<escape>" "Quit" transient-quit-one)
      ]
     ;; ["External"
     ;;  ("W" "Dictionary" lookup-word-at-point)
     ;;  ("D" "Dash" dash-at-point)
     ;;  ]
     ]
    )
  )
#+end_src

*** Transient increase/decrease font size
:PROPERTIES:
:CUSTOM_ID: h:B2B436F2-7763-472F-A1FE-3CA3B1A1CA52
:END:

#+begin_src emacs-lisp
(use-package transient
  :general
  (synthmacs/leader-keys
    "tx" 'synthmacs/font-size-transient)
  :config
  (transient-define-prefix synthmacs/font-size-transient ()
    "Change font size"
    ["Font size"
     ("+" "Increase" (lambda ()
		       (interactive)
		       (progn
			 (text-scale-increase)
			 (synthmacs/font-size-transient))))
     ("-" "Decrease" (lambda ()
		       (interactive)
		       (progn
			 (text-scale-decrease)
			 (synthmacs/font-size-transient))))
     ])
  )
#+end_src


* Programming Environment
:PROPERTIES:
:CUSTOM_ID: h:2E967F87-8304-4262-B5BF-3286ACA7211B
:header-args: :emacs-lisp :tangle ./synthmacs/synthmacs-programming.el
:END:

** LSP
:PROPERTIES:
:CUSTOM_ID: h:222F2EE3-FD70-4274-AABC-759B5F7556C5
:END:

*** lsp-mode
:PROPERTIES:
:CUSTOM_ID: h:72DF6BA8-0E4C-4292-9D6D-B28248978A9F
:END:
#+begin_src emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook
  ((lsp-mode . (lambda () (setq-local evil-lookup-func #'lsp-describe-thing-at-point)))
   (lsp-mode . lsp-enable-which-key-integration))
  ;; :general
  ;; (synthmacs/local-leader-keys
  ;;   :states 'normal
  ;;   :keymaps 'lsp-mode-map
  ;;   "i" '(:ignore t :which-key "import")
  ;;   "io" '(lsp-organize-imports :wk "optimize")
  ;;   "l" '(:keymap lsp-command-map :wk "lsp")
  ;;   "a" '(lsp-execute-code-action :wk "code action")  
  ;;   "r" '(lsp-rename :wk "rename"))
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  ;; (setq lsp-restart 'ignore)
  ;;   (setq lsp-eldoc-enable-hover nil)
  ;;   (setq lsp-enable-file-watchers nil)
  ;;   (setq lsp-signature-auto-activate nil)
  ;;   (setq lsp-modeline-diagnostics-enable nil)
  ;;   (setq lsp-keep-workspace-alive nil)
  ;;   (setq lsp-auto-execute-action nil)
  ;;   (setq lsp-before-save-edits nil)
  ;;   (setq lsp-headerline-breadcrumb-enable nil)
  ;;   (setq lsp-diagnostics-provider :none)
  )
#+end_src

*** lsp-ui
:PROPERTIES:
:CUSTOM_ID: h:5F80D574-943C-4E55-B3E7-7BFFC02A74CA
:END:
#+begin_src emacs-lisp
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :general
  (synthmacs/local-leader-keys
    "h" 'lsp-ui-doc-show
    "H" 'lsp-ui-doc-hide)
  (lsp-ui-peek-mode-map
   :states 'normal
   "C-n" 'lsp-ui-peek--select-next
   "C-p" 'lsp-ui-peek--select-prev)
  (outline-mode-map
   :states 'normal
   "C-j" 'nil
   "C-k" 'nil)
  :init
  (setq lsp-ui-doc-show-with-cursor nil)
  (setq lsp-ui-doc-show-with-mouse nil)
  (setq lsp-ui-peek-always-show t)
  (setq lsp-ui-peek-fontify 'always)
  :custom
  (lsp-ui-doc-position 'bottom)
  )
#+end_src

#+begin_src emacs-lisp
(use-package lsp-treemacs
  :after lsp)
#+end_src

** DAP
:PROPERTIES:
:CUSTOM_ID: h:B978949E-16C8-45D1-B8DE-7A47D10FFDCA
:END:

#+begin_src emacs-lisp :tangle no
(use-package dap-mode
  :hook
  ((dap-mode . corfu-mode)
   (dap-terminated . synthmacs/hide-debug-windows)
   (dap-session-created . (lambda (_arg) (projectile-save-project-buffers)))
   (dap-ui-repl-mode . (lambda () (setq-local truncate-lines t))))
  :general
  (synthmacs/local-leader-keys
    :states '(normal)
    :keymaps '(python-mode-map dap-ui-repl-mode-map)
    "d d" '(dap-debug :wk "debug")
    "d b" '(dap-breakpoint-toggle :wk "breakpoint toggle")
    "d B" '(dap-ui-breakpoints-list :wk "breakpoint list")
    "d c" '(dap-continue :wk "continue")
    "d n" '(dap-next :wk "next")
    "d e" '(dap-eval-thing-at-point :wk "eval")
    "d i" '(dap-step-in :wk "step in")
    "d l" '(dap-debug-last :wk "step in")
    "d q" '(dap-disconnect :wk "quit")
    "d r" '(dap-ui-repl :wk "repl")
    "d h" '(dap-hydra :wk "hydra")
    "d i" '(synthmacs/dap-inspect-df :wk "view df")
    "d I" '(synthmacs/dap-inspect-df2 :wk "view df2")
    ;; "d t" '(synthmacs/dap-dtale-df :wk "dtale df")
    )
  (:keymaps 'dap-ui-repl-mode-map
            "<backtab>" 'dabbrev-completion
            "TAB" 'synthmacs/py-indent-or-complete)
  :init
  ;; (defun synthmacs/dap-dtale-df (dataframe)
  ;;   "Show df in tale in default browser"
  ;;   (interactive (list (read-from-minibuffer "DataFrame: " (evil-find-symbol nil))))
  ;;   (dap-eval (concat "import dtale; dtale.show(" dataframe ", open_browser=True)")))
  (setq synthmacs/dap-temp-dataframe-buffer  "*inspect-df*")
  (setq synthmacs/dap-temp-dataframe-path "~/tmp-inspect-df.csv")
  (defun synthmacs/dap-inspect-df (dataframe)
    "Save the df to csv and open the file with csv-mode"
    (interactive (list (read-from-minibuffer "DataFrame: " (evil-find-symbol nil))))
    (dap-eval (format  "%s.to_csv('%s', index=False)" dataframe synthmacs/dap-temp-dataframe-path))
    (sleep-for 1)
    (find-file-other-window synthmacs/dap-temp-dataframe-path)
    )
  (defun synthmacs/dap-inspect-df2 (dataframe)
    "Save the df to csv and open the file with csv-mode"
    (interactive (list (read-from-minibuffer "DataFrame: " (evil-find-symbol nil))))
    (dap-eval (concat dataframe ".to_csv('~/tmp-inspect-df2.csv', index=False)"))
    (sleep-for 1)
    (with-current-buffer 
        (display-buffer
         (with-current-buffer (find-file-noselect "~/tmp-inspect-df2.csv")
           (rename-buffer "*inspect-df2*"))
         '((;display-buffer-in-side-window
            display-buffer-reuse-window)
           (side . right)
           (window-width . 0.5)
           )))
    )
  ;; prevent minibuffer prompt about reloading from disk
  (setq revert-without-query '("~/tmp-inspect-df.csv"))
  ;; (setq dap-auto-configure-features '(locals repl))
  (setq dap-auto-configure-features '(sessions repl))
  (setq dap-python-debugger 'debugpy)
  ;; show stdout
  (setq dap-auto-show-output t)
  (setq dap-output-window-min-height 10)
  (setq dap-output-window-max-height 200)
  (setq dap-overlays-use-overlays nil)
  ;; hide stdout window  when done
  (defun synthmacs/hide-debug-windows (session)
    "Hide debug windows when all debug sessions are dead."
    (unless (-filter 'dap--session-running (dap--get-sessions))
      ;; delete output buffer
      (when-let (window (get-buffer-window (dap--debug-session-output-buffer (dap--cur-session-or-die))))
        (delete-window window))
      ;; delete dataframe inspector window
      (when-let
          (window (get-buffer-window (get-file-buffer synthmacs/dap-temp-dataframe-path)))
        (delete-window window)))
    )
  (defun synthmacs/dap-python--executable-find (orig-fun &rest args)
    (executable-find "python"))
  :config
  ;; configure windows
  (require 'dap-ui)
  (setq dap-ui-buffer-configurations
        '(("*dap-ui-sessions*"
           (side . bottom)
           (slot . 1)
           (window-height . 0.33))
          ("*debug-window*"
           (side . bottom)
           (slot . 2)
           (window-height . 0.33))
          ("*dap-ui-repl*"
           (side . bottom)
           (slot . 3)
           (window-height . 0.33))))
  (dap-ui-mode 1)
  ;; python virtualenv
  (require 'dap-python)
  (advice-add 'dap-python--pyenv-executable-find :around #'synthmacs/dap-python--executable-find)
  ;; debug templates
  (defvar dap-script-args (list :type "python"
                                :args []
                                :cwd "${workspaceFolder}"
                                :justMyCode :json-false
                                :request "launch"
                                :debugger 'debugpy
                                :name "dap-debug-script"))
  (defvar dap-test-args (list :type "python-test-at-point"
                              :args ""
                              :justMyCode :json-false
                              ;; :cwd "${workspaceFolder}"
                              :request "launch"
                              :module "pytest"
                              :debugger 'debugpy
                              :name "dap-debug-test-at-point"))
  (defvar flight-tower-mill (list
                             :name "mill"
                             :type "python"
                             :request "launch"
                             :program (expand-file-name "~/git/Sodra.Common.FlightTower/flight_tower/__main__.py")
                             ;; :env '(("NO_JSON_LOG" . "true"))
                             :args ["-m" "mill" "--config" "user_luca"]))
  (defvar flight-tower-calibration (list
                                    :name "mill"
                                    :type "python"
                                    :request "launch"
                                    :program (expand-file-name "~/git/Sodra.Common.FlightTower/flight_tower/__main__.py")
                                    ;; :env '(("NO_JSON_LOG" . "true"))
                                    :args ["-m" "mill"
                                           ;; "--config" "user_luca"
                                           ;; "--config" "calibration_g292imp_41x185"
                                           ;; "--config" "calibration_41x185_38x89"
                                           "--config" "calibration_jan22"
                                           ]
                                    ))
  (defvar flight-tower-e2e (list
                            :name "mill"
                            :type "python"
                            :request "launch"
                            :program (expand-file-name "~/git/Sodra.Common.FlightTower/flight_tower/__main__.py")
                            ;; :env '(("NO_JSON_LOG" . "true"))
                            :args ["-m" "wood_processing_e2e"
                                   "--config" "user_luca"]
                            ))
  (dap-register-debug-template "dap-debug-script" dap-script-args)
  (dap-register-debug-template "dap-debug-test-at-point" dap-test-args)
  (dap-register-debug-template "flight-tower-mill" flight-tower-mill)
  (dap-register-debug-template "flight-tower-e2e" flight-tower-e2e)
  (dap-register-debug-template "flight-tower-calibration" flight-tower-calibration)
  ;; bind the templates
  (synthmacs/local-leader-keys
    :keymaps 'python-mode-map
    "d t" '((lambda () (interactive) (dap-debug dap-test-args)) :wk "test")
    "d s" '((lambda () (interactive) (dap-debug dap-script-args)) :wk "script")
    )
  )
#+end_src

*** DAP Languages
:PROPERTIES:
:CUSTOM_ID: h:DEB733DA-3C46-4317-B6AB-13BAE08AAA05
:END:
#+begin_src emacs-lisp :tangle no
;; (use-package dap-LANGUAGE) to load the dap adapter for your language
#+end_src

** Flycheck
:PROPERTIES:
:CUSTOM_ID: h:337359CD-0A1C-48AE-A141-36BFC0FE4641
:END:
#+begin_src emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
#+end_src

** iMenu
:PROPERTIES:
:CUSTOM_ID: h:A05AB852-E81B-4B50-B873-6A3C2A917C08
:END:
#+begin_src emacs-lisp
(use-package imenu-list)

(synthmacs/leader-keys
  "ti" '(imenu-list-smart-toggle :wx "imenu-list-smart-toggle"))

#+end_src

** Snippets
:PROPERTIES:
:CUSTOM_ID: h:36F5A754-136E-4AA5-967D-358D69599D01
:END:

*** yasnippet
:PROPERTIES:
:CUSTOM_ID: h:B8EE84BD-F052-4F12-AB13-6DDDC8F3606D
:END:
#+begin_src emacs-lisp
(use-package yasnippet
  ;; :general
  ;; (yas-minor-mode-map
  ;; :states 'insert
  ;; "TAB" 'nil
  ;; "C-TAB" 'yas-expand)
  :hook
  ((prog-mode org-mode dap-ui-repl-mode vterm-mode) . yas-minor-mode)
  :init
  (defun synthmacs/yas-try-expanding-auto-snippets ()
    (when (and (boundp 'yas-minor-mode) yas-minor-mode)
      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
        (yas-expand))))
  :config
  (yas-reload-all)
  (add-hook 'post-command-hook #'synthmacs/yas-try-expanding-auto-snippets)
  )

(use-package yasnippet-snippets)
#+end_src

*** commond-lisp-snippets
:PROPERTIES:
:CUSTOM_ID: h:0987E887-8EFF-4E43-A9D7-092FAF2B2B2C
:END:
#+begin_src emacs-lisp
(use-package common-lisp-snippets)
#+end_src

*** LaTeX snippets
:PROPERTIES:
:CUSTOM_ID: h:55F5E584-47AC-49FF-93A2-ED7E3D30B4EE
:END:
#+begin_src emacs-lisp :tangle no
(use-package yasnippet
  :config
  (setq synthmacs/greek-alphabet
        '(("a" . "\\alpha")
          ("b" . "\\beta" )
          ("g" . "\\gamma")
          ("d" . "\\delta")
          ("e" . "\\epsilon")
          ("z" . "\\zeta")
          ("h" . "\\eta")
          ("t" . "\\theta")
          ("i" . "\\iota")
          ("k" . "\\kappa")
          ("l" . "\\lambda")
          ("m" . "\\mu")
          ("n" . "\\nu")
          ("x" . "\\xi")
          ("p" . "\\pi")
          ("r" . "\\rho")
          ("s" . "\\sigma")
          ("t" . "\\tau")
          ("u" . "\\upsilon")
          ("f" . "\\phi")
          ("c" . "\\chi")
          ("v" . "\\psi")
          ("g" . "\\omega")))

  (setq synthmacs/latex-greek-prefix "'")

  ;; The same for capitalized letters
  (dolist (elem synthmacs/greek-alphabet)
    (let ((key (car elem))
          (value (cdr elem)))
      (when (string-equal key (downcase key))
        (add-to-list 'synthmacs/greek-alphabet
                     (cons
                      (capitalize (car elem))
                      (concat
                       (substring value 0 1)
                       (capitalize (substring value 1 2))
                       (substring value 2)))))))

  (yas-define-snippets
   'latex-mode
   (mapcar
    (lambda (elem)
      (list (concat synthmacs/latex-greek-prefix (car elem)) (cdr elem) (concat "Greek letter " (car elem))))
    synthmacs/greek-alphabet))
  
  (setq synthmacs/english-alphabet
        '("a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"))

  (dolist (elem synthmacs/english-alphabet)
    (when (string-equal elem (downcase elem))
      (add-to-list 'synthmacs/english-alphabet (upcase elem))))

  (setq synthmacs/latex-mathbb-prefix "`")

  (yas-define-snippets
   'latex-mode
   (mapcar
    (lambda (elem)
      (list (concat synthmacs/latex-mathbb-prefix elem) (concat "\\mathbb{" elem "}") (concat "Mathbb letter " elem)))
    synthmacs/english-alphabet))

  (setq synthmacs/latex-math-symbols
        '(("x" . "\\times")
          ("." . "\\cdot")
          ("v" . "\\forall")
          ("s" . "\\sum_{$1}^{$2}$0")
          ("p" . "\\prod_{$1}^{$2}$0")
          ("e" . "\\exists")
          ("i" . "\\int_{$1}^{$2}$0")
          ("c" . "\\cap")
          ("u" . "\\cup")
          ("0" . "\\emptyset")))

  (setq synthmacs/latex-math-prefix "''")

  (yas-define-snippets
   'latex-mode
   (mapcar
    (lambda (elem)
      (let ((key (car elem))
            (value (cdr elem)))
        (list (concat synthmacs/latex-math-prefix key) value (concat "Math symbol " value))))
    synthmacs/latex-math-symbols))
  )
#+end_src

** Treesitter
:PROPERTIES:
:CUSTOM_ID: h:1A1DAD25-321C-4F90-A226-1C14A4F7A79F
:END:
#+begin_src emacs-lisp
(require 'treesit)
#+end_src

*** Treesitter languages
:PROPERTIES:
:CUSTOM_ID: h:3AF9D17A-2060-42DA-8F0E-BD28BA742A2A
:END:
You can either build your own languages, or you can use pre-built. For now, let's use pre-built ones.
#+begin_src emacs-lisp
(use-package tree-sitter-langs)

;; Load the language bundle
(require 'tree-sitter-langs)

;; (setq treesit-language-source-alist
;;    '((bash "https://github.com/tree-sitter/tree-sitter-bash")
;;      (c "https://github.com/tree-sitter/tree-sitter-c")
;;      (cmake "https://github.com/uyha/tree-sitter-cmake")
;;      (clojure "https://github.com/sogaiu/tree-sitter-clojure")
;;      (commonlisp "https://github.com/theHamsta/tree-sitter-commonlisp")
;;      (css "https://github.com/tree-sitter/tree-sitter-css")
;;      (elixir "https://github.com/elixir-lang/tree-sitter-elixir")
;;      (elisp "https://github.com/Wilfred/tree-sitter-elisp")
;;      (go "https://github.com/tree-sitter/tree-sitter-go")
;;      (html "https://github.com/tree-sitter/tree-sitter-html")
;;      (haskell "https://github.com/tree-sitter/tree-sitter-haskell")
;;      (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
;;      (json "https://github.com/tree-sitter/tree-sitter-json")
;;      (lua "https://github.com/Azganoth/tree-sitter-lua")
;;      (make "https://github.com/alemuller/tree-sitter-make")
;;      (markdown "https://github.com/ikatyang/tree-sitter-markdown")
;;      (objc "https://github.com/jiyee/tree-sitter-objc")
;;      ;; (ocaml "https://github.com/tree-sitter/tree-sitter-ocaml")
;;      (python "https://github.com/tree-sitter/tree-sitter-python")
;;      (racket "https://github.com/6cdh/tree-sitter-racket")
;;      (ruby "https://github.com/tree-sitter/tree-sitter-ruby")
;;      (rust "https://github.com/tree-sitter/tree-sitter-rust")
;;      (scheme "https://github.com/6cdh/tree-sitter-scheme")
;;      (sqlite "https://github.com/dhcmrlchtdj/tree-sitter-sqlite")
;;      (sql "https://github.com/m-novikov/tree-sitter-sql")
;;      ;; (swift "https://gitlab.com/woolsweater/tree-sitter-swifter")
;;      (toml "https://github.com/tree-sitter/tree-sitter-toml")
;;      (yaml "https://github.com/ikatyang/tree-sitter-yaml")
;;      (zig "https://github.com/maxxnino/tree-sitter-zig")))

;; (defun synthmacs/treesit-install-all-languages ()
;;     "Install all languages specified by `treesit-language-source-alist'."
;;     (interactive)
;;     (let ((languages (mapcar 'car treesit-language-source-alist)))
;;       (dolist (lang languages)
;; 	      (treesit-install-language-grammar lang)
;; 	      (message "`%s' parser was installed." lang)
;; 	      (sit-for 0.75))))

;; (add-hook 'c-mode-hook
;; 	  (lambda () (if (treesit-ready-p 'c t)
;; 		    (c-ts-mode)
;; 		  (c-mode))))

;; (add-hook 'common-lisp-mode-hook
;; 	  (lambda () (if (treesit-ready-p 'commonlisp t)
;; 		    (common-lisp-ts-mode)
;; 		  (common-lisp-mode))))

;; (add-hook 'clojure-mode-hook
;; 	  (lambda () (if (treesit-ready-p 'clojure t)
;; 		    (clojure-ts-mode)
;; 		  (clojure-mode))))

;; (add-hook 'css-mode-hook
;; 	  (lambda () (if (treesit-ready-p 'css t)
;; 		    (css-ts-mode)
;; 		  (css-mode))))

;; (add-hook 'html-mode-hook
;; 	  (lambda () (if (treesit-ready-p 'html t)
;; 		    (html-ts-mode)
;; 		  (html-mode))))

;; (add-hook 'haskell-mode-hook
;; 	  (lambda () (if (treesit-ready-p 'haskell t)
;; 		    (haskell-ts-mode)
;; 		  (haskell-mode))))

;; (add-hook 'javascript-mode-hook
;; 	  (lambda () (if (treesit-ready-p 'javascript t)
;; 		    (js-ts-mode)
;; 		  (javascript-mode))))

;; (add-hook 'js-json-mode-hook
;; 	  (lambda () (if (treesit-ready-p 'json t)
;; 		    (json-ts-mode)
;; 		  (js-json-mode))))

;; (add-hook 'python-mode-hook
;; 	  (lambda () (if (treesit-ready-p 'python t)
;; 		    (python-ts-mode)
;; 		  (python-mode))))

;; (add-hook 'sh-mode-hook
;; 	  (lambda () (if (treesit-ready-p 'bash t)
;; 		    (bash-ts-mode)
;; 		  (sh-mode))))
#+end_src

* Programming Languages
:PROPERTIES:
:CUSTOM_ID: h:732BA080-834D-49E0-967E-0D37CE1C6BA0
:END:

** Haskell
:PROPERTIES:
:CUSTOM_ID: h:28BA5E9F-6893-4E40-9F42-246F8731948C
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-haskell.el
:END:

** HTML
:PROPERTIES:
:CUSTOM_ID: h:5561B91C-C61D-47D5-8320-9A559032C762
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-html.el
:END:

** LISPs
:PROPERTIES:
:CUSTOM_ID: h:2171FA3F-D9BC-4058-9442-6827BABFC2CE
:END:

*** Clojure
:PROPERTIES:
:CUSTOM_ID: h:FF09BB1E-5437-4AFF-A4F5-367B92AF76CC
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-clojure.el
:END:

**** clojure-mode
:PROPERTIES:
:CUSTOM_ID: h:C6E789DD-6E2F-4CC4-A80B-236D86204624
:END:

#+begin_src emacs-lisp
(use-package clojure-mode
  :mode "\\.clj$"
  :init
  (setq clojure-align-forms-automatically t))
#+end_src

**** clojure-lsp
:PROPERTIES:
:CUSTOM_ID: h:A8775FBA-62ED-45B6-B069-55F008EC4A0F
:END:
#+begin_src emacs-lisp
(use-package clojure-mode
  :hook
  ((clojure-mode clojurescript-mode)
   . (lambda ()
       (setq-local lsp-enable-indentation nil ; cider indentation
                   lsp-enable-completion-at-point nil ; cider completion
                   )
       (lsp-deferred)))
  )
#+end_src

**** Cider
:PROPERTIES:
:CUSTOM_ID: h:E86F6D87-1832-4635-91A9-7556C9CF0939
:END:

#+begin_src emacs-lisp
(use-package cider
  :hook ((cider-repl-mode . evil-normalize-keymaps)
         (cider-mode . (lambda ()
                           (setq-local evil-lookup-func #'cider-doc)))
         (cider-mode . eldoc-mode))
  :general
  (synthmacs/local-leader-keys
    :keymaps 'clojure-mode-map
    "c" '(cider-connect-clj :wk "connect")
    "C" '(cider-connect-cljs :wk "connect (cljs)")
    "j" '(cider-jack-in :wk "jack in")
    "J" '(cider-jack-in-cljs :wk "jack in (cljs)")
    "d d" 'cider-debug-defun-at-point 
    "e b" 'cider-eval-buffer
    "e l" 'cider-eval-last-sexp
    "e L" 'cider-pprint-eval-last-sexp-to-comment
    "e d" '(cider-eval-defun-at-point :wk "defun")
    "e D" 'cider-pprint-eval-defun-to-comment
    "h" 'cider-clojuredocs-web 
    "K" 'cider-doc
    "q" '(cider-quit :qk "quit")
    )
  (synthmacs/local-leader-keys
    :keymaps 'clojure-mode-map
    :states 'visual
    "e" 'cider-eval-region)
  :init
  (setq nrepl-hide-special-buffers t)
  (setq nrepl-sync-request-timeout nil)
  (setq cider-repl-display-help-banner nil)
  )
#+end_src

**** ob-clojure
:PROPERTIES:
:CUSTOM_ID: h:E3F9FFBA-EE07-4399-A761-A28115AB2031
:END:

#+begin_src emacs-lisp
(use-package org
  :config
  (require 'ob-clojure)
  (setq org-babel-clojure-backend 'cider))
#+end_src

*** Common Lisp
:PROPERTIES:
:CUSTOM_ID: h:32C00231-247B-4BB8-9DF7-A733338041A0
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-clisp.el
:END:
  
#+begin_src emacs-lisp
(use-package sly)

(use-package sly-macrostep)

(use-package sly-repl-ansi-color
  :init
  (add-to-list 'sly-contribs 'sly-repl-ansi-color))
#+end_src

*** Emacs-lisp
:PROPERTIES:
:CUSTOM_ID: h:D036C70A-011B-49DD-82B7-8B077BB1123C
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-elisp.el
:END:

#+begin_src emacs-lisp
(use-package emacs
  :straight (:type built-in)
  :general
  (general-nmap
    :keymaps 'emacs-lisp-mode-map
    :states 'normal
   "gr" nil) ;; interferes with eval-operator
  )
#+end_src

*** General Lisp Tools
:PROPERTIES:
:CUSTOM_ID: h:DD59307A-C59B-4CF6-87CF-0C5D425E3F91
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-lisp.el
:END:

**** aggressive-indent
:PROPERTIES:
:CUSTOM_ID: h:BB3EB984-53C4-480A-9FD5-1EFBD6BA4D3F
:END:
Keeps the file indented nicely, but, this might clash with lsp stuff, so we only use it for Lisp stuff.
#+begin_src emacs-lisp
(use-package aggressive-indent
    :hook ((clojure-mode . aggressive-indent-mode)
           (lisp-mode . aggressive-indent-mode)
           (emacs-lisp-mode . aggressive-indent-mode)))
#+end_src

**** evil-lisp-state
:PROPERTIES:
:CUSTOM_ID: h:29AD92F1-04AB-4CE5-91F4-A1E4B187F0CE
:END:
- Wrap with ~SPC l w~
- Raise with ~SPC l r~
- Enter lisp-state with ~SPC l .~
- Navigate symbols with ~j~ and ~k~
- Navigate forms with ~h~ and ~l~
- Go to parent sexp with ~U~
- 
#+begin_src emacs-lisp
(use-package evil-lisp-state
  :after evil
  :demand
  :init
  (setq evil-lisp-state-enter-lisp-state-on-command nil)
  (setq evil-lisp-state-global t)
  ;; (setq evil-lisp-state-major-modes '(org-mode emacs-lisp-mode clojure-mode clojurescript-mode lisp-interaction-mode))
  :config
  (evil-lisp-state-leader "SPC l")
  )
#+end_src

** Markdown
:PROPERTIES:
:CUSTOM_ID: h:80E9702A-E2B6-44B5-A139-AD16C9B5D92F
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-markdown.el
:END:

#+begin_src emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode
  (("README\\.md\\'" . gfm-mode)
   ("\\.md\\'" . markdown-mode)
   ("\\.markdown\\'" . markdown-mode))
  :init
  (setq markdown-command "multimarkdown"))
#+end_src

** Rust
:PROPERTIES:
:CUSTOM_ID: h:6355CFE4-6BA5-4134-BA38-74634F9FF919
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-rust.el
:END:

#+begin_src emacs-lisp
#+end_src

** Swift
:PROPERTIES:
:CUSTOM_ID: h:4C66614A-ED5B-4771-96C3-E2C789282DC1
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-swift.el
:END:
#+begin_src emacs-lisp
(use-package lsp-sourcekit
  :after lsp-mode
  :config
  (setq lsp-sourcekit-executable (string-trim (shell-command-to-string "xcrun --find sourcekit-lsp"))))

(use-package swift-mode
  :hook (swift-mode . (lambda () (lsp))))
#+end_src

** YAML
:PROPERTIES:
:CUSTOM_ID: h:0AB88184-7AE8-4232-B4A7-B8C4714B91D3
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-yaml.el
:END:

#+begin_src emacs-lisp
(use-package yaml-mode
  :mode ((rx ".yml" eos) . yaml-mode))
#+end_src

* Provide modules
:PROPERTIES:
:CUSTOM_ID: h:79F3414D-6DBD-420A-A955-913ACCB5A17B
:END:

** early-init.el
:PROPERTIES:
:CUSTOM_ID: h:C134637C-76BC-4013-91BE-3D273C12C691
:header-args: :emacs-lisp :tangle early-init.el
:END:
#+BEGIN_SRC emacs-lisp
  ;;; early-init.el ends here
#+END_SRC

** init.el
:PROPERTIES:
:CUSTOM_ID: h:0EDF1757-169B-4750-8262-415B599A4B53
:header-args: :emacs-lisp :tangle init.el
:END:
#+begin_src emacs-lisp
;;; init.el ends here
#+end_src

** synthmacs-core
:PROPERTIES:
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-core.el
:CUSTOM_ID: h:6C65C946-EAFF-4F1D-9501-0DC155A3719A
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-core)
;;; synthmacs-core.el ends here
#+end_src

** synthmacs-package-management
:PROPERTIES:
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-package-management.el
:CUSTOM_ID: h:BECD851C-F8A3-42DF-947E-9BDA87337575
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-package-management)
;;; synthmacs-package-management.el ends here
#+end_src

** synthmacs-general-evil
:PROPERTIES:
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-general-evil.el
:CUSTOM_ID: h:3CCD39F9-C228-4767-BBA8-0AA80322C01E
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-general-evil)
;;; synthmacs-general-evil.el ends here
#+end_src

** synthmacs-org
:PROPERTIES:
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-org.el
:CUSTOM_ID: h:3C05F9B9-F006-44AC-8DEE-F9EA2E6E3DB2
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-org)
;;; synthmacs-org.el ends here
#+end_src

** synthmacs-ui
:PROPERTIES:
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-ui.el
:CUSTOM_ID: h:46D11F9E-6108-4A88-888B-4DDBA1AD316A
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-ui)
;;; synthmacs-ui.el ends here
#+end_src

** synthmacs-completion-framework
:PROPERTIES:
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-completion-framework.el
:CUSTOM_ID: h:D7BA43FA-DCD5-49A8-A972-13FCE0465438
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-completion-framework)
;;; synthmacs-completion-framework.el ends here
#+end_src

** synthmacs-tools
:PROPERTIES:
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-tools.el
:CUSTOM_ID: h:3DE0D1E2-51E9-4DCC-96BD-227464214C7C
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-tools)
;;; synthmacs-tools.el ends here
#+end_src

** synthmacs-programming
:PROPERTIES:
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-programming.el
:CUSTOM_ID: h:CE800ACA-533D-4E20-8E62-75AB021FE36A
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-programming)
;;; synthmacs-programming.el ends here
#+end_src

** Programming Languages
:PROPERTIES:
:CUSTOM_ID: h:320148C4-896F-4FFF-90CD-08E91DCCED9E
:END:

*** synthmacs-lang-haskell
:PROPERTIES:
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-haskell.el
:CUSTOM_ID: h:6E27FD00-65D6-421C-9C96-B4A8877CA5BB
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-lang-haskell)
;;; synthmacs-lang-haskell.el ends here
#+end_src

*** synthmacs-lang-html
:PROPERTIES:
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-html.el
:CUSTOM_ID: h:F0DD1F2F-A930-4C32-81AE-1D4730BF5FEF
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-lang-html)
;;; synthmacs-lang-html.el ends here
#+end_src

*** LISPs
:PROPERTIES:
:CUSTOM_ID: h:FD16520D-EDBD-44ED-BFAE-8F8E6B9ED790
:END:

*** synthmacs-lang-clojure
:PROPERTIES:
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-clojure.el
:CUSTOM_ID: h:F6A9AC39-89F2-41DA-84DD-5AF7A01F351B
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-lang-clojure)
;;; synthmacs-lang-clojure.el ends here
#+end_src

*** synthmacs-lang-clisp
:PROPERTIES:
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-clisp.el
:CUSTOM_ID: h:771E15AF-C8A5-49CD-B224-AE4103FD2822
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-lang-clisp)
;;; synthmacs-lang-clisp.el ends here
#+end_src

*** synthmacs-lang-elisp
:PROPERTIES:
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-elisp.el
:CUSTOM_ID: h:29743F9F-3D7F-44A6-9CD6-369EB609D4E0
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-lang-elisp)
;;; synthmacs-lang-elisp.el ends here
#+end_src

*** synthmacs-lang-lisp
:PROPERTIES:
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-lisp.el
:CUSTOM_ID: h:08483E03-F91B-4E81-8DAF-8C710A9AD0F8
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-lang-lisp)
;;; synthmacs-lang-lisp.el ends here
#+end_src

*** synthmacs-lang-markdown
:PROPERTIES:
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-markdown.el
:CUSTOM_ID: h:4DC1FE56-048B-42E5-BBC0-C7D8C97A394A
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-lang-markdown)
;;; synthmacs-lang-markdown.el ends here
#+end_src

*** synthmacs-lang-rust
:PROPERTIES:
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-rust.el
:CUSTOM_ID: h:B3C70973-504D-407A-A865-579F5A3DC1C1
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-lang-rust)
;;; synthmacs-lang-rust.el ends here
#+end_src

*** synthmacs-lang-swift
:PROPERTIES:
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-swift.el
:CUSTOM_ID: h:778CF1D8-D2CA-4920-90BA-768D5C6EDC0E
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-lang-swift)
;;; synthmacs-lang-swift.el ends here
#+end_src

*** synthmacs-lang-yaml
:PROPERTIES:
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-yaml.el
:CUSTOM_ID: h:B2672AC2-5D01-4636-9064-E9D313BB65D8
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-lang-yaml)
;;; synthmacs-lang-yaml.el ends here
#+end_src

* COMMENT Local variables
:PROPERTIES:
:CUSTOM_ID: h:ADD147A9-382A-4D85-8A9A-7533E71BA96A
:END:
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(progn (synthmacs/org-add-ids-to-headlines-in-file) (synthmacs/tangle-config))) nil t)
# End:
