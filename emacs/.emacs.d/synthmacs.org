#+TITLE: SYNTHMACS Config
#+AUTHOR: roux g. buciu
#+DESCRIPTION: adudenamedruby's emacs configuration
#+STARTUP: showeverything
#+OPTIONS: auto-id:t
#+OPTIONS: broken-links:t
#+OPTIONS: tags:nil
#+OPTIONS: toc
#+PROPERTY: header-args:emacs-lisp :comments link

* TABLE OF CONTENTS :toc:
:PROPERTIES:
:CUSTOM_ID: h:D9FC65D1-4FFB-4344-B8A7-9FAA9D1AC040
:END:
- [[#introduction][Introduction]]
  - [[#what-is-a-synthmacs][What is a ~Synthmacs~?]]
  - [[#about-synthmacsorg][About ~synthmacs.org~]]
  - [[#why-vanilla-emacs][Why vanilla Emacs?]]
  - [[#why-a-literate-config][Why a literate config?]]
  - [[#synthmacs-modules][Synthmacs "modules"]]
  - [[#structure-of-this-configuration][Structure of this configuration]]
- [[#startup-optimization][Startup Optimization]]
  - [[#early-initel][early-init.el]]
  - [[#initel-startup-optimization][init.el: startup optimization]]
  - [[#initel-load-modules][init.el: load modules]]
- [[#package-management][Package Management]]
  - [[#bootstrap-straight-and-straight-use-package][Bootstrap Straight and straight-use-package]]
- [[#core-emacs-setup][Core Emacs Setup]]
  - [[#emacs-setup][Emacs Setup]]
  - [[#custom-variables][Custom variables]]
  - [[#fonts][Fonts]]
  - [[#free-functions][Free Functions]]
  - [[#auto-pair-paranthesis][Auto-pair paranthesis]]
- [[#keybindings-general--evil-mode][Keybindings: General & EVIL mode]]
  - [[#general][General]]
  - [[#general-keybindings][General keybindings]]
  - [[#hydra][Hydra]]
  - [[#evil][Evil]]
- [[#org-mode][Org Mode]]
  - [[#org-mode-1][org mode]]
  - [[#enabling-the-table-of-contents][Enabling the Table of Contents]]
  - [[#using-org-id-in-links][Using org-id in links]]
  - [[#tangling-this-file][Tangling this file]]
- [[#ui][UI]]
  - [[#themes][Themes]]
  - [[#navigation][Navigation]]
  - [[#icons][Icons]]
  - [[#modeline][Modeline]]
  - [[#which-key][which-key]]
  - [[#rainbow][rainbow]]
- [[#completion-framework][Completion framework]]
  - [[#vertico][Vertico]]
  - [[#orderless][Orderless]]
  - [[#consult][Consult]]
  - [[#marginalia][Marginalia]]
  - [[#embark][Embark]]
- [[#useful-tools][Useful Tools]]
  - [[#helpful][Helpful]]
  - [[#rg][Rg]]
  - [[#projectile][Projectile]]
  - [[#gitvcs-integration][Git/VCS Integration]]
  - [[#dashboard][Dashboard]]
  - [[#ws-butler][WS-Butler]]
- [[#programming-environment][Programming Environment]]
  - [[#lsp][LSP]]
  - [[#corfu][Corfu]]
  - [[#flycheck][Flycheck]]
  - [[#imenu][iMenu]]
  - [[#snippets][Snippets]]
  - [[#treesitter][Treesitter]]
- [[#programming-languages][Programming Languages]]
  - [[#clojure][Clojure]]
  - [[#haskell][Haskell]]
  - [[#html][HTML]]
  - [[#lisp][LISP]]
  - [[#markdown][Markdown]]
  - [[#rust][Rust]]
  - [[#swift][Swift]]
  - [[#yaml][YAML]]
- [[#provide-modules][Provide modules]]
  - [[#synthmacs-core][synthmacs-core]]
  - [[#synthmacs-package-management][synthmacs-package-management]]
  - [[#synthmacs-general-evil][synthmacs-general-evil]]
  - [[#synthmacs-org][synthmacs-org]]
  - [[#synthmacs-ui][synthmacs-ui]]
  - [[#synthmacs-completion-framework][synthmacs-completion-framework]]
  - [[#synthmacs-tools][synthmacs-tools]]
  - [[#synthmacs-programming][synthmacs-programming]]
  - [[#programming-languages-1][Programming Languages]]

* Introduction
:PROPERTIES:
:CUSTOM_ID: h:49282F28-9E13-48D2-A565-1605B1CC57B8
:END:

** What is a ~Synthmacs~?
:PROPERTIES:
:CUSTOM_ID: h:945224F8-D3DC-44B3-BC29-FB815F13E971
:END:
~Synthmacs~ is what I've decided to call my Emacs config. It's a portmanteau of Sythesized and Emacs. But it's also inspired by "Synthwave" and "Synthesizers". Anyway, it's not a big deal, and you shouldn't worry about it!!

** About ~synthmacs.org~
:PROPERTIES:
:CUSTOM_ID: h:D9ED3ADB-810A-4A1C-A1D3-5397874AFAC7
:END:
This file (~synthmacs.org~) is the literate Synthmacs configuration. Every time I save the file, the code blocks get tangled, asynchronously. By default, they get tangled (in sequence) to ~./init.el~. However, some blocks override this default (e.g. see the section [[*early-init.el][early-init.el]]), meaning that I end up with what are, essentially, modules in which things are organized in some way that makes sense to me. More on that [[#h:C522D670-C206-44F7-96CE-17D01E578287][here]].

** Why vanilla Emacs?
:PROPERTIES:
:CUSTOM_ID: h:40A8BDAE-F8E3-4DB3-AC8C-7E5067B7EE4D
:END:
My introduction to Emacs was... Vim? I love Vim. Or rather, I love language for text manipulation that comprise Vim's composable motions and commands. But what I really wanted was to use those keybindings throughout many of the things I'm doing, and not just in Vim. So I switched over to Vimium in my browser. I started using Xvim in Xcode. Basically wherever I could have Vim keybindings, I did. But I also wanted to be able to customize certain behaviours of my editor to the extent that just wasn't possible with Vim, and I knew that Emacs was the thing that would let me do that. Minor problem: I didn't know anything about Emacs, and I didn't know anything about E-Lisp, and I didn't have the time to set everything up myself (knowing how big that entry learning curve is from having learned to use Vim). So, I tried a distribution of Emacs, and ended up using [[https://www.spacemacs.org/][Spacemacs]] for several years.

I was mostly happy.

Three things changed:
1. I started to learn LISP
2. That made me want to understand Emacs a little more
3. Spacemacs is really great... but the one thing that always bothered me was that the way it's put together makes it very different to how a normal config looks. So often, changing some things by looking at other's people's configs was.... challenging

Over the next few weeks, I started the process of experimenting with my own config. I took a lot of inspiration from a ton of people, shamelessly stealing ideas to make my config better... or just make Emacs have the behaviour I wanted. I've tried to credit code sources where possible. However, in my haste from earlier efforts, I don't have credits for everything. For anything that's not original, here's a non-exhaustive list of some of the main places I was inspired by:
- [[https://github.com/abougouffa/minemacs/blob/ab9084efe27191fd0ab5f94eee5502766fce16c1/modules/me-lisp.el#L43][abougouffa]]
- [[https://github.com/daedreth/UncleDavesEmacs/blob/master/config.org][daedreth]]
- [[https://writequit.org/org/#2daddf2c-228b-40ae-90b1-cd0b8c39f061][dakrone]]
- [[https://gitlab.com/dwt1/dotfiles/-/blob/2a687641af1fa4e31e080960e0b6a5f3d21d759d/.emacs.d.gnu/config.org][DistroTube Config]] & [[https://gitlab.com/dwt1/dotfiles/-/blob/1e82fff55a15bbff605789cbb412ea43efb924f0/.config/doom/config.org][Distro Tube Doom Config]]
- [[https://github.com/howardabrams/dot-files][HowardAbrams]]
- [[https://github.com/jimeh/.emacs.d/tree/master/core][jimeh]]
- [[https://github.com/jinnovation/.emacs.d][jinnovation]]
- [[https://www.lucacambiaghi.com/vanilla-emacs/readme.html#h:4C37CFFC-D045-47B4-BFDC-801977247199][Luca Cambiaghi]]
- [[https://github.com/meatcar/emacs.d/blob/377c5abc4d45927d5badbf5f32debc9162a465fa/config.org#L1320][meatcar]]
- [[https://protesilaos.com/emacs/dotemacs][Prot]]
- [[https://github.com/renzmann/.emacs.d/blob/main/README.org][renzmann]]
- [[https://github.com/r0man/.emacs.d/blob/b344a9bed55421e2288a1c135ccb9cf9b7591de4/init.el.org#L2019][r0man]]
- [[https://robbmann.io/emacsd/][robbmann]]
- [[https://config.daviwil.com/emacs][System Crafters]]
- [[https://github.com/vale981/dotfiles/blob/7d7971b91356b271dd08afbaf9979fba33d471ed/dots/emacs/emacs.org#L1020][vale981]]
  
It is a long journey, and I still have a long way to go, but I am glad I started it.

** Why a literate config?
:PROPERTIES:
:CUSTOM_ID: h:B5231F9E-07D2-4738-97FD-78EC648B3F3D
:END:
Having your configuration in ~org-mode~ has some benefits and some drawbacks. Further, it adds a layer of abstraction between me and my ~init.el~ file. So, is it worth it?

The main, and biggest, drawback is that it can happen that the ~org-mode~ file has a mistake and tangles an incorrect ~*.el~ file. In that case you can't use your nice bindings but you are thrown in barebones Emacs and you have to =C-x C-f= your way to the ~init.el~ and run ~M-x check-parens~.

You can also run ~org-babel-tangle-jump-to-org~ from the tangled file if you add:
#+begin_src org
,#+PROPERTY: header-args:emacs-lisp :comments link
#+end_src

Another drawback is that a big configuration can be slow to tangle and tangling on save can block ~emacs~. The solution for this is to do the tangling asynchronously. See [[#h:16B948EA-5375-44DE-ACD7-3664D4A9CE5F][this section]] for how that's accomplished.

Let's consider some of the benefits:
- People can read this file on Github pretty easily. It's how I learned a lot about Emacs, and I think the trade is worthwhile to give back.
- I can comfortably document my configuration (and not from within comments), include links, ~sh~ code blocks, etc.
- I can organize my configuration blocks in sections, easily disable some headings with ~COMMENT~, and other ~org-mode~ nicieties.

** Synthmacs "modules"
:PROPERTIES:
:CUSTOM_ID: h:C522D670-C206-44F7-96CE-17D01E578287
:END:
I tangle this file with the function ~synthmacs/tangle-config~, you can read source code in [[#h:16B948EA-5375-44DE-ACD7-3664D4A9CE5F][this]] section. Every time I save the ~synthmacs.org~ file, it is tangled to multiple ~.el~ files.

I achieve that by means of this file's "local variables", which I put at the end of the ~synthmacs.org~ file:
#+begin_src org
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(progn (synthmacs/org-add-ids-to-headlines-in-file) (synthmacs/tangle-config))) nil t)
# End:
#+end_src

To design modules, I look at blocks in my config that I might want to toggle on and off. I assign org properties to each heading. These are what determine which ~.el~ file they will be written to.

For example the header of the section concerning ~lsp-mode~ has the following properties:
#+begin_src org
:PROPERTIES:
:CUSTOM_ID: h:6BC08822-D2B3-4BE9-9EBE-C42F89F0E688
:header-args: :emacs-lisp :tangle ./synthmacs/synthmacs-lsp.el
:END:
#+end_src

All subheadings under it will "inherit" those properties and will be tangled to the same file. We also need to write some ~emacs-lisp~ at the end of the tanged file to "provide" those modules. [[#h:24A7FE78-E6B9-4C81-A2BE-6A049A8209AD][Here]] an example of one of these "footer" headers.

I then have a lean ~init.el~ (written in [[#h:7B22A4F3-49A1-4848-A185-B4EEA060EECE][this]] section) which I use to control which modules I want to use. Why turn off modules? Maybe something's acting up? Maybe I'm setting something up brand new and, while I'm still figuring things out, I want it enabled when I'm working on my config, but I don't want it enabled when I'm actually using Emacs for doing actual work.

** Structure of this configuration
:PROPERTIES:
:CUSTOM_ID: h:0FFBBB41-3AD1-4C09-A15D-FA9A03B6C2CB
:END:
In general, the config tries to manintain a pretty cohesive modularization while observing a few guidelines. In no particular order, these are:
- Things should be loosely organized according to function where possible
- Keybindings should try to stay, as closely as possible, to the various modules they belong to. Thus, if I disable a module, its keys aren't still listed in which-key
- As much as possible, functions should not be free-floating, but should be part of the init or general module of whatever thing they're most related to 

With that out of the way, the general outline of this file aims to be:
- The [[#h:49282F28-9E13-48D2-A565-1605B1CC57B8][first section]] is some information about ~synthmacs.org~ and other comments for my future self or anyone else who happens to be reading this. Hello!
- In the [[#h:EC68944C-F745-45D8-9905-420E0813DBAF][second section]], we have some optimization to startup time. Most of these things are from other people, because I am not as wise in the Emacs ways.
- In the [[#h:F8B6E0EE-7BBD-4F7F-B31E-44DE7B43AA39][third section]], we setup our package managers, ~straight~ and  ~use-package~
- In the [[#h:3D38D8F0-1B85-4265-9941-77A3A2FA235B][fourth section]], we configure ~emacs~ with some better defaults and extend some some of its core features (e.g. ~help-mode~)
- In the [[#h:D7FB11B6-67B4-4275-B0CC-E218C65C411E][fifth section]], we set up ~general~, which we use to manage our keybindings and lazy loading of packages. Afterwards we configure ~evil~, for modal editing.
- In the [[#h:B1DBE90D-B6C9-4BD4-B15B-185FE238D236][sixth section]], we define some standards for the invaluable ~org-mode~ with several extensions
- In the [[#h:EA84335B-2A51-4B4A-9392-F116289EDB10][seventh section]], we configure UI related things: themes, icons, window management, navigation, etc
- In the [[#h:FB3661CB-A573-40B6-B331-449D77DBD199][eighth section]], we configure useful our completion frameworks.
- In the [[#h:B57C03F6-2111-489A-9303-B1A06C95EFF5][ninth section]], we configure useful Emacs tools that aren't big enough to fit in their own header, but don't necessarily fit elsewhere either: git integration with ~magit~, terminal setup, projectile, etc.
- In the [[#h:2E967F87-8304-4262-B5BF-3286ACA7211B][tenth section]], we set up the tools for programming
- In the [[#h:732BA080-834D-49E0-967E-0D37CE1C6BA0][eleventh section]], we then configure different languages I use for programming to use those tools
- The [[#h:754DFB20-B2AB-4750-9BDA-D24E8014C504][twelfth, and final, section]] will be providing the ~provide~ statement for each module without which things would fall apart.

* Startup Optimization
:PROPERTIES:
:CUSTOM_ID: h:EC68944C-F745-45D8-9905-420E0813DBAF
:END:

** early-init.el
:PROPERTIES:
:CUSTOM_ID: h:7DBC58C1-3944-437C-87F9-95C9202BD34E
:header-args: :emacs-lisp :tangle early-init.el
:END:
Taken from DOOM's early init
#+BEGIN_SRC emacs-lisp
  ;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*-
;; NOTE: early-init.el is now generated from synthmacs.org.  Please edit that file instead

;; Defer garbage collection further back in the startup process
;; (setq gc-cons-threshold most-positive-fixnum
;;       gc-cons-percentage 0.6)

;; In Emacs 27+, package initialization occurs before `user-init-file' is
;; loaded, but after `early-init-file'. Doom handles package initialization, so
;; we must prevent Emacs from doing it early!
(setq package-enable-at-startup nil)
;; Do not allow loading from the package cache (same reason).
(setq package-quickstart nil)

;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; Resizing the Emacs frame can be a terribly expensive part of changing the
;; font. By inhibiting this, we easily halve startup times with fonts that are
;; larger than the system default.
(setq frame-inhibit-implied-resize t)

;; Disable GUI elements
(setq menu-bar-mode -1)
(setq tool-bar-mode -1)
(when (fboundp 'set-scroll-bar-mode)
  (set-scroll-bar-mode nil))
(setq inhibit-splash-screen t)
(setq use-file-dialog nil)

;; Native-Comp
(setq native-comp-speed 2
      comp-speed 2)
(setq native-comp-async-report-warnings-errors nil
      comp-async-report-warnings-errors nil)
(setq native-comp-async-query-on-exit t
      comp-async-query-on-exit t)

  ;;; early-init.el ends here
#+END_SRC

** init.el: startup optimization
:PROPERTIES:
:CUSTOM_ID: h:E6162DC2-7E1C-4843-8448-FF104A444B40
:header-args: :emacs-lisp :tangle init.el
:END:
Taken from DOOM's init
#+BEGIN_SRC emacs-lisp
  ;;; init.el --- Personal configuration file -*- lexical-binding: t; no-byte-compile: t; -*-
;; NOTE: init.el is now generated from synthmacs.org.  Please edit that file instead

;; `file-name-handler-alist' is consulted on every `require', `load' and various
;; path/io functions. You get a minor speed up by nooping this. However, this
;; may cause problems on builds of Emacs where its site lisp files aren't
;; byte-compiled and we're forced to load the *.el.gz files (e.g. on Alpine)
(unless (daemonp)
  (defvar doom--initial-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
  ;; Restore `file-name-handler-alist' later, because it is needed for handling
  ;; encrypted or compressed files, among other things.
  (defun doom-reset-file-handler-alist-h ()
    ;; Re-add rather than `setq', because changes to `file-name-handler-alist'
    ;; since startup ought to be preserved.
    (dolist (handler file-name-handler-alist)
      (add-to-list 'doom--initial-file-name-handler-alist handler))
    (setq file-name-handler-alist doom--initial-file-name-handler-alist))
  (add-hook 'emacs-startup-hook #'doom-reset-file-handler-alist-h)
  (add-hook 'after-init-hook '(lambda ()
				;; restore after startup
				(setq gc-cons-threshold 16777216
				      gc-cons-percentage 0.1)))
  )

;; Ensure Synthmacs is running out of this file's directory
(setq user-emacs-directory (file-truename (file-name-directory load-file-name)))
#+END_SRC

** init.el: load modules
:PROPERTIES:
:CUSTOM_ID: h:7B22A4F3-49A1-4848-A185-B4EEA060EECE
:header-args: :emacs-lisp :tangle init.el
:END:
#+begin_src emacs-lisp
(message "SynthMacs is powering up, please be patient...")

;; (add-to-list 'load-path "~/.emacs.d/synthmacs/")
(add-to-list 'load-path (expand-file-name "synthmacs" user-emacs-directory))

(let ((file-name-handler-alist nil)
      (gc-cons-threshold 100000000))

  (require 'synthmacs-core)
  (require 'synthmacs-package-management)
  (require 'synthmacs-general-evil)
  (require 'synthmacs-ui)
  (require 'synthmacs-org)
  (require 'synthmacs-completion-framework)
  (require 'synthmacs-tools)
  (require 'synthmacs-programming)
  ;;(require 'synthmacs-lang-clojure)
  ;;(require 'synthmacs-lang-haskell)
  ;;(require 'synthmacs-lang-html)
  ;;(require 'synthmacs-lang-lisp)
  ;;(require 'synthmacs-lang-markdown)
  ;;(require 'synthmacs-lang-rust)
  ;;(require 'synthmacs-lang-swift)
  ;;(require 'synthmacs-lang-yaml)
  )

;;; init.el ends here
#+end_src

* Package Management
:PROPERTIES:
:CUSTOM_ID: h:F8B6E0EE-7BBD-4F7F-B31E-44DE7B43AA39
:END:

** Bootstrap Straight and straight-use-package
:PROPERTIES:
:CUSTOM_ID: h:686F7A63-013E-48ED-AC56-DF39BD398E20
:header-args: :emacs-lisp :tangle ./synthmacs/synthmacs-package-management.el
:END:
Some rules/conventions:
- Prefer ~:init~ to ~:custom~. Prefer multiple ~setq~ expressions to one.
- Default to ~:defer t~, use ~:demand~ to force loading
- When packages do not require installation e.g. ~dired~, we need ~:straight (:type built-in)~ 
- If you specify ~:commands~, they will be autoloaded and the package will be loaded when the commands are first executed
  + If you use ~:general~ and bind commands to keys it will automatically load the package on first invokation

#+BEGIN_SRC emacs-lisp
(setq straight-repository-branch "develop")
(setq straight-use-package-by-default t)
;; (setq straight-recipes-gnu-elpa-use-mirror t)
;; (setq straight-check-for-modifications '(check-on-save find-when-checking))
;;(setq straight-check-for-modifications nil)
(setq use-package-always-ensure t)
;; (setq use-package-always-defer t)

(setq straight-repository-branch "develop")
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Install use-package
(straight-use-package 'use-package)
#+END_SRC

* Core Emacs Setup
:PROPERTIES:
:CUSTOM_ID: h:3D38D8F0-1B85-4265-9941-77A3A2FA235B
:header-args: :emacs-lisp :tangle ./synthmacs/synthmacs-core.el
:END:

** Emacs Setup
:PROPERTIES:
:CUSTOM_ID: h:51921EE3-AFC6-44A1-A700-316815CBFF49
:END:
Some general things to set up:

#+begin_src emacs-lisp
(use-package emacs
  :init
  (setq inhibit-startup-message t
	inhibit-startup-screen t
        initial-scratch-message nil
        sentence-end-double-space nil
        ring-bell-function 'ignore
        frame-resize-pixelwise t)

  (setq read-process-output-max (* 1024 1024)) ;; 1mb

  ;; less noise when compiling elisp
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
  (setq native-comp-async-report-warnings-errors nil)
  (setq load-prefer-newer t)

  ;; write over selected text on input... like all modern editors do
  ;;(delete-selection-mode t)
  )
#+end_src

*** User setup
:PROPERTIES:
:CUSTOM_ID: h:C6B442E5-589B-43CA-B3F5-FE0A53CDBA66
:END:
Who is using Synthmacs?
#+begin_src emacs-lisp
(use-package emacs
  :init
  (setq user-full-name "roux g. buciu"
        user-mail-address "roux@fringe.foundation"))
#+end_src

*** "Yes or no" prompts
:PROPERTIES:
:CUSTOM_ID: h:1FFE6051-E84B-438A-9FA9-BB6A6EFBE77F
:END:
They are annoying and it's much more idiomatic to type y or n for these types of things anyway. So let's make sure Synthmacs confornms to this.

#+begin_src emacs-lisp
(use-package emacs
  :init
  (defalias 'yes-or-no-p 'y-or-n-p))
#+end_src

*** UTF-8 file encoding
:PROPERTIES:
:CUSTOM_ID: h:6E819D29-764F-4F26-B5CB-20766CE6579D
:END:
Sometimes file encoding is really messed up, so we make sure to default to UTF-8 for everything!

#+begin_src emacs-lisp
(use-package emacs
  :init
  (set-charset-priority 'unicode)
  (setq locale-coding-system 'utf-8
        coding-system-for-read 'utf-8
        coding-system-for-write 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix)))
#+end_src

*** Recent files
:PROPERTIES:
:CUSTOM_ID: h:9E1EAAC3-9A7D-48C6-95D3-B98A8D8C1861
:END:
Recent files. Enable them for nice navigation from the dashboard, ~consult-recent-files~, and so on.
#+begin_src emacs-lisp
(use-package emacs
  :init
  (recentf-mode t)
  (setq recentf-exclude `(,(expand-file-name "straight/build/" user-emacs-directory)
                          ,(expand-file-name "eln-cache/" user-emacs-directory)
                          ,(expand-file-name "etc/" user-emacs-directory)
                          ,(expand-file-name "var/" user-emacs-directory)))
  (setq recentf-max-menu-items 10)
  (setq recentf-max-saved-items 10)
  )
#+end_src

*** ESC key!
:PROPERTIES:
:CUSTOM_ID: h:2A391835-2D45-4E8E-87C1-823E3B5402A8
:END:
The ESC key should not be a modifier, but should behave as per its namesake.
#+begin_src emacs-lisp
(use-package emacs
  :init
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit))
#+end_src

*** Custom file
:PROPERTIES:
:CUSTOM_ID: h:7569FED9-DB11-4C0A-972A-9AD1AC3E1667
:END:
Don't persist a custom file, this bites me more than it helps, honestly.

#+begin_src emacs-lisp
(use-package emacs
  :init
  (setq custom-file (make-temp-file "")) ; use a temp file as a placeholder
  (setq custom-safe-themes t)            ; mark all themes as safe, since we can't persist now
  (setq enable-local-variables :all)     ; fix =defvar= warnings
  )
#+end_src

*** Autosaves
:PROPERTIES:
:CUSTOM_ID: h:DD2D8AFF-4FB3-4157-8A5E-F8A71509C869
:END:
Autosaving is great, but stop littering the file system with backup files all over the place. Maybe I'll really want this in the future. For now, it's a hard no.
#+begin_src emacs-lisp
(use-package emacs
  :init
  (setq make-backup-files nil
        auto-save-default t
        create-lockfiles nil))
#+end_src

*** Symlinks
:PROPERTIES:
:CUSTOM_ID: h:D92031FF-2EE5-4894-B10E-7E3B36E5876D
:END:
I work with symlinks a fair bit of the time. Let's make sure that when I am working with them, I'm going to the actual file, because, really, that's what I want to edit.
#+begin_src emacs-lisp
(use-package emacs
  :init
  ;; follow symlinks 
  (setq vc-follow-symlinks t))
#+end_src

*** Window chrome
:PROPERTIES:
:CUSTOM_ID: h:B186EAC9-0310-4C0D-93A4-3F3B9D9C96A8
:END:
Hide it if we're in a window. I go back and forth on hiding the menu. I like it being there, but I've never used it, so why is it there?
#+begin_src emacs-lisp
(use-package emacs
  :init
  (when (window-system)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (toggle-scroll-bar -1)
    (set-fringe-mode 10)
    ;; (menu-bar-mode -1)
    )
  )
    #+end_src

*** Scrolling behaviours
:PROPERTIES:
:CUSTOM_ID: h:7B6C9DD0-B689-471C-904B-299C56F20AC7
:END:
#+begin_src emacs-lisp
(use-package emacs
  :init
  ;; Set scroll margin, but emulate vim scroll behaviour
  (setq scroll-conservatively 101
	scroll-margin 5
	scroll-preserve-screen-position 't)

  ;; Enables having the line the cursor is on be highlighted
  (global-hl-line-mode 1)

  ;; enable winner mode globally for undo/redo window layout changes
  (winner-mode t)

  (show-paren-mode t)
  )

#+end_src

*** Line numbers
:PROPERTIES:
:CUSTOM_ID: h:AEE6BF5E-C716-41A4-80E6-45512D31F9B5
:END:
#+begin_src emacs-lisp
(use-package emacs
  :init
  ;; ------------------ Line Numbering ---------------------
  ;; set type of line numbering (global variable)
  (setq display-line-numbers-type 'relative)
  ;; activate line numbering in all buffers/modes
  (global-display-line-numbers-mode 1)

  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; Activate line numbering in programming modes
  ;; (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  )
#+end_src

*** Fill column & modeline column info
:PROPERTIES:
:CUSTOM_ID: h:9F8FCA21-383E-42FA-BA7D-59DD3ECEB950
:END:
#+begin_src emacs-lisp
(use-package emacs
  :init
  (setq-default fill-column 85)
  (global-display-fill-column-indicator-mode)

  ;; Columns number in the modeline
  (setq column-number-mode t)
  )
#+end_src

*** Other
:PROPERTIES:
:CUSTOM_ID: h:5C66A615-DF0F-43EC-8446-28ADEBF553F8
:END:
#+begin_src emacs-lisp
(use-package emacs
  :init
  ;; use common convention for indentation by default
  ;;(setq-default indent-tabs-mode t)
  ;;(setq-default tab-width 2)

  ;; Enable indentation+completion using the TAB key.
  ;; Completion is often bound to M-TAB.
  (setq tab-always-indent 'complete)

  (global-prettify-symbols-mode 1)

  ;; ------------------ Indent Behaviours ---------------------
  ;; Electric indent mode messes up with a bunch of languages indenting.
  ;; So disable it.
  (setq electric-indent-inhibit t)

  (global-visual-line-mode t)

  )
#+end_src

** Custom variables
:PROPERTIES:
:CUSTOM_ID: h:6BB5DBD1-2222-429E-8227-7F420E786E77
:END:
#+begin_src emacs-lisp
;; reopening the last killed buffer
(use-package emacs
  :init
  (defcustom synthmacs/default-font-family "FiraCode Nerd Font" 
    "Default font family"
    :type 'string
    :group 'synthmacs)

  (defcustom synthmacs/variable-pitch-font-family "Sans Serif"
    "Variable pitch font family"
    :type 'string
    :group 'synthmacs)
  
  (defcustom synthmacs--killed-buffer-list nil
    "List of recently killed buffers.")
  )
#+end_src

** Fonts
:PROPERTIES:
:CUSTOM_ID: h:07E35458-939C-4B52-B065-778D5F4D9F52
:END:
#+begin_src emacs-lisp
(use-package emacs
  :init
  ;; Main typeface
  (set-face-attribute 'default nil :font synthmacs/default-font-family :height 140)
  ;; Set the fixed pitch face (monospace)
  (set-face-attribute 'fixed-pitch nil :font synthmacs/default-font-family)
  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font synthmacs/variable-pitch-font-family)
  )
#+end_src

** Free Functions
:PROPERTIES:
:CUSTOM_ID: h:7C608EDA-7A99-49BB-BBCD-65E4CFCA0ED0
:END:

*** Buffers
:PROPERTIES:
:CUSTOM_ID: h:12AFFF8B-9081-4088-BA95-996206DA01AA
:END:
#+begin_src emacs-lisp
(defun synthmacs/add-buffer-to-killed-list ()
  "Add killed buffer to list for undo functionality.
If buffer is associated with a file name, add that file
to the `killed-buffer-list` when killing the buffer."
  (when buffer-file-name
    (push buffer-file-name synthmacs--killed-buffer-list)))

(add-hook 'kill-buffer-hook #'synthmacs/add-buffer-to-killed-list)

(defun synthmacs/alternate-buffer (&optional window)
  (interactive)
  (cl-destructuring-bind (buf start pos)
      (if (bound-and-true-p nil)
	  (let ((buffer-list (persp-buffer-list))
		(my-buffer (window-buffer window)))
	    (seq-find (lambda (it)
			(and (not (eq (car it) my-buffer))
			     (member (car it) buffer-list)))
		      (window-prev-buffers)
		      (list nil nil nil)))
	(or (cl-find (window-buffer window) (window-prev-buffers)
		     :key #'car :test-not #'eq)
	    (list (other-buffer) nil nil)))
    (if (not buf)
	(message "Last buffer not found.")
      (set-window-buffer-start-and-point window buf start pos))))

(defun synthmacs/reopen-killed-buffer ()
  "Reopen the most recently killed file buffer, if one exists."
  (interactive)
  (when synthmacs--killed-buffer-list
    (find-file (pop synthmacs--killed-buffer-list))))

;; Moving windows around
(require 'windmove)

;;;###autoload
(defun synthmacs/buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
  ;;  "Switches between the current buffer, and the buffer above the
  ;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun synthmacs/buf-move-down ()
  "Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun synthmacs/buf-move-left ()
  "Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun synthmacs/buf-move-right ()
  "Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;; (defun synthmacs/delete-current-buffer-file ()
;;   "Removes the file connected to the current buffer, and kills the buffer."
;;   (interactive)
;;   (let ((filename (buffer-file-name))
;; 	(buffer (current-buffer))
;; 	(name (buffer-name)))
;;     (if (not (and filename (file-exists-p filename)))
;; 	(ido-kill-buffer)
;;       (if (yes-or-no-p (format "Are you sure you want to delet this file: '%s'?" name))
;; 	  (progn
;; 	    (delete-file filename t)
;; 	    (kill-buffer buffer)
;; 	    (when (and (synthmacs/packaged-used-p 'projectile)
;; 		       (projectile-project-p))
;; 	      (call-interactively #'projectile-invalidate-cache))
;; 	    (message "File deleted: '%s'" filename))
;; 	(message "Cancelled file deletion")))))
#+end_src

*** Copying file paths
:PROPERTIES:
:CUSTOM_ID: h:B0981CAF-B4C2-499E-A218-788F1491D0A3
:END:

#+begin_src emacs-lisp
(defun synthmacs//directory-path ()
  "Retrieve the directory path of the current buffer.

If the buffer is not visiting a file, use the `list-buffers-directory' variable
as a fallback to display the directory, useful in buffers like the ones created
by `magit' and `dired'.

Returns:
  - A string containing the directory path in case of success.
  - `nil' in case the current buffer does not have a directory."
  (when-let (directory-name (if-let (file-name (buffer-file-name))
                                (file-name-directory file-name)
                              list-buffers-directory))
    (file-truename directory-name)))

(defun synthmacs//file-path ()
  "Retrieve the file path of the current buffer.

Returns:
  - A string containing the file path in case of success.
  - `nil' in case the current buffer does not have a directory."
  (when-let (file-path (buffer-file-name))
    (file-truename file-path)))

(defun synthmacs//file-path-with-line ()
  "Retrieve the file path of the current buffer, including line number.

Returns:
  - A string containing the file path in case of success.
  - `nil' in case the current buffer does not have a directory."
  (when-let (file-path (synthmacs//file-path))
    (concat file-path ":" (number-to-string (line-number-at-pos)))))

(defun synthmacs//copy-directory-path ()
  "Copy and show the directory path of the current buffer.

If the buffer is not visiting a file, use the `list-buffers-directory'
variable as a fallback to display the directory, useful in buffers like the
ones created by `magit' and `dired'."
  (interactive)
  (if-let (directory-path (synthmacs//directory-path))
      (progn
        (kill-new directory-path)
        (message "%s" directory-path))
    (message "WARNING: Current buffer does not have a directory!")))

(defun synthmacs//copy-file-path ()
  "Copy and show the file path of the current buffer."
  (interactive)
  (if-let (file-path (synthmacs//file-path))
      (progn
        (kill-new file-path)
        (message "%s" file-path))
    (message "WARNING: Current buffer is not attached to a file!")))

(defun synthmacs//copy-file-name ()
  "Copy and show the file name of the current buffer."
  (interactive)
  (if-let* ((file-path (synthmacs//file-path))
            (file-name (file-name-nondirectory file-path)))
      (progn
        (kill-new file-name)
        (message "%s" file-name))
    (message "WARNING: Current buffer is not attached to a file!")))

(defun synthmacs//copy-buffer-name ()
  "Copy and show the name of the current buffer."
  (interactive)
  (kill-new (buffer-name))
  (message "%s" (buffer-name)))

(defun synthmacs//copy-file-name-base ()
  "Copy and show the file name without its final extension of the current
buffer."
  (interactive)
  (if-let (file-name (file-name-base (synthmacs//file-path)))
      (progn
        (kill-new file-name)
        (message "%s" file-name))
    (message "WARNING: Current buffer is not attached to a file!")))

(defun synthmacs//copy-file-path-with-line ()
  "Copy and show the file path of the current buffer, including line number."
  (interactive)
  (if-let (file-path (synthmacs//file-path-with-line))
      (progn
        (kill-new file-path)
        (message "%s" file-path))
    (message "WARNING: Current buffer is not attached to a file!")))
#+end_src

*** Renaming files & buffers
:PROPERTIES:
:CUSTOM_ID: h:394285B9-12FD-4DB8-B82F-3FDAE36AECDC
:END:
From Spacemacs.
#+begin_src emacs-lisp
(defun synthmacs/rename-current-buffer-file (&optional arg)
  "Rename the current buffer and the file it is visiting.
If the buffer isn't visiting a file, ask if it should
be saved to a file, or just renamed.

If called without a prefix argument, the prompt is
initialized with the current directory instead of filename."
  (interactive "P")
  (let ((file (buffer-file-name)))
    (if (and file (file-exists-p file))
	(synthmacs/rename-buffer-visiting-a-file arg)
      (synthmacs/rename-buffer-or-save-new-file))))

(defun synthmacs/rename-buffer-visiting-a-file (&optional arg)
  (let* ((old-filename (buffer-file-name))
         (old-short-name (file-name-nondirectory (buffer-file-name)))
         (old-dir (file-name-directory old-filename))
         (new-name (let ((path (read-file-name "New name: " (if arg old-dir old-filename))))
                     (if (string= (file-name-nondirectory path) "")
                         (concat path old-short-name)
                       path)))
         (new-dir (file-name-directory new-name))
         (new-short-name (file-name-nondirectory new-name))
         (file-moved-p (not (string-equal new-dir old-dir)))
         (file-renamed-p (not (string-equal new-short-name old-short-name))))
    (cond ((get-buffer new-name)
           (error "A buffer named '%s' already exists!" new-name))
          ((string-equal new-name old-filename)
           (message "Rename failed! Same new and old name" 1.5)
           (synthmacs/rename-current-buffer-file))
          (t
           (let ((old-directory (file-name-directory new-name)))
             (when (and (not (file-exists-p old-directory))
                        (yes-or-no-p
                         (format "Create directory '%s'?" old-directory)))
               (make-directory old-directory t)))
           (rename-file old-filename new-name 1)
           (rename-buffer new-name)
           (set-visited-file-name new-name)
           (set-buffer-modified-p nil)
           (when (fboundp 'recentf-add-file)
             (recentf-add-file new-name)
             (recentf-remove-if-non-kept old-filename))
           (when (and (require 'projectile nil 'noerror)
                      (projectile-project-p))
             (funcall #'projectile-invalidate-cache nil))
           (message (cond ((and file-moved-p file-renamed-p)
                           (concat "File Moved & Renamed\n"
                                   "From: " old-filename "\n"
                                   "To:   " new-name))
                          (file-moved-p
                           (concat "File Moved\n"
                                   "From: " old-filename "\n"
                                   "To:   " new-name))
                          (file-renamed-p
                           (concat "File Renamed\n"
                                   "From: " old-short-name "\n"
                                   "To:   " new-short-name))))))))


(defun synthmacs/rename-buffer-or-save-new-file ()
  (let ((old-short-name (buffer-name))
	key)
    (while (not (memq key '(?s ?r)))
      (setq key (read-key (propertize
			   (format
			    (concat "Buffer '%s' is not visiting a file: "
				    "[s]ave to file or [r]ename buffer?")
			    old-short-name)
			   'face 'minibuffer-prompt)))
      (cond ((eq key ?s)    ; save to file
	     (unless (buffer-modified-p) (set-buffer-modified-p t))
	     (save-buffer))
	    ((eq key ?r)    ; rename buffer
	     (let ((new-buffer-name (read-string ("New buffer namme: ")))
		   ;; ask to rename again, if the new buffer name exists
		   (if (yes-or-no-p
			(format
			 (concat "A buffer named '%s' already exists: "
				 "Rename again?")
			 new-buffer-name))
		       (setq new-buffer-name (read-string "New buffer name: "))
		     (keyboard-quit)))
	       (rename-buffer new-buffer-name)
	       (message (concat "Buffer Renamed\n"
				"From: " old-short-name "\n"
				"To:   " new-buffer-name ))))
	    ;; ?\a = C-g, ?\e = Esc and C-[
	    ((memq key '(?\a ?\e)) (keyboard-quit))))))

#+end_src

*** <C-h> in the minibuffer while completing a file name
:PROPERTIES:
:CUSTOM_ID: h:14B4AD1F-CC7B-42BF-8C28-33019F387080
:END:
From SystemCrafters

#+begin_src emacs-lisp
(defun synthmacs/minibuffer-backwards-kill (arg)
  "When minibuffer is completing a file name, delete up to parent
folder; otherwise, delete a character backwards."
  (interactive "p")
  (if minibuffer-completing-file-name
      (if (string-match-p "/." (minibuffer-contents))
	  (zap-up-to-char (- arg) ?/)
	(delete-minibuffer-contents))
    (delete-backwards-char arg)))
#+end_src

*** Symbols
:PROPERTIES:
:CUSTOM_ID: h:86C4D8A2-9E75-46C9-AE4B-F4DBBDC9AA61
:END:
#+begin_src emacs-lisp
(defun synthmacs/my-add-pretty-symbol ()
  (setq prettify-symbols-alist
        '(
          ("lambda" . 955) ; λ
          ;; ("->" . 8594)    ; →
          ;; ("=>" . 8658)    ; ⇒
          ;; ("map" . 8614)   ; ↦
          )))
#+end_src

*** Quit (but save before doing so!)
:PROPERTIES:
:CUSTOM_ID: h:12B3E275-99FC-4184-9314-44B02CD78861
:END:
#+begin_src emacs-lisp
(defun synthmacs/prompt-kill-emacs ()
  "Prompt to save changed buffers and exit Synthmacs"
  (interactive)
  (save-some-buffers nil t)
  (kill-emacs))

#+end_src

** COMMENT Garbage collector magic hack
:PROPERTIES:
:CUSTOM_ID: h:42E8D107-2954-49CB-8E38-33CF300BABDE
:END:
Inspired by DOOMs use of this to manage garbage collection

#+begin_src emacs-lisp
(use-package gcmh
  :demand
  :config
  (gcmh-mode 1))
#+end_src

** COMMENT no-littering
:PROPERTIES:
:CUSTOM_ID: h:23600A76-1CDE-48FE-9024-163E861F2F0C
:END:
Basically tries to clean up the ~emacs.d~ directory by creating consistent placement for files.

#+begin_src emacs-lisp
(use-package no-littering
  :demand
  :config
  (with-eval-after-load 'recentf
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory))
  )
#+end_src

** Auto-pair paranthesis
:PROPERTIES:
:CUSTOM_ID: h:7B34AC43-8F07-4754-9360-0592CBDBAF9F
:END:
In programming, missing parens and the like are a pain to track down. Let's automate some of that to decrease the likely hood of this actually happening.

#+begin_src emacs-lisp
(use-package emacs
  :hook
  ((org-mode . (lambda () (synthmacs/add-local-electric-pairs '(;(?= . ?=)
                                                         (?~ . ?~))))))
  :init
  (electric-pair-mode +1)
  (setq electric-pair-preserve-balance nil)

  ;; mode-specific local-electric pairs
  (defconst synthmacs/default-electric-pairs electric-pair-pairs)
  (defun synthmacs/add-local-electric-pairs (pairs)
    "Example usage: 
    (add-hook 'jupyter-org-interaction-mode '(lambda () (set-local-electric-pairs '())))
    "
    (setq-local electric-pair-pairs (append synthmacs/default-electric-pairs pairs))
    (setq-local electric-pair-text-pairs electric-pair-pairs))

  ;; disable auto pairing for <  >
  (add-function :before-until electric-pair-inhibit-predicate
                (lambda (c) (eq c ?<   ;; >
                                )))
  )  
#+end_src

** COMMENT xref
:PROPERTIES:
:CUSTOM_ID: h:088A31CF-3AEF-4AF4-B60D-B2793FCDDB94
:END:
#+begin_src emacs-lisp
(use-package xref
  :straight (:type built-in)
  :init
  (setq xref-prompt-for-identifier nil) ;; always find references of symbol at point
  ;; configured in consult
  ;; (setq xref-show-definitions-function #'xref-show-definitions-completing-read)
  ;; (setq xref-show-xrefs-function #'xref-show-definitions-buffer) ; for grep and the like
  ;; (setq xref-file-name-display 'project-relative)
  ;; (setq xref-search-program 'grep)
  )
#+end_src

* Keybindings: General & EVIL mode
:PROPERTIES:
:CUSTOM_ID: h:D7FB11B6-67B4-4275-B0CC-E218C65C411E
:header-args: :emacs-lisp :tangle ./synthmacs/synthmacs-general-evil.el
:END:

** General
:PROPERTIES:
:CUSTOM_ID: h:871AF14C-473E-4227-B4BF-13E984BE1E7D
:END:
Here, we load ~general~ and define bindings for generic commands (~find-file~ for example). The commands provided by packages should be binded in the ~use-package~ block, thanks to the ~:general~ keyword.

NOTE: We need to load ~general~ before ~evil~, otherwise the ~:general~ keyword in the use-package blocks won't work.

#+begin_src emacs-lisp
(use-package general
  :demand t
  :config
  (general-evil-setup)

  ;; set up 'SPC' as the global leader key
  (general-create-definer synthmacs/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (general-create-definer synthmacs/local-leader-keys
    :states '(normal visual)
    :keymaps 'override
    :prefix ","
    :global-prefix "SPC m")
  )
#+end_src

** General keybindings
:PROPERTIES:
:CUSTOM_ID: h:F8198789-D8ED-49CF-88F5-C6619539211E
:END:

*** Application bindings
:PROPERTIES:
:CUSTOM_ID: h:919D720B-1ACC-441F-9822-8FAB69EB625F
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "a" '(:ignore t :wk "applications"))
#+end_src

*** Buffer bindings
:PROPERTIES:
:CUSTOM_ID: h:9624A127-D219-4FAA-A4B6-582996655F01
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "b" '(:ignore t :wk "buffer")
  "bb" '(switch-to-buffer :wk "Switch buffer")
  "bd" '(kill-this-buffer :wk "Kill this buffer")
  "bh" '(dashboard-refresh-buffer :wk "Home buffer")
  "bm" '((lambda ()
	   (interactive)
	   (switch-to-buffer " *Message-Log*"))
	 :wk "Messages buffer")
  "bn" '(next-buffer :wk "Next buffer")
  "bp" '(previous-buffer :wk "Previous buffer")
  "br" '(revert-buffer :wk "Reload buffer")
  "bs" '(scratch-buffer :wk "Scratch buffer")
  "bu" '(synthmacs/reopen-killed-buffer :wk "Reopen last killed buffer"))
#+end_src

*** Compilation bindings
:PROPERTIES:
:CUSTOM_ID: h:BC80000B-14BD-435B-AF41-69ECCE16AC08
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "c" '(:ignore t :wk "compile")
  "cf" '(find-file :wk "Find file"))
#+end_src

*** Debug bindings
:PROPERTIES:
:CUSTOM_ID: h:FF739FE8-70DB-4DBB-B009-1ABE294AB393
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "d" '(:ignore t :wk "debug")
  "df" '(find-file :wk "Find file"))
#+end_src

*** Error bindings
:PROPERTIES:
:CUSTOM_ID: h:AC006610-1BD5-4962-8319-FE8B08D0DFC5
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "e" '(:ignore t :wk "errors")
  "ef" '(find-file :wk "Find file"))
#+end_src

*** Files bindings
:PROPERTIES:
:CUSTOM_ID: h:AD60DD6B-FDFB-4D31-BE5B-B984E2944598
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "f" '(:ignore t :wk "files")
  "f." '(find-file-at-point :wk "find-file-at-point")
  "ff" '(find-file :wk "find-file")
  "fl" '(find-file-literally :wk "find-file-literally")
  "fr" '(consult-recent-file :wk "recent file")
  "fR" '(synthmacs/rename-current-buffer-file :wk "Rename file")
  "fs" '(save-buffer :wk "save file"))

(synthmacs/leader-keys
  "fy" '(:ignore t :wk "yank")
  "fyb" '(synthmacs//copy-buffer-name :wk "buffer name")
  "fyd" '(synthmacs//copy-directory-path :wk "directory path")
  "fyf" '(synthmacs//copy-file-path :wk "file path")
  "fyl" '(synthmacs//copy-file-path-with-line :wk "file path with line number")
  "fyn" '(synthmacs//copy-file-name :wk "file name")
  "fyN" '(synthmacs//copy-file-name-base :wk "file name without extension"))

(synthmacs/leader-keys
  "fe" '(:ignore t :wk "Emacs Files")
  "fed" '((lambda ()
	    (interactive)
	    (find-file "~/.emacs.d/synthmacs.org"))
	  :wk "synthmacs.org"))
#+end_src

*** Frame bindings
:PROPERTIES:
:CUSTOM_ID: h:4C073FB0-DDD2-4648-98CF-A108B7733096
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "F" '(:ignore t :wk "Frames")
  "Fd" '(delete-frame :wk "delete-frame")
  "FD" '(delete-other-frames :wk "delete-other-frames")
  "Fn" '(make-frame :wk "make-frame"))
#+end_src

*** Git/VCS bindings
:PROPERTIES:
:CUSTOM_ID: h:DA032070-22DA-4C6D-815E-147617662953
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "g" '(:ignore t :wk "git"))
#+end_src

*** Help bindings
:PROPERTIES:
:CUSTOM_ID: h:7D9257A5-58D9-4B53-93EC-D1962282E1AA
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "h" '(:ignore t :wk "help")
  "hp" '(describe-package :wk "describe-package")
  "hM" '(describe-mode :wk "describe-mode (Major)")
  "hm" '(describe-minor-mode :wk "describe-minor-mode")

  "hE" '(:ignore t :wk "Emacs")
  "hEf" '(view-emacs-FAQ :wk "view-emacs-faq")
  "hEm" '(info-emacs-manual :wk "info-emacs-manual")
  "hEn" '(view-emacs-news :wk "view-emacs-news")
  "hEp" '(view-emacs-problems :wk "view-emacs-problems")
  "hEt" '(view-emacs-todo :wk "view-emacs-todo"))
#+end_src

*** Jump bindings
:PROPERTIES:
:CUSTOM_ID: h:8EE273DF-ECFF-4C88-9F43-D5CDA596BE74
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "j" '(:ignore t :wk "jump/join/split"))
#+end_src

*** M-x bindings
:PROPERTIES:
:CUSTOM_ID: h:B2BB706A-87A6-48AD-8B8D-5D514A3722AB
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "SPC" '(:ignore t :wk "M-x")
  "SPC" '(execute-extended-command :wk "M-x")
  "TAB" '(synthmacs/alternate-buffer :wk "last buffer"))
;; "'" '(execute-extended-command :wk "open shell")
#+end_src

*** Major-mode bindings
:PROPERTIES:
:CUSTOM_ID: h:6004A24A-C951-41FB-A2D3-42AAD6DC2143
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "m" '(:ignore t :wk "major mode"))
#+end_src

*** Org bindings
:PROPERTIES:
:CUSTOM_ID: h:FF0E16D7-1239-4A2D-A81D-CB45A1019ED0
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "o" '(:ignore t :wk "org"))
#+end_src

*** Project bindings
:PROPERTIES:
:CUSTOM_ID: h:492B2741-254E-4FFC-BB18-C79AEF74D7A1
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "p" '(:ignore t :wk "projects"))
#+end_src

*** Quit bindings
:PROPERTIES:
:CUSTOM_ID: h:01C7280C-69EF-47D6-B50B-6362A9D82BDF
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "q" '(:ignore t :wk "quit")
  "qq" '(synthmacs/prompt-kill-emacs :wk "prompt-kill-emacs")
  "qs" '(save-buffers-kill-emacs :wk "save-buffers-kill-emacs")
  "qQ" '(kill-emacs :wk "kill-emacs")
  "qR" '(restart-emacs :wk "restart-emacs"))
#+end_src

*** Registers bindings
:PROPERTIES:
:CUSTOM_ID: h:4603106A-5ABD-4FD3-8EA0-F67A598CCB02
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "r" '(:ignore t :wk "registers")
  "re" '(evil-show-registers :wk "evil-show-registers")
  "rk" '(consult-yank-from-kill-ring :wk "consult-yank-from-kill-ring"))
#+end_src

*** Search bindings
:PROPERTIES:
:CUSTOM_ID: h:1EB3AA9F-8F66-427D-A2B8-FE65730DF6A5
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "s" '(:ignore t :wk "search")
  "sc" '(evil-ex-nohighlight :wk "clear-search-highlights"))
#+end_src

*** Toggles bindings
:PROPERTIES:
:CUSTOM_ID: h:5A330DCC-5B77-4C92-ACF1-5195ECBBDC32
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "t" '(:ignore t :wk "toggles")
  "tc" '(global-display-fill-column-indicator-mode :wk "fill-column")
  "tp" '(smartparens-global-mode :wk "smartparens-global-mode")
  "tl" '(toggle-truncate-lines :wk "truncate-lines")
  "tv" '(visual-line-mode :wk "visual-line-mode")
  "tw" '(global-whitespace-mode :wk "global-whitespace-mode")
  "tz" '(zone :wk "zone"))
#+end_src

*** User bindings
:PROPERTIES:
:CUSTOM_ID: h:0F5F8697-278F-4363-B3DD-72E80F010402
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "u" '(:ignore t :wk "user bindings"))
#+end_src

*** Window bindings
:PROPERTIES:
:CUSTOM_ID: h:7D0252BE-EDAD-42EE-837B-D216E21197BE
:END:
#+begin_src emacs-lisp
(synthmacs/leader-keys
  "w" '(:ignore t :wk "window")

  "wd" '(evil-window-delete :wk "delete-window")

  "ws" '(evil-window-split :wk "horizontal split window")
  "wv" '(evil-window-vsplit :wk "vertical split window")

  "wm" '(maximize-window :wk "maximize-window")

  ;; Window motions
  "wh" '(evil-window-left :wk "window left")
  "wj" '(evil-window-down :wk "window down")
  "wk" '(evil-window-up :wk "window up")
  "wl" '(evil-window-right :wk "window right")
  "wn" '(evil-window-next :wk "go to next window")
  "wp" '(evil-window-prev :wk "go to previous window")

  ;; Move Windows
  "wH" '(synthmacs/buf-move-left :wk "window move left")
  "wJ" '(synthmacs/buf-move-down :wk "window move down")
  "wK" '(synthmacs/buf-move-up :wk "window move up")
  "wL" '(synthmacs/buf-move-right :wk "window move right")

  "w{" '(shrink-window :wk "shrink-window")
  "w[" '(synthmacs/buf-move-down :wk "shrink-window-horizontally")
  "w}" '(synthmacs/buf-move-up :wk "expand-window")
  "w]" '(synthmacs/buf-move-right :wk "expand-window-horizontally"))
#+end_src

** Hydra
:PROPERTIES:
:CUSTOM_ID: h:E25DB824-33FC-457C-9547-B457A4019A0F
:END:
#+begin_src emacs-lisp
(use-package hydra
  :general
  (synthmacs/leader-keys
    "tf" '(hydra/text-scale/body :wk "font size")))

(defhydra hydra/text-scale (:timeout 7)
  "
^Zoom Menu
^^^^^^^^----------------------
_+_: text-scale-increase
_-_: text-scale-decrease
_q_: quit
"
  ("+" text-scale-increase)
  ("-" text-scale-decrease)
  ("q" nil :exit t))


;; Buffer menu
;; (defhydra hydra/buffer-menu (:color pink
;;                              :hint nil)
;;   "
;; ^Mark^             ^Unmark^           ^Actions^          ^Search
;; ^^^^^^^^-----------------------------------------------------------------
;; _m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch
;; _s_: save          _U_: unmark up     _b_: bury          _I_: isearch
;; _d_: delete        ^ ^                _g_: refresh       _O_: multi-occur
;; _D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only
;; _~_: modified
;; "
;;   ("m" Buffer-menu-mark)
;;   ("u" Buffer-menu-unmark)
;;   ("U" Buffer-menu-backup-unmark)
;;   ("d" Buffer-menu-delete)
;;   ("D" Buffer-menu-delete-backwards)
;;   ("s" Buffer-menu-save)
;;   ("~" Buffer-menu-not-modified)
;;   ("x" Buffer-menu-execute)
;;   ("b" Buffer-menu-bury)
;;   ("g" revert-buffer)
;;   ("T" Buffer-menu-toggle-files-only)
;;   ("O" Buffer-menu-multi-occur :color blue)
;;   ("I" Buffer-menu-isearch-buffers :color blue)
;;   ("R" Buffer-menu-isearch-buffers-regexp :color blue)
;;   ("c" nil "cancel")
;;   ("v" Buffer-menu-select "select" :color blue)
;;   ("o" Buffer-menu-other-window "other-window" :color blue)
;;   ("q" quit-window "quit" :color blue))

;; (synthmacs/leader-keys
;;   "bl" '(buffer-menu :wk "buffer list"))

;; ;; More keymaps
;; (general-define-key
;;  :keymaps 'Buffer-menu-mode-map
;;  "C-?" 'hydra/buffer-menu/body)
#+end_src

** Evil
:PROPERTIES:
:CUSTOM_ID: h:D64CA666-A9A1-4DE2-900D-32E3726F6792
:END:
#+begin_src emacs-lisp
(setq evil-search-module 'evil-search)
(setq evil-ex-search-persistent-highlight t)
(setq evil-undo-system 'undo-redo)

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-normal-state-map "`" 'evil-goto-mark-line)
  (define-key evil-normal-state-map "'" 'evil-goto-mark)
  (define-key evil-visual-state-map "'" 'evil-goto-mark)
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  (evil-set-initial-state 'messages-buffer-mode 'normal))

(use-package evil-anzu
  :init (global-anzu-mode t)
  :config
  (setq anzu-search-threshold 1000
	anzu-cons-mode-line-p nil))

(use-package evil-args
  :config
  (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
  (define-key evil-outer-text-objects-map "a" 'evil-outer-arg))

(use-package evil-cleverparens
  :init
  (setq evil-cleverparens-use-regular-insert t)
  :config
  ;; `evil-cp-change` should move to point
  (evil-set-command-properties 'evil-cp-change :move-point t))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

(use-package evil-commentary
  :defer nil
  :config
  (evil-commentary-mode))

(use-package evil-exchange
  :config
  (setq evil-exchange-key (kbd "gx"))
  (setq evil-exchange-cancel-key (kbd "gX"))
  (define-key evil-normal-state-map evil-exchange-key 'evil-exchange)
  (define-key evil-visual-state-map evil-exchange-key 'evil-exchange)
  (define-key evil-normal-state-map evil-exchange-cancel-key
              'evil-exchange-cancel)
  (define-key evil-visual-state-map evil-exchange-cancel-key
              'evil-exchange-cancel))

(use-package evil-goggles
  :init
  ;; disable pulses as it is more distracting than useful and
  ;; less readable.
  (setq evil-goggles-pulse nil
	evil-goggles-async-duration 0.1
	evil-goggles-blocking-duration 0.05)
  :config
  (evil-goggles-mode))

(use-package evil-iedit-state
  :commands (evil-iedit-state evil-iedit-state/iedit-mode)
  :init
  (setq iedit-current-symbol-default t
        iedit-only-at-symbol-boundaries t
        iedit-toggle-key-default nil)
  :general
  (synthmacs/leader-keys
    "se" '(evil-iedit-state/iedit-mode :wk "iedit-mode")))

;; (use-package evil-lion
;;   :init
;;   (evil-define-key '(normal visual) 'global
;;     "gl" #'evil-lion-left
;;     "gL" #'evil-lion-right)
;;   :config (evil-lion-mode))

;; https://github.com/syl20bnr/evil-lisp-state
;; (use-package evil-lisp-state
;; :defer t
;; :init
;; (add-hook 'prog-mode-hook 'synthmacs/load-evil-lisp-state)
;; (setq evil-lisp-state-global t))

;; (synthmacs/leader-keys
;;   "l" '(evil-lisp-state-map :wk "lisp-state"))
;; (spacemacs/declare-prefix
;;   "l" "lisp"
;;   "ld" "delete"
;;   "lD" "delete-backward"
;;   "l`" "hybrid")))

;; (defun synthmacs/load-evil-lisp-state ()
;;     "Loads evil-lisp-state lazily"
;;   (remove-hook 'prog-mode-hook #'synthmacs/load-evil-lisp-state))

(use-package evil-matchit
  :init
  (global-evil-matchit-mode 1))

(use-package evil-numbers
  :defer t
  :general
  (synthmacs/leader-keys
    "n" '(synthmacs/hydra/numbers-state/body :wk "numbers")))

(defhydra synthmacs/hydra/numbers-state (:timeout 7)
  "
^Numbers Menu
^^^^^^^^----------------------
_+_: increment-at-point
_-_: decrement-at-point
_q_: quit
"
  ("+" evil-numbers/inc-at-pt)
  ("-" evil-numbers/dec-at-pt)
  ("q" nil :exit t))

(use-package evil-surround
  :init
  ;; `s' for surround instead of `substitute'
  ;; see motivation here:
  ;; https://github.com/syl20bnr/spacemacs/blob/develop/doc/DOCUMENTATION.org#the-vim-surround-case
  (evil-define-key 'visual evil-surround-mode-map "s" 'evil-surround-region)
  (evil-define-key 'visual evil-surround-mode-map "S" 'evil-substitute)
  :config
  (global-evil-surround-mode 1))

(use-package evil-textobj-line)

(use-package evil-visual-mark-mode
  :defer t
  :general
  (synthmacs/leader-keys
    "t`" '(evil-visual-mark-mode :wk "visual-mark-mode")))

(use-package evil-visualstar
  :commands (evil-visualstar/begin-search-forward
             evil-visualstar/begin-search-backward)
  :init
  (define-key evil-visual-state-map (kbd "*") 'evil-visualstar/begin-search-forward)
  (define-key evil-visual-state-map (kbd "#") 'evil-visualstar/begin-search-backward))

;; Evil-Vimish-Fold - https://github.com/alexmurray/evil-vimish-fold
;;(use-package evil-vimish-fold
;;  :after vimish-fold
;;  :hook ((prog-mode conf-mode text-mode) . evil-vimish-fold-mode))
#+end_src

* Org Mode
:PROPERTIES:
:CUSTOM_ID: h:B1DBE90D-B6C9-4BD4-B15B-185FE238D236
:header-args: :emacs-lisp :tangle ./synthmacs/synthmacs-org.el
:END:
** org mode
:PROPERTIES:
:CUSTOM_ID: h:934C85A9-D8DB-455F-A19C-570300047FD5
:END:
Interesting bits:
- If you use + in lists it will show up as below:
  + subitem
- you can cycle to next TODO state with ~org-shiftright~
- You can access custom agenda views with ~org-agenda~, mapped to =SPC o A=
- You insert a src block use =, i= and then type initials e.g. ~jp~  for ~jupyter-python~

#+BEGIN_SRC emacs-lisp
(use-package org
  ;; :straight org-plus-contrib
  ;; :straight (:type built-in)
  :hook ((org-mode . prettify-symbols-mode)
         (org-mode . visual-line-mode))
  :general
  ;; (lc/leader-keys
  ;;   "f t" '(org-babel-tangle :wk "tangle")
  ;;   "o C" '(org-capture :wk "capture")
  ;;   "o l" '(org-todo-list :wk "todo list")
  
  ;;   "o c" '((lambda () (interactive)
  ;;             (persp-switch "main")
  ;;             (find-file (concat user-emacs-directory "readme.org")))
  ;;           :wk "open config")
  ;;   )
  (synthmacs/leader-keys
    ;;   :keymaps 'org-mode-map
    ;;   "a" '(org-archive-subtree :wk "archive subtree")
    ;;   "E" '(org-export-dispatch :wk "export")
    "ui" '(org-insert-structure-template :wk "insert src")
    ;;   "l" '(:ignore true :wk "link")
    "ul" '(org-insert-link :wk "insert link")
    ;;   "l s" '(org-store-link :wk "store link")
    ;;   "L" '((lambda () (interactive) (org-latex-preview)) :wk "latex preview")
    ;;   ;; "L" '((lambda () (interactive) (org--latex-preview-region (point-min) (point-max))) :wk "latex")
    ;;   "r" '(org-refile :wk "refile")
    ;;   "n" '(org-toggle-narrow-to-subtree :wk "narrow subtree")
    ;;   "p" '(org-priority :wk "priority")
    ;;   "q" '(org-set-tags-command :wk "tag")
    ;;   "s" '(org-sort :wk "sort")
    ;;   "t" '(:ignore true :wk "todo")
    ;;   "t t" '(org-todo :wk "heading todo")
    ;;   "t s" '(org-schedule :wk "schedule")
    ;;   "t d" '(org-deadline :wk "deadline")
    ;;   "x" '(org-toggle-checkbox :wk "toggle checkbox")
    )
  ;; (org-mode-map
  ;;  :states 'insert
  ;;  "TAB" 'lc/org-indent-or-complete
  ;;  "S-TAB" nil)
  ;; (org-mode-map
  ;;  :states 'normal
  ;;  "z i" '(org-toggle-inline-images :wk "inline images"))
  :init
  ;; general settings
  (when (file-directory-p "~/Developer/ExoCortex/org")
    (setq org-directory "~/Developer/ExoCortex/org"
          +org-export-directory "~/Developer/ExoCortex/org/export"
          org-default-notes-file "~/Developer/ExoCortex/org/notes.org"
          org-id-locations-file "~/Developer/ExoCortex/org/.orgids"
          ))	
  ;; (setq org-export-in-background t)
  (setq org-src-preserve-indentation t) ;; do not put two spaces on the left
  (setq org-startup-indented t)
  ;;(setq org-startup-with-inline-images t)
  (setq org-hide-emphasis-markers nil)
  (setq org-catch-invisible-edits 'smart)
  (setq org-image-actual-width nil)
  (setq org-indent-indentation-per-level 1)
  (setq org-list-demote-modify-bullet '(("-" . "+") ("+" . "*")))
  ;; disable modules for faster startup
  ;; (setq org-modules
  ;;       '(ol-docview
  ;;         org-habit))
  ;; (setq org-todo-keywords
  ;;       '((sequence "TODO(t)" "NEXT(n)" "PROG(p)" "|" "HOLD(h)" "DONE(d)")))
  (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "»")
                                         ("#+END_SRC" . "«")
                                         ("#+begin_src" . "»")
                                         ("#+end_src" . "«")
                                         ("lambda"  . "λ")
                                         ("->" . "→")
                                         ("->>" . "↠")))
  ;; (setq prettify-symbols-unprettify-at-point 'right-edge)
  ;;   (defun lc/org-indent-or-complete ()
  ;;     "Complete 
  ;; if point is at end of a word, otherwise indent line."
  ;;     (interactive)
  ;;     (if (looking-at "\\>")
  ;;         (dabbrev-expand nil)
  ;;       (org-cycle)
  ;;       ))
  ;; (setq warning-
  ;; 	suppress-types (append warning-suppress-types '((org-element-cache))))
  :config
  ;; ;; (efs/org-font-setup)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("clj" . "src clojure"))
  ;; ;; fontification
  ;; (add-to-list 'org-src-lang-modes '("jupyter-python" . python))
  ;; (add-to-list 'org-src-lang-modes '("jupyter-R" . R))
  ;; ;; latex
  ;; ;; (setq org-latex-compiler "xelatex")
  ;; ;; see https://www.reddit.com/r/emacs/comments/l45528/questions_about_mving_from_standard_latex_to_org/gkp4f96/?utm_source=reddit&utm_medium=web2x&context=3
  ;; ;; (setq org-latex-pdf-process '("TEXINPUTS=:$HOME/git/AltaCV//: tectonic %f"))
  ;; (setq org-latex-pdf-process '("tectonic %f"))
  ;; (setq org-export-backends '(html))
  ;; ;; (add-to-list 'org-export-backends 'beamer)
  ;; (plist-put org-format-latex-options :scale 1.2)
  )
#+END_SRC

** Enabling the Table of Contents
:PROPERTIES:
:CUSTOM_ID: h:5415BD51-CBCC-46BD-85C2-7355CB5F88CE
:END:
#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Using org-id in links
:PROPERTIES:
:CUSTOM_ID: h:AC175A47-E576-4AA6-A9C7-709129F4C56F
:header-args: :emacs-lisp :tangle ./synthmacs/synthmacs-org.el
:END:
Taken from https://writequit.org/articles/emacs-org-mode-generate-ids.html

Problem: when exporting org files to HTML, the header anchors are volatile. Once I publish a new HTML version of this file, the previous version's links are no longer valid.

This function adds ~CUSTOM_ID~ property to all headings in a file (one-time).
We can then use this to link to that heading forever.

Adding it as a ~after-save-hook~  automatically adds a ~CUSTOM_ID~ to newly created headers.

#+begin_src emacs-lisp
(use-package org
  :init
  (defun synthmacs/org-custom-id-get (&optional pom create prefix)
    "Get the CUSTOM_ID property of the entry at point-or-marker POM.
   If POM is nil, refer to the entry at point. If the entry does
   not have an CUSTOM_ID, the function returns nil. However, when
   CREATE is non nil, create a CUSTOM_ID if none is present
   already. PREFIX will be passed through to `org-id-new'. In any
   case, the CUSTOM_ID of the entry is returned."
    (interactive)
    (org-with-point-at pom
      (let ((id (org-entry-get nil "CUSTOM_ID")))
        (cond
         ((and id (stringp id) (string-match "\\S-" id))
          id)
         (create
          (setq id (org-id-new (concat prefix "h")))
          (org-entry-put pom "CUSTOM_ID" id)
          (org-id-add-location id (buffer-file-name (buffer-base-buffer)))
          id)))))

  (defun synthmacs/org-add-ids-to-headlines-in-file ()
    "Add CUSTOM_ID properties to all headlines in the current file.
   Only do so for those which do not already have one. Only adds ids
   if the `auto-id' option is set to `t' in the file somewhere. ie,
   ,#+OPTIONS: auto-id:t"
    (interactive)
    (save-excursion
      (widen)
      (goto-char (point-min))
      (when (re-search-forward "^#\\+OPTIONS:.*auto-id:t" (point-max) t)
        (org-map-entries (lambda () (synthmacs/org-custom-id-get (point) 'create))))))
  :config
  (require 'org-id)
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
  )
#+end_src

** Tangling this file
:PROPERTIES:
:CUSTOM_ID: h:16B948EA-5375-44DE-ACD7-3664D4A9CE5F
:header-args: :emacs-lisp :tangle ./synthmacs/synthmacs-org.el
:END:
Taken from https://github.com/KaratasFurkan/.emacs.d

#+begin_src emacs-lisp
(use-package org
  :config
  (require 's)
  (defun synthmacs/async-process (command &optional name filter)
    "Start an async process by running the COMMAND string with bash. Return the
  process object for it.

  NAME is name for the process. Default is \"async-process\".

  FILTER is function that runs after the process is finished, its args should be
  \"(process output)\". Default is just messages the output."
    (make-process
     :command `("bash" "-c" ,command)
     :name (if name name
	     "async-process")
     :filter (if filter filter
	       (lambda (process output) (message (s-trim output))))))


  (defun synthmacs/tangle-config ()
    "Export code blocks from the literate config file
  asynchronously."
    (interactive)
    (let ((command (if (file-directory-p "/opt/homebrew/opt/emacs-plus@29/Emacs.app")
		       "/opt/homebrew/opt/emacs-plus@29/Emacs.app/Contents/MacOS/Emacs %s --batch --eval '(org-babel-tangle nil \"%s\")'"
		     )))
      ;; prevent emacs from killing until tangle-process finished
      ;; (add-to-list 'kill-emacs-query-functions
      ;;              (lambda ()
      ;;                (or (not (process-live-p (get-process "tangle-process")))
      ;;                    (y-or-n-p "\"fk/tangle-config\" is running; kill it? "))))
      ;; tangle config asynchronously
      (synthmacs/async-process
       (format command
	       (expand-file-name "synthmacs.org" user-emacs-directory)
	       (expand-file-name "init.el" user-emacs-directory))
       "tangle-process")
      )

    )
  )
#+end_src

* UI
:PROPERTIES:
:CUSTOM_ID: h:EA84335B-2A51-4B4A-9392-F116289EDB10
:header-args: :emacs-lisp :tangle ./synthmacs/synthmacs-ui.el
:END:

** Themes
:PROPERTIES:
:CUSTOM_ID: h:07174251-A9E9-47E8-8AF3-AD5013CAC793
:END:
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  ;; Global settings (defaults)


  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled


  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)

  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

(use-package afternoon-theme)
(use-package alect-themes)
(use-package ample-theme)
(use-package ample-zen-theme)
(use-package badwolf-theme)
(use-package catppuccin-theme)
(use-package clues-theme)
(use-package color-theme-sanityinc-solarized)
(use-package color-theme-sanityinc-tomorrow)
(use-package cyberpunk-theme)
(use-package darktooth-theme)
(use-package flatland-theme)
(use-package gruvbox-theme)
(use-package jazz-theme)
(use-package kaolin-themes)
(use-package material-theme)
(use-package modus-themes)
(use-package monokai-theme)
(use-package seti-theme)
(use-package soothe-theme)
(use-package subatomic-theme)
(use-package sublime-themes)

(use-package solaire-mode
  :init
  (solaire-global-mode +1))


;;; Functions:
(defvar synthmacs--fallback-theme 'kaolin-bubblegum
  "Fallback theme if user theme cannot be applied.")

(defvar synthmacs--cur-theme nil
  "Internal variable storing currently loaded theme.")

(defvar synthmacs--user-themes '(kaolin-bubblegum
				 doom-challenger-deep
				 cyberpunk
				 jazz
				 afternoon
				 ample-zen
				 doom-1337
				 catppuccin
				 manoj-dark
				 doom-snazzy
				 kaolin-dark
				 doom-gruvbox
				 doom-old-hope
				 kaolin-aurora
				 doom-acario-dark
				 gruvbox-dark-hard
				 modus-vivendi
				 alect-black
				 modus-operandi
				 gruvbox-light-hard))

(defun synthmacs/load-theme (&optional theme)
  "Apply user theme."
  (if theme
      (progn
	(load-theme theme t)
	(setq-default synthmacs--cur-theme theme))
    (progn
      (load-theme synthmacs--fallback-theme t)
      (setq-default spacemacs--cur-theme synthmacs--fallback-theme))))

(defun synthmacs/load-random-theme ()
  (interactive)
  (let* ((size (length synthmacs--user-themes))
         (index (random size))
         (randomTheme (nth index synthmacs--user-themes)))
    (synthmacs/load-theme randomTheme)))

(defun synthmacs/cycle-synthmacs-theme (&optional backward)
  "Cycle through themes defined in `synthmacs-themes'.
When BACKWARD is non-nil, or with universal-argument, cycle backwards."
  (interactive "P")
  (let* (
	 ;; (theme-names (mapcar 'synthmacs--user-themes)
         (themes (if backward
		     (reverse synthmacs--user-themes)
		   synthmacs--user-themes))
         (next-theme
	  (car (or (cdr (memq synthmacs--cur-theme themes))
		   ;; if current theme isn't in cycleable themes, start
		   ;; over
		   themes))))
    (when synthmacs--cur-theme
      (disable-theme synthmacs--cur-theme))
    (let ((progress-reporter
           (make-progress-reporter
            (format "Loading theme %s..." next-theme))))
      (synthmacs/load-theme next-theme)
      (progress-reporter-done progress-reporter))))

(defun synthmacs/cycle-synthmacs-theme-backward ()
  "Cycle through themes defined in `dotsynthmacs-themes' backward."
  (interactive)
  (synthmacs/cycle-synthmacs-theme t))

(synthmacs/leader-keys
  "tt" '(:ignore t :wk "themes")
  "ttn" '(synthmacs/hydra-theme-cycle :wk "cycle-themes")
  "ttN" '(synthmacs/hydra-theme-cycle-backward :wk "cycle-themes-backwards")
  "ttr" '(synthmacs/hydra-theme-random :wk "random-theme"))

(defun synthmacs/hydra-theme-cycle ()
  (interactive)
  (synthmacs/cycle-synthmacs-theme)
  (synthmacs/hydra/cycle-themes/body))

(defun synthmacs/hydra-theme-cycle-backward ()
  (interactive)
  (synthmacs/cycle-synthmacs-theme t)
  (synthmacs/hydra/cycle-themes/body))

(defun synthmacs/hydra-theme-random ()
  (interactive)
  (synthmacs/load-random-theme)
  (synthmacs/hydra/cycle-themes/body))

(defhydra synthmacs/hydra/cycle-themes (:timeout 20)
  "
^Themes Menu
^^^^^^^^------------------------
[_n_]     cycle-theme
[_p_/_N_]   cycle-theme-backward
[_r_]     random-theme
[_q_] quit
"
  ("n" synthmacs/cycle-synthmacs-theme)
  ("p" synthmacs/cycle-synthmacs-theme-backward)
  ("N" synthmacs/cycle-synthmacs-theme-backward)
  ("r" synthmacs/load-random-theme)
  ("q" nil :exit t))

(synthmacs/load-random-theme)

#+end_src

** Navigation
:PROPERTIES:
:CUSTOM_ID: h:F723A922-5198-47CE-859C-F0643B7F3F85
:END:
#+begin_src emacs-lisp
(use-package winum
  :general
  (synthmacs/leader-keys
    "1" '(winum-select-window-1 :wk "winum-select-window-1")
    "2" '(winum-select-window-2 :wk "winum-select-window-2")
    "3" '(winum-select-window-3 :wk "winum-select-window-3")
    "4" '(winum-select-window-4 :wk "winum-select-window-4")
    "5" '(winum-select-window-5 :wk "winum-select-window-5")
    "6" '(winum-select-window-6 :wk "winum-select-window-6")
    "7" '(winum-select-window-7 :wk "winum-select-window-7")
    "8" '(winum-select-window-8 :wk "winum-select-window-8")
    "9" '(winum-select-window-9 :wk "winum-select-window-9"))
  :init
  (setq winum-auto-setup-mode-line nil
	winum-ignored-buffers '(" *which-key*"))
  (winum-mode))

#+end_src

*** ace-window
:PROPERTIES:
:CUSTOM_ID: h:C0A767D2-F7EE-4877-8D86-B83D3D3AE37E
:END:
#+begin_src emacs-lisp
(use-package ace-window
  :general
  (synthmacs/leader-keys
    "wD" '(ace-delete-window :wk "ace-delete-window")
    "wS" '(ace-swap-window :wk "ace-swap-window")
    ))
#+end_src

*** Avy
:PROPERTIES:
:CUSTOM_ID: h:935137F1-A96B-4580-9DC9-6B0BE5474F4D
:END:
#+begin_src emacs-lisp
(use-package avy
  :general
  (synthmacs/leader-keys
    "jj" '(avy-goto-char-timer :wk "avy-goto-char-timer")
    "jc" '(avy-goto-char :wk "avy-goto-char")
    "jl" '(avy-goto-line :wk "avy-goto-line")
    ))
#+end_src

** Icons
:PROPERTIES:
:CUSTOM_ID: h:F4A9DF01-4EDA-4775-AAFD-C10B5C66CBED
:END:
#+begin_src emacs-lisp
(setq nerd-icons-scale-factor 1.2)

(use-package nerd-icons
  :custom
  ;; The Nerd Font you want to use in GUI
  ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;; but you can use any other Nerd Font if you want
  (nerd-icons-font-family "FiraCode Nerd Font"))

(use-package all-the-icons
  :if (display-graphic-p))
#+end_src

** Modeline
:PROPERTIES:
:CUSTOM_ID: h:F2FD58B7-0A8E-423A-896D-7FDBFF2554F3
:END:
#+begin_src emacs-lisp
(use-package minions
  :hook (doom-modeline-mode . minions-mode))

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 45
	doom-modeline-project-detection 'auto
	doom-modeline-icon t
	doom-modeline-major-mode-icon t
	doom-modeline-major-mode-color-icon t
	doom-modeline-buffer-state-icon t
	doom-modeline-buffer-modification-icon t
	doom-modeline-time-icon nil
	doom-modeline-buffer-encoding t
	doom-modeline-vcs-max-length 15
	doom-modeline-lsp t
	doom-modeline-modal-icon t))
#+end_src

** which-key
:PROPERTIES:
:CUSTOM_ID: h:40130D60-680F-44CF-B7CD-FF38E97CB2EF
:END:
#+begin_src emacs-lisp
(setq which-key-idle-delay 0.4)
(use-package which-key
  :init
  (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	which-key-sort-order #'which-key-key-order-alpha
	;; which-key-sort-order #'which-key-prefix-then-key-order
	which-key-sort-uppercase-first nil
	which-key-add-column-padding 1
	which-key-max-display-columns nil
	which-key-min-display-lines 6
	which-key-side-window-slot -10
	which-key-side-window-max-height 0.25
	which-key-max-description-length 25
	which-key-allow-imprecise-window-fit t
	which-key-separator " → "
	which-key-prefix-prefix "+")
  ;; Rename the entry for M-1 in the SPC h k Top-level bindings,
  ;; and for 1 in the SPC- Spacemacs root, to 1..9
  (push '(("\\(.*\\)1" . "winum-select-window-1") .
	  ("\\11..9" . "select window 1..9"))
	which-key-replacement-alist)

  ;; Hide the entries for M-[2-9] in the SPC h k Top-level bindings,
  ;; and for [2-9] in the SPC- Spacemacs root
  (push '((nil . "winum-select-window-[2-9]") . t)
	which-key-replacement-alist))
#+end_src

** rainbow
:PROPERTIES:
:CUSTOM_ID: h:67838E6E-FA0F-4C8A-A56B-1939A6940C6E
:END:
#+begin_src emacs-lisp
;; https://github.com/Fanael/rainbow-delimiters
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Completion framework
:PROPERTIES:
:CUSTOM_ID: h:FB3661CB-A573-40B6-B331-449D77DBD199
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-completion-framework.el
:END:

** Vertico
:PROPERTIES:
:CUSTOM_ID: h:5D5A0CE5-8CC2-4134-8CCB-52074A0B8654
:END:
#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t)

  :bind (:map minibuffer-local-map
	      ("C-h" . synthmacs/minibuffer-backwards-kill)))

;; -------------------- SaveHist -------------------
;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; -------------------- Useful Emacs Configs for Vectico -------------------
;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)

  ;; Focus the help window when bringing it up, so that I can quit it easily
  (setq help-window-select t)
  )
#+end_src

** Orderless
:PROPERTIES:
:CUSTOM_ID: h:CF8C8DA3-23A3-4CF0-80A9-3DB977BB0182
:END:
#+begin_src emacs-lisp
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Consult
:PROPERTIES:
:CUSTOM_ID: h:AFC23C2A-A17F-4151-A2E7-66D57A2590C2
:END:
#+begin_src emacs-lisp
(use-package consult
  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init
(defun synthmacs/consult-ripgrep ()
  "Search org-roam directory using consult-ripgrep. With live-preview."
  (interactive)
  (let ((consult-ripgrep-command "rg --no-ignore --hidden --ignore-case --line-number"))
    (consult-ripgrep
     (if (projectile-project-p)
	 (projectile-project-root)
       ""))))


  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"
  (setq consult-ripgrep-args "rg --null --line-buffered --no-ignore --hidden --color=never --max-columns=1000 --path-separator / --smart-case --no-heading --with-filename --line-number --search-zip")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)

  :general
  (synthmacs/leader-keys
    "/" '(synthmacs/consult-ripgrep :wk "search project")

    ;; files
    "fr" '(consult-recent-file :wk "recent files")

    ;; search
    "sp" '(synthmacs/consult-ripgrep :wk "search project (consult-ripgrep)")
    "ss" '(consult-line :wk "swoop")

    ;; toggles
    "ttt" '(consult-theme :wk "consult-themes"))
  ;; Replace bindings. Lazily loaded due by `use-package'.
  ;; :bind (;; C-c bindings in `mode-specific-map'
         ;; ("C-c M-x" . consult-mode-command)
         ;; ("C-c h" . consult-history)
         ;; ("C-c k" . consult-kmacro)
         ;; ("C-c m" . consult-man)
         ;; ("C-c i" . consult-info)
         ;; ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ;; ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ;; ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ;; ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ;; ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ;; ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ;; ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ;; ("M-#" . consult-register-load)
         ;; ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ;; ("C-M-#" . consult-register)
         ;; ;; Other custom bindings
         ;; ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ;; ("M-g e" . consult-compile-error)
         ;; ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ;; ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ;; ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ;; ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ;; ("M-g m" . consult-mark)
         ;; ("M-g k" . consult-global-mark)
         ;; ("M-g i" . consult-imenu)
         ;; ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ;; ("M-s d" . consult-find)
         ;; ("M-s D" . consult-locate)
         ;; ("M-s g" . consult-grep)
         ;; ("M-s G" . consult-git-grep)
         ;; ("M-s r" . consult-ripgrep)
         ;; ("M-s l" . consult-line)
         ;; ("M-s L" . consult-line-multi)
         ;; ("M-s k" . consult-keep-lines)
         ;; ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ;; ("M-s e" . consult-isearch-history)
         ;; :map isearch-mode-map
         ;; ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ;; ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ;; ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ;; ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         ;; :map minibuffer-local-map
         ;; ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ;; ("M-r" . consult-history)                 ;; orig. previous-matching-history-element
	 ;; )
  )
#+end_src

** Marginalia
:PROPERTIES:
:CUSTOM_ID: h:FBAFE981-A3D6-4CE7-B9EE-E4BC74F56B1F
:END:
#+begin_src emacs-lisp
(use-package marginalia
  :init
  ;; Marginalia must be actived in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))

(general-define-key
 ;; NOTE: keymaps specified with :keymaps must be quoted
 :keymaps 'minibuffer-local-map
 "M-A" 'marginalia-cycle)
#+end_src

** Embark
:PROPERTIES:
:CUSTOM_ID: h:0CEA8416-E61B-4CF2-9DD3-51F79BE7EE4F
:END:
#+begin_src emacs-lisp
(use-package embark
  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
  ;; strategy, if you want to see the documentation from multiple providers.
  (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config
  ;; (setq embark-prompter 'embark-completing-read-prompter)
  ;; (setq embark-indicators '(embark-minimal-indicator))
  ;; Sets the buffer at the bottom. But then it must be scrolled with C-M-v or C-M-S-v
  ;; (setq embark-verbose-indicator-display-action '(display-buffer-at-bottom))

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))
  )

;; Definind keys here, because there's some weird overlaps with an evil mode
;; key "C-." that I never use.
(general-define-key
 :states 'normal
 "C-." nil)
(general-define-key 
  "C-." 'embark-act)
;; (general-define-key
;;   :keymaps 'embark-general-map
;;   "G" . synthmacs/embark-google-search)
(synthmacs/leader-keys
  ;; help
  "hb" '(embark-bindings :wk "embark-bindings"))

(defun synthmacs/embark-google-search (term)
  "An action to search for anything at point in Google."
    (interactive "sSearch Term: ")
    (browse-url
     (format "http://google.com/search?q=%s" term)))

;; --------------- Use Embark in WhichKey -------------
(defun embark-which-key-indicator ()
  "An embark indicator that displays keymaps using which-key.
The which-key help message will show the type and value of the
current target followed by an ellipsis if there are further
targets."
  (lambda (&optional keymap targets prefix)
    (if (null keymap)
        (which-key--hide-popup-ignore-command)
      (which-key--show-keymap
       (if (eq (plist-get (car targets) :type) 'embark-become)
           "Become"
         (format "Act on %s '%s'%s"
                 (plist-get (car targets) :type)
                 (embark--truncate-target (plist-get (car targets) :target))
                 (if (cdr targets) "…" "")))
       (if prefix
           (pcase (lookup-key keymap prefix 'accept-default)
             ((and (pred keymapp) km) km)
             (_ (key-binding prefix 'accept-default)))
         keymap)
       nil nil t (lambda (binding)
                   (not (string-suffix-p "-argument" (cdr binding))))))))

;; (setq embark-indicators
;;   '(embark-which-key-indicator
;;     embark-highlight-indicator
;;     embark-isearch-highlight-indicator))

(defun embark-hide-which-key-indicator (fn &rest args)
  "Hide the which-key indicator immediately when using the completing-read prompter."
  (which-key--hide-popup-ignore-command)
  (let ((embark-indicators
         (remq #'embark-which-key-indicator embark-indicators)))
      (apply fn args)))

;; (advice-add #'embark-completing-read-prompter
;;             :around #'embark-hide-which-key-indicator)

;; -------- Package actions using Straight -------------
;; (defvar-keymap embark-straight-map
;;   :parent embark-general-map
;;   "u" #'straight-visit-package-website
;;   "r" #'straight-get-recipe
;;   "i" #'straight-use-package
;;   "c" #'straight-check-package
;;   "F" #'straight-pull-package
;;   "f" #'straight-fetch-package
;;   "p" #'straight-push-package
;;   "n" #'straight-normalize-package
;;   "m" #'straight-merge-package)

;; (add-to-list 'embark-keymap-alist '(straight . embark-straight-map))

(add-to-list 'marginalia-prompt-categories '("recipe\\|package" . straight))
(use-package embark-consult
   ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

(use-package wgrep)

#+end_src

* Useful Tools
:PROPERTIES:
:CUSTOM_ID: h:B57C03F6-2111-489A-9303-B1A06C95EFF5
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-tools.el
:END:

** Helpful
:PROPERTIES:
:CUSTOM_ID: h:949B41C1-C4A4-484B-9A6A-76A07DBBFCB1
:END:
#+begin_src emacs-lisp
(use-package helpful
  :general
  (synthmacs/leader-keys
    "h." '(helpful-at-point :wk "helpful-at-point")
    "hc" '(helpful-command :wk "describe-command")
    "hf" '(helpful-callable :wk "describe-function")
    "hk" '(helpful-key :wk "describe-key")
    "hv" '(helpful-variable :wk "describe-variable")))
#+end_src

** Rg
:PROPERTIES:
:CUSTOM_ID: h:BFB3F21C-B7E7-4057-AF46-5B9C1A6DEF0C
:END:
#+begin_src emacs-lisp
(use-package rg
  :ensure-system-package rg)
#+end_src

** Projectile
:PROPERTIES:
:CUSTOM_ID: h:1653A50A-82D1-416F-830C-00B886B5A241
:END:
#+begin_src emacs-lisp
(use-package projectile
  :diminish
  :general
  (synthmacs/leader-keys
    "pf" '(projectile-find-file :wk "projectile-find-file")
    "pk" '(projectile-kill-buffers :wk "projectile-kill-buffers")
    "pp" '(projectile-switch-project :wk "projectile-switch-project")
    "pr" '(projectile-recentf :wk "projectile-recentf")
    "pm" '(projectile-command-map :wk "projectile menu"))
  :custom ((projectile-completion-system 'auto))
  :init
  (projectile-mode +1)
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/Developer")
    (setq projectile-project-search-path '("~/Developer")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package consult-projectile)
#+end_src

** Git/VCS Integration
:PROPERTIES:
:CUSTOM_ID: h:38F6723F-CA92-401B-BE94-8130078BAD7E
:END:
#+begin_src emacs-lisp
(use-package magit
  ;; :custom
  ;; (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
  :general
  (synthmacs/leader-keys
    "gs" '(magit-status :wk "magit-status")))

;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
;; (use-package forge)

(use-package git-gutter
  :hook (prog-mode . git-gutter-mode)
  :config
  (setq git-gutter:update-interval 0.02))

(use-package git-gutter-fringe
  :config
(define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
(define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
(define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))

(synthmacs/leader-keys
  "gb" '(magit-blame-addition :wk "magit-blame")
  "gc" '(magit-clone :wk "magit-clone")
  "gd" '(magit-dispatch :wk "magit-dispatch")
  "gf" '(magit-file-dispatch :wk "magit-file-dispatch")
  "gh" '(magit-info :wk "magit-help")
  "gi" '(magit-init :wk "magit-init"))
#+end_src

** Dashboard
:PROPERTIES:
:CUSTOM_ID: h:108BED42-7912-45EE-B0BD-364D4479319A
:END:
#+begin_src emacs-lisp
(use-package dashboard
  :init
  (setq dashboard-startup-banner "~/.dotfiles/emacs/.emacs.d/synthmacs/assets/logo.txt")
  (setq dashboard-banner-logo-title "adudenamedruby's Emacs")
  (setq dashboard-center-content t)
  ;; (setq dashboard-icon-type 'all-the-icons)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-init-info t)
  (setq dashboard-items '((recents  . 5)
			  (projects . 5)))
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-projects-backend 'projectile))
#+end_src

** WS-Butler
:PROPERTIES:
:CUSTOM_ID: h:C8E39F4E-D75F-4031-8205-F1A7F865B91A
:END:
#+begin_src emacs-lisp
(use-package ws-butler
  :init
  ;; (ws-butler-global-mode 1)
  (add-hook 'prog-mode-hook #'ws-butler-mode))
#+end_src

* Programming Environment
:PROPERTIES:
:CUSTOM_ID: h:2E967F87-8304-4262-B5BF-3286ACA7211B
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-programming.el
:END:

** LSP
:PROPERTIES:
:CUSTOM_ID: h:222F2EE3-FD70-4274-AABC-759B5F7556C5
:END:
#+begin_src emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook
  (lsp-mode . lsp-enable-which-key-integration))

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))

(use-package lsp-treemacs
  :after lsp)

;; optionally if you want to use debugger
;; (use-package dap-mode)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language
#+end_src

** Corfu
:PROPERTIES:
:CUSTOM_ID: h:4B6D88C2-0393-4462-9C06-37BD9160B415
:END:
#+begin_src emacs-lisp
(use-package corfu
  :straight (corfu :files (:defaults "extensions/*")
		   :includes (corfu-popupinfo))
  :hook (corfu-mode . corfu-popupinfo-mode)
  ;; Optional customizations
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-auto-delay 0.0)
  ;; (corfu-auto-prefix 0)
  (corfu-separator ?\s)          ;; Orderless field separator
  (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  (corfu-popupinfo-delay 1)
  (corfu-popupinfo-max-height 15)
  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since Dabbrev can be used globally (M-/).
  ;; See also `corfu-exclude-modes'.
  :general
  (synthmacs/leader-keys
  "ta" '(global-corfu-mode :wk "auto-completion"))
  :init
  (global-corfu-mode)
  :config
  (keymap-set corfu-map "C-d" 'corfu-popupinfo-scroll-down)
  (keymap-set corfu-map "C-u" 'corfu-popupinfo-scroll-up)
  (keymap-set corfu-map "C-i" 'corfu-popupinfo-toggle))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))

(use-package kind-icon
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** COMMENT Dirvish
:PROPERTIES:
:CUSTOM_ID: h:895ADECA-8F1A-4FBB-A930-871EE0B6D4D8
:END:
#+begin_src emacs-lisp
(use-package dirvish
  :init
  (dirvish-override-dired-mode)
  :config
  (setq delete-by-moving-to-trash t
	dirvish-attributes
	'(all-the-icons file-size collapse subtree-state vc-state)
	dirvish-side-width 45
	dirvish-side-follow-mode t
	))

(synthmacs/leader-keys
  "fm" '(dirvish :wk "file manager")
  "ft" '(dirvish-side :wk "file tree"))

;; Addtional syntax highlighting for dired
(use-package diredfl
  :hook
  ((dired-mode . diredfl-mode)
   ;; highlight parent and directory preview as well
   (dirvish-directory-view-mode . diredfl-mode))
  :config
  (set-face-attribute 'diredfl-dir-name nil :bold t))
#+end_src

** Flycheck
:PROPERTIES:
:CUSTOM_ID: h:337359CD-0A1C-48AE-A141-36BFC0FE4641
:END:
#+begin_src emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
#+end_src

** iMenu
:PROPERTIES:
:CUSTOM_ID: h:A05AB852-E81B-4B50-B873-6A3C2A917C08
:END:
#+begin_src emacs-lisp
(use-package imenu-list)

(synthmacs/leader-keys
  "ti" '(imenu-list-smart-toggle :wx "imenu-list-smart-toggle"))

#+end_src

** Snippets
:PROPERTIES:
:CUSTOM_ID: h:36F5A754-136E-4AA5-967D-358D69599D01
:END:
#+begin_src emacs-lisp
(use-package yasnippet)

;; (yas-reload-all)
(add-hook 'prog-mode-hook #'yas-minor-mode)

(use-package yasnippet-snippets)
(use-package common-lisp-snippets)
#+end_src

** Treesitter
:PROPERTIES:
:CUSTOM_ID: h:1A1DAD25-321C-4F90-A226-1C14A4F7A79F
:END:
#+begin_src emacs-lisp
(require 'treesit)

(use-package tree-sitter-langs)

;; Load the language bundle
(require 'tree-sitter-langs)

;; (setq treesit-language-source-alist
;;    '((bash "https://github.com/tree-sitter/tree-sitter-bash")
;;      (c "https://github.com/tree-sitter/tree-sitter-c")
;;      (cmake "https://github.com/uyha/tree-sitter-cmake")
;;      (clojure "https://github.com/sogaiu/tree-sitter-clojure")
;;      (commonlisp "https://github.com/theHamsta/tree-sitter-commonlisp")
;;      (css "https://github.com/tree-sitter/tree-sitter-css")
;;      (elixir "https://github.com/elixir-lang/tree-sitter-elixir")
;;      (elisp "https://github.com/Wilfred/tree-sitter-elisp")
;;      (go "https://github.com/tree-sitter/tree-sitter-go")
;;      (html "https://github.com/tree-sitter/tree-sitter-html")
;;      (haskell "https://github.com/tree-sitter/tree-sitter-haskell")
;;      (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
;;      (json "https://github.com/tree-sitter/tree-sitter-json")
;;      (lua "https://github.com/Azganoth/tree-sitter-lua")
;;      (make "https://github.com/alemuller/tree-sitter-make")
;;      (markdown "https://github.com/ikatyang/tree-sitter-markdown")
;;      (objc "https://github.com/jiyee/tree-sitter-objc")
;;      ;; (ocaml "https://github.com/tree-sitter/tree-sitter-ocaml")
;;      (python "https://github.com/tree-sitter/tree-sitter-python")
;;      (racket "https://github.com/6cdh/tree-sitter-racket")
;;      (ruby "https://github.com/tree-sitter/tree-sitter-ruby")
;;      (rust "https://github.com/tree-sitter/tree-sitter-rust")
;;      (scheme "https://github.com/6cdh/tree-sitter-scheme")
;;      (sqlite "https://github.com/dhcmrlchtdj/tree-sitter-sqlite")
;;      (sql "https://github.com/m-novikov/tree-sitter-sql")
;;      ;; (swift "https://gitlab.com/woolsweater/tree-sitter-swifter")
;;      (toml "https://github.com/tree-sitter/tree-sitter-toml")
;;      (yaml "https://github.com/ikatyang/tree-sitter-yaml")
;;      (zig "https://github.com/maxxnino/tree-sitter-zig")))

;; (defun synthmacs/treesit-install-all-languages ()
;;     "Install all languages specified by `treesit-language-source-alist'."
;;     (interactive)
;;     (let ((languages (mapcar 'car treesit-language-source-alist)))
;;       (dolist (lang languages)
;; 	      (treesit-install-language-grammar lang)
;; 	      (message "`%s' parser was installed." lang)
;; 	      (sit-for 0.75))))

;; (add-hook 'c-mode-hook
;; 	  (lambda () (if (treesit-ready-p 'c t)
;; 		    (c-ts-mode)
;; 		  (c-mode))))

;; (add-hook 'common-lisp-mode-hook
;; 	  (lambda () (if (treesit-ready-p 'commonlisp t)
;; 		    (common-lisp-ts-mode)
;; 		  (common-lisp-mode))))

;; (add-hook 'clojure-mode-hook
;; 	  (lambda () (if (treesit-ready-p 'clojure t)
;; 		    (clojure-ts-mode)
;; 		  (clojure-mode))))

;; (add-hook 'css-mode-hook
;; 	  (lambda () (if (treesit-ready-p 'css t)
;; 		    (css-ts-mode)
;; 		  (css-mode))))

;; (add-hook 'html-mode-hook
;; 	  (lambda () (if (treesit-ready-p 'html t)
;; 		    (html-ts-mode)
;; 		  (html-mode))))

;; (add-hook 'haskell-mode-hook
;; 	  (lambda () (if (treesit-ready-p 'haskell t)
;; 		    (haskell-ts-mode)
;; 		  (haskell-mode))))

;; (add-hook 'javascript-mode-hook
;; 	  (lambda () (if (treesit-ready-p 'javascript t)
;; 		    (js-ts-mode)
;; 		  (javascript-mode))))

;; (add-hook 'js-json-mode-hook
;; 	  (lambda () (if (treesit-ready-p 'json t)
;; 		    (json-ts-mode)
;; 		  (js-json-mode))))

;; (add-hook 'python-mode-hook
;; 	  (lambda () (if (treesit-ready-p 'python t)
;; 		    (python-ts-mode)
;; 		  (python-mode))))

;; (add-hook 'sh-mode-hook
;; 	  (lambda () (if (treesit-ready-p 'bash t)
;; 		    (bash-ts-mode)
;; 		  (sh-mode))))
#+end_src

* Programming Languages
:PROPERTIES:
:CUSTOM_ID: h:732BA080-834D-49E0-967E-0D37CE1C6BA0
:END:

** Clojure
:PROPERTIES:
:CUSTOM_ID: h:FF09BB1E-5437-4AFF-A4F5-367B92AF76CC
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-clojure.el
:END:
** Haskell
:PROPERTIES:
:CUSTOM_ID: h:28BA5E9F-6893-4E40-9F42-246F8731948C
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-haskell.el
:END:
** HTML
:PROPERTIES:
:CUSTOM_ID: h:5561B91C-C61D-47D5-8320-9A559032C762
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-html.el
:END:
** LISP
:PROPERTIES:
:CUSTOM_ID: h:2171FA3F-D9BC-4058-9442-6827BABFC2CE
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-lisp.el
:END:
#+begin_src emacs-lisp
(use-package sly)

(use-package sly-macrostep)

(use-package sly-repl-ansi-color
  :init
  (add-to-list 'sly-contribs 'sly-repl-ansi-color))
#+end_src

** Markdown
:PROPERTIES:
:CUSTOM_ID: h:80E9702A-E2B6-44B5-A139-AD16C9B5D92F
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-markdown.el
:END:
** Rust
:PROPERTIES:
:CUSTOM_ID: h:6355CFE4-6BA5-4134-BA38-74634F9FF919
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-rust.el
:END:
** Swift
:PROPERTIES:
:CUSTOM_ID: h:4C66614A-ED5B-4771-96C3-E2C789282DC1
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-swift.el
:END:
#+begin_src emacs-lisp
(use-package lsp-sourcekit
  :after lsp-mode
  :config
  (setq lsp-sourcekit-executable (string-trim (shell-command-to-string "xcrun --find sourcekit-lsp"))))

(use-package swift-mode
  :hook (swift-mode . (lambda () (lsp))))
#+end_src

** YAML
:PROPERTIES:
:CUSTOM_ID: h:0AB88184-7AE8-4232-B4A7-B8C4714B91D3
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-yaml.el
:END:
* Provide modules
:PROPERTIES:
:CUSTOM_ID: h:754DFB20-B2AB-4750-9BDA-D24E8014C504
:END:

** synthmacs-core
:PROPERTIES:
:CUSTOM_ID: h:24A7FE78-E6B9-4C81-A2BE-6A049A8209AD
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-core.el
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-core)
;;; synthmacs-core.el ends here
#+end_src

** synthmacs-package-management
:PROPERTIES:
:CUSTOM_ID: h:24A7FE78-E6B9-4C81-A2BE-6A049A8209AD
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-package-management.el
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-package-management)
;;; synthmacs-package-management.el ends here
#+end_src

** synthmacs-general-evil
:PROPERTIES:
:CUSTOM_ID: h:24A7FE78-E6B9-4C81-A2BE-6A049A8209AD
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-general-evil.el
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-general-evil)
;;; synthmacs-general-evil.el ends here
#+end_src

** synthmacs-org
:PROPERTIES:
:CUSTOM_ID: h:24A7FE78-E6B9-4C81-A2BE-6A049A8209AD
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-org.el
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-org)
;;; synthmacs-org.el ends here
#+end_src

** synthmacs-ui
:PROPERTIES:
:CUSTOM_ID: h:24A7FE78-E6B9-4C81-A2BE-6A049A8209AD
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-ui.el
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-ui)
;;; synthmacs-ui.el ends here
#+end_src

** synthmacs-completion-framework
:PROPERTIES:
:CUSTOM_ID: h:24A7FE78-E6B9-4C81-A2BE-6A049A8209AD
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-completion-framework.el
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-completion-framework)
;;; synthmacs-completion-framework.el ends here
#+end_src

** synthmacs-tools
:PROPERTIES:
:CUSTOM_ID: h:24A7FE78-E6B9-4C81-A2BE-6A049A8209AD
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-tools.el
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-tools)
;;; synthmacs-tools.el ends here
#+end_src

** synthmacs-programming
:PROPERTIES:
:CUSTOM_ID: h:24A7FE78-E6B9-4C81-A2BE-6A049A8209AD
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-programming.el
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-programming)
;;; synthmacs-programming.el ends here
#+end_src

** Programming Languages
:PROPERTIES:
:CUSTOM_ID: h:320148C4-896F-4FFF-90CD-08E91DCCED9E
:END:

*** synthmacs-lang-clojure
:PROPERTIES:
:CUSTOM_ID: h:24A7FE78-E6B9-4C81-A2BE-6A049A8209AD
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-clojure.el
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-lang-clojure)
;;; synthmacs-lang-clojure.el ends here
#+end_src

*** synthmacs-lang-haskell
:PROPERTIES:
:CUSTOM_ID: h:24A7FE78-E6B9-4C81-A2BE-6A049A8209AD
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-haskell.el
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-lang-haskell)
;;; synthmacs-lang-haskell.el ends here
#+end_src

*** synthmacs-lang-html
:PROPERTIES:
:CUSTOM_ID: h:24A7FE78-E6B9-4C81-A2BE-6A049A8209AD
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-html.el
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-lang-html)
;;; synthmacs-lang-html.el ends here
#+end_src

*** synthmacs-lang-lisp
:PROPERTIES:
:CUSTOM_ID: h:24A7FE78-E6B9-4C81-A2BE-6A049A8209AD
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-lisp.el
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-lang-lisp)
;;; synthmacs-lang-lisp.el ends here
#+end_src

*** synthmacs-lang-markdown
:PROPERTIES:
:CUSTOM_ID: h:24A7FE78-E6B9-4C81-A2BE-6A049A8209AD
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-markdown.el
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-lang-markdown)
;;; synthmacs-lang-markdown.el ends here
#+end_src

*** synthmacs-lang-rust
:PROPERTIES:
:CUSTOM_ID: h:24A7FE78-E6B9-4C81-A2BE-6A049A8209AD
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-rust.el
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-lang-rust)
;;; synthmacs-lang-rust.el ends here
#+end_src

*** synthmacs-lang-swift
:PROPERTIES:
:CUSTOM_ID: h:24A7FE78-E6B9-4C81-A2BE-6A049A8209AD
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-swift.el
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-lang-swift)
;;; synthmacs-lang-swift.el ends here
#+end_src

*** synthmacs-lang-yaml
:PROPERTIES:
:CUSTOM_ID: h:24A7FE78-E6B9-4C81-A2BE-6A049A8209AD
:header-args:    :emacs-lisp :tangle ./synthmacs/synthmacs-lang-yaml.el
:END:
#+begin_src emacs-lisp
(provide 'synthmacs-lang-yaml)
;;; synthmacs-lang-yaml.el ends here
#+end_src

* COMMENT Local variables
:PROPERTIES:
:CUSTOM_ID: h:8CE072CD-CA85-4E53-B672-E0AC74E4E4EC
:END:
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(progn (synthmacs/org-add-ids-to-headlines-in-file) (synthmacs/tangle-config))) nil t)
# End:
